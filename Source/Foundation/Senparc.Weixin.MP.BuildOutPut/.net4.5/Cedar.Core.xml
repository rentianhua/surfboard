<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cedar.Core</name>
    </assembly>
    <members>
        <member name="T:Cedar.Core.ApplicationContexts.ApplicationContext">
            <summary>
                supply the basic application context opertions
            </summary>
        </member>
        <member name="F:Cedar.Core.ApplicationContexts.ApplicationContext.ContextHeaderNamespace">
            <summary>
                define the context header's namespace.
            </summary>
        </member>
        <member name="F:Cedar.Core.ApplicationContexts.ApplicationContext.ContextHeaderLocalName">
            <summary>
                define the context header's local name.
            </summary>
        </member>
        <member name="F:Cedar.Core.ApplicationContexts.ApplicationContext.ContextHttpHeaderName">
            <summary>
                The context http header name.
            </summary>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.ApplicationContext.Current">
            <summary>
                get the current application context
            </summary>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.ApplicationContext.ContextLocator">
            <summary>
                get or private set the context locator interface.
            </summary>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.ApplicationContext.ContextAttachBehavior">
            <summary>
                get or private set the context attach behavior.
            </summary>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.ApplicationContext.Item(System.String)">
            <summary>
                Gets the <see cref="T:Cedar.Core.ApplicationContexts.ContextItem" /> with the specified key.
            </summary>
            <value>The <see cref="T:Cedar.Core.ApplicationContexts.ContextItem" />.</value>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.ApplicationContext.UserId">
            <summary>
                Get or set the Id of the current user.
            </summary>
            <value>The the Id of the current user.</value>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.ApplicationContext.UserIdContextItem">
            <summary>
                Gets the user id context item.
            </summary>
            <value>The user id context item.</value>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.ApplicationContext.SessionId">
            <summary>
                Get or set the Id of the current session.
            </summary>
            <value>The the Id of the current session.</value>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.ApplicationContext.SessionIdContextItem">
            <summary>
                Gets the session id context item.
            </summary>
            <value>The session id context item.</value>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.ApplicationContext.UserName">
            <summary>
                Get or set the name of the current user.
            </summary>
            <value>The name of the current user.</value>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.ApplicationContext.UserNameContextItem">
            <summary>
                Gets the user name context item.
            </summary>
            <value>The user name context item.</value>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.ApplicationContext.TransactionId">
            <summary>
                Gets or sets the id of the current ambient transaction.
            </summary>
            <value>The transaction id.</value>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.ApplicationContext.TransactionIdContextItem">
            <summary>
                Gets the transaction id context item.
            </summary>
            <value>The transaction id context item.</value>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.ApplicationContext.TimeZone">
            <summary>
                Gets or sets the time zone.
            </summary>
            <value>The time zone.</value>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.ApplicationContext.TimeZoneContextItem">
            <summary>
                Gets the time zone context item.
            </summary>
            <value>The time zone context item.</value>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.ApplicationContext.Culture">
            <summary>
                Gets or sets the current culture.
            </summary>
            <value>The current culture.</value>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.ApplicationContext.CultureContextItem">
            <summary>
                Gets the culture context item.
            </summary>
            <value>The culture context item.</value>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.ApplicationContext.UICulture">
            <summary>
                Gets or sets the current UI culture.
            </summary>
            <value>The current UI culture.</value>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.ApplicationContext.UICultureContextItem">
            <summary>
                Gets the UI culture context item.
            </summary>
            <value>The UI culture context item.</value>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.ApplicationContext.GetValue``1(System.String)">
            <summary>
                Gets the value of the <see cref="T:Cedar.Core.ApplicationContexts.ContextItem" /> with the specified key.
            </summary>
            <typeparam name="TValue">
                The type of the value of <see cref="T:Cedar.Core.ApplicationContexts.ContextItem" />
            </typeparam>
            <param name="key">The key of the <see cref="T:Cedar.Core.ApplicationContexts.ContextItem" /> to get.</param>
            <returns>The value of the <see cref="T:Cedar.Core.ApplicationContexts.ContextItem" /> to get. </returns>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.ApplicationContext.SetContext(System.String,System.Object)">
            <summary>
                Sets the context.
            </summary>
            <param name="key">The key of the <see cref="T:Cedar.Core.ApplicationContexts.ContextItem" />.</param>
            <param name="value">The value of the <see cref="T:Cedar.Core.ApplicationContexts.ContextItem" />.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.ApplicationContext.SetContext(System.String,System.Object,System.Boolean)">
            <summary>
                Sets the context.
            </summary>
            <param name="key">The key of the <see cref="T:Cedar.Core.ApplicationContexts.ContextItem" />.</param>
            <param name="value">The value of the <see cref="T:Cedar.Core.ApplicationContexts.ContextItem" />.</param>
            <param name="isLocal">if set to <c>true</c> [is local].</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Cedar.Core.ApplicationContexts.ApplicationContextExtensions">
            <summary>
                This class defines some extensions methods against ApplicationContext />.
            </summary>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.ApplicationContextExtensions.DepedentClone(Cedar.Core.ApplicationContexts.ApplicationContext)">
            <summary>
                Clone the specified ApplicationContext and create a new DependentApplicationContext />.
            </summary>
            <param name="context">The DependentApplicationContext to be cloned.</param>
            <returns>The DependentApplicationContext</returns>
            .
        </member>
        <member name="T:Cedar.Core.ApplicationContexts.ApplicationContextScope">
            <summary>
                This class control the scope of dependent context.
            </summary>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.ApplicationContextScope.#ctor(Cedar.Core.ApplicationContexts.DependentApplicationContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Cedar.Core.ApplicationContexts.ApplicationContextScope" /> class.
            </summary>
            <param name="context">The dependent context cloned from the master application context.</param>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.ApplicationContextScope.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Cedar.Core.ApplicationContexts.CallContextLocator">
            <summary>
                The <see cref="T:Cedar.Core.ApplicationContexts.ContextLocator" /> which use the
                <see cref="T:System.Runtime.Remoting.Messaging.CallContext" /> as the context storage.
            </summary>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.CallContextLocator.Keys">
            <summary>
                Gets the keys.
            </summary>
            <value>
                The keys.
            </value>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.CallContextLocator.GetContextItem(System.String)">
            <summary>
                Get an existing context item by given key.
            </summary>
            <param name="key">The key of the <see cref="T:Cedar.Core.ApplicationContexts.ContextItem" /> to get.</param>
            <returns>
                The <see cref="T:Cedar.Core.ApplicationContexts.ContextItem" /> object to get.
            </returns>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.CallContextLocator.SetContextItemCore(Cedar.Core.ApplicationContexts.ContextItem)">
            <summary>
                Add a new context item or use the new context item to override the exiting one.
            </summary>
            <param name="contextItem">The new <see cref="T:Cedar.Core.ApplicationContexts.ContextItem" /> to set.</param>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.CallContextLocator.GetCurrentContext">
            <summary>
                Get all current context item collection.
            </summary>
            <returns>
                A <see cref="T:Cedar.Core.ApplicationContexts.ContextItemCollection" /> containg all of the current context items.
            </returns>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.CallContextLocator.Clear">
            <summary>
                Clear the current context item collection.
            </summary>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.CallContextLocator.ContextItemExits(System.String)">
            <summary>
                Check if the context item of the given key exists.
            </summary>
            <param name="key">The key of the <see cref="T:Cedar.Core.ApplicationContexts.ContextItem" />.</param>
            <returns>
                true if the <see cref="T:Cedar.Core.ApplicationContexts.ContextItem" /> already exists; otherwise, false.
            </returns>
        </member>
        <member name="T:Cedar.Core.ApplicationContexts.Configuration.ApplicationContextSettings">
            <summary>
                Define the application context setting.
            </summary>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.Configuration.ApplicationContextSettings.ContextAttachBehavior">
            <summary>
                Gets or sets the context attach behavior.
            </summary>
            <value>The context attach behavior.</value>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.Configuration.ApplicationContextSettings.ContextLocators">
            <summary>
                Gets the collection of defined ContextLocator objects.
            </summary>
            <value>
                The collection of defined ContextLocator objects.
            </value>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.Configuration.ApplicationContextSettings.DefaultContextLocator">
            <summary>
                Gets or sets the default service locator.
            </summary>
            <value>The default service locator.</value>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.Configuration.ApplicationContextSettings.Configure(Cedar.Core.IoC.IServiceLocator)">
            <summary>
                Configures the specified service locator.
            </summary>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="T:Cedar.Core.ApplicationContexts.Configuration.CallContextLocatorData">
            <summary>
                Define the call context locator data.
            </summary>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.Configuration.CallContextLocatorData.GetProviderCreator(Cedar.Core.Configuration.ServiceLocatableSettings)">
            <summary>
                Get the delegate to create provider instance.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The delegate to create provider instance.</returns>
        </member>
        <member name="T:Cedar.Core.ApplicationContexts.Configuration.ContextLocatorDataBase">
            <summary>
                Configuration element and defines the general ContextLocator configuration.
            </summary>
        </member>
        <member name="T:Cedar.Core.ApplicationContexts.Configuration.HttpSessionStateContextLocatorData">
            <summary>
                Define the http session state context locator data.
            </summary>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.Configuration.HttpSessionStateContextLocatorData.GetProviderCreator(Cedar.Core.Configuration.ServiceLocatableSettings)">
            <summary>
                Get the delegate to create provider instance.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The delegate to create provider instance.</returns>
        </member>
        <member name="T:Cedar.Core.ApplicationContexts.ContextAttachBehavior">
            <summary>
                The enumeration of ContextAttachBehavior gives following three options to attach a new context collection to the
                current ones
            </summary>
        </member>
        <member name="F:Cedar.Core.ApplicationContexts.ContextAttachBehavior.Clear">
            <summary>
                Clear all of the current context items before attaching new ones.
            </summary>
        </member>
        <member name="F:Cedar.Core.ApplicationContexts.ContextAttachBehavior.Ignore">
            <summary>
                If the concurrent context item of the same key as the one to attach, nothing will be done.
            </summary>
        </member>
        <member name="F:Cedar.Core.ApplicationContexts.ContextAttachBehavior.Override">
            <summary>
                Override the current context if it has the same key as the one to attach.
            </summary>
        </member>
        <member name="T:Cedar.Core.ApplicationContexts.ContextItem">
            <summary>
            </summary>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.ContextItem.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
                Initializes a new instance of the ContextItem class.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="isLocal">if set to <c>true</c> [is local].</param>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.ContextItem.#ctor(System.String,System.Object)">
            <summary>
                Initializes a new instance of the ContextItem class.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.ContextItem.Key">
            <summary>
                Can be considered the unique name of the context item in the collection.
            </summary>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.ContextItem.Value">
            <summary>
                The value of the context item.
            </summary>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.ContextItem.ReadOnly">
            <summary>
                Indicates whether the context item is read-only or writable, and the default value is false.
            </summary>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.ContextItem.IsLocal">
            <summary>
                Gets or sets a value indicating whether this instance is local.
            </summary>
            <value><c>true</c> if this instance is local; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.ContextItem.ExtendedProperties">
            <summary>
                The extended property collection bound to the context item.
            </summary>
        </member>
        <member name="T:Cedar.Core.ApplicationContexts.ContextItemCollection">
            <summary>
                Define the context item collection which is used for store the context items.
            </summary>
        </member>
        <member name="T:Cedar.Core.ApplicationContexts.ContextLocator">
            <summary>
                Define the context locator.
            </summary>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.ContextLocator.GetContextItem(System.String)">
            <summary>
                Get an existing context item by given key.
            </summary>
            <param name="key">The key of the <see cref="T:Cedar.Core.ApplicationContexts.ContextItem" /> to get.</param>
            <returns>
                The <see cref="T:Cedar.Core.ApplicationContexts.ContextItem" /> object to get.
            </returns>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.ContextLocator.SetContextItem(Cedar.Core.ApplicationContexts.ContextItem)">
            <summary>
                Add a new context item or use the new context item to override the exiting one.
            </summary>
            <param name="contextItem">The new <see cref="T:Cedar.Core.ApplicationContexts.ContextItem" /> to set.</param>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.ContextLocator.GetCurrentContext">
            <summary>
                Get all current context item collection.
            </summary>
            <returns>
                A <see cref="T:Cedar.Core.ApplicationContexts.ContextItemCollection" /> containg all of the current context items.
            </returns>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.ContextLocator.Clear">
            <summary>
                Clear the current context item collection.
            </summary>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.ContextLocator.AttachContext(Cedar.Core.ApplicationContexts.ContextItemCollection,Cedar.Core.ApplicationContexts.ContextAttachBehavior)">
            <summary>
                Attach a new context item collection to the current context.
            </summary>
            <param name="context">The <see cref="T:Cedar.Core.ApplicationContexts.ContextItemCollection" /> to attach.</param>
            <param name="behavior">The <see cref="T:Cedar.Core.ApplicationContexts.ContextAttachBehavior" />.</param>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.ContextLocator.ContextItemExits(System.String)">
            <summary>
                Check if the context item of the given key exists.
            </summary>
            <param name="key">The key of the <see cref="T:Cedar.Core.ApplicationContexts.ContextItem" />.</param>
            <returns>
                true if the <see cref="T:Cedar.Core.ApplicationContexts.ContextItem" /> already exists; otherwise, false.
            </returns>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.ContextLocator.SetContextItemCore(Cedar.Core.ApplicationContexts.ContextItem)">
            <summary>
                Set context item inernally.
            </summary>
            <param name="contextItem">The context item.</param>
        </member>
        <member name="T:Cedar.Core.ApplicationContexts.DependentApplicationContext">
            <summary>
                This class holds context items and thread information cloned from current application context.
            </summary>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.DependentApplicationContext.#ctor(Cedar.Core.ApplicationContexts.ContextItemCollection)">
            <summary>
                Initializes a new instance of the DependentApplicationContext class.
            </summary>
            <param name="items">The collection of context items.</param>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.DependentApplicationContext.Items">
            <summary>
                Gets the collection of context items.
            </summary>
            <value>
                The collection of context items.
            </value>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.DependentApplicationContext.MasterThread">
            <summary>
                Gets the master thread to which the current application is belong.
            </summary>
            <value>
                The master thread to which the current application is belong.
            </value>
        </member>
        <member name="T:Cedar.Core.ApplicationContexts.ExtendedPropertyCollection">
            <summary>
                Define the context item's extended property collection.
            </summary>
        </member>
        <member name="F:Cedar.Core.ApplicationContexts.ExtendedPropertyCollection.innerDictionary">
            <summary>
            </summary>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.ExtendedPropertyCollection.#ctor">
            <summary>
                Initializes a new instance of the ExtendedPropertyCollection class.
            </summary>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.ExtendedPropertyCollection.#ctor(Cedar.Core.ApplicationContexts.ContextItem)">
            <summary>
                Initializes a new instance of the ExtendedPropertyCollection class.
            </summary>
            <param name="contextItem">The context item.</param>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.ExtendedPropertyCollection.ContextItem">
            <summary>
                Gets or sets the context item.
            </summary>
            <value>The context item.</value>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.ExtendedPropertyCollection.Keys">
            <summary>
                Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.ExtendedPropertyCollection.Values">
            <summary>
                Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.ExtendedPropertyCollection.Item(System.String)">
            <summary>
                Gets or sets the <see cref="T:System.Object" /> with the specified key.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.ExtendedPropertyCollection.Count">
            <summary>
                Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.ExtendedPropertyCollection.IsReadOnly">
            <summary>
                Gets a value indicating whether this instance is read only.
            </summary>
            <value>
                <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.ExtendedPropertyCollection.Add(System.String,System.Object)">
            <summary>
                Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.ExtendedPropertyCollection.ContainsKey(System.String)">
            <summary>
                Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
                <c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.ExtendedPropertyCollection.Remove(System.String)">
            <summary>
                Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.ExtendedPropertyCollection.TryGetValue(System.String,System.Object@)">
            <summary>
                Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.ExtendedPropertyCollection.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
                Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.ExtendedPropertyCollection.Clear">
            <summary>
                Clears this instance.
            </summary>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.ExtendedPropertyCollection.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
                Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
                <c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.ExtendedPropertyCollection.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
                Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.ExtendedPropertyCollection.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
                Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.ExtendedPropertyCollection.GetEnumerator">
            <summary>
                Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.ExtendedPropertyCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Cedar.Core.ApplicationContexts.HttpSessionStateContextLocator">
            <summary>
                The concrete <see cref="T:Cedar.Core.ApplicationContexts.ContextLocator" /> which use the
                <see cref="T:System.Web.SessionState.HttpSessionState" /> as the context storage.
            </summary>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.HttpSessionStateContextLocator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Cedar.Core.ApplicationContexts.HttpSessionStateContextLocator" />
                class.
            </summary>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.HttpSessionStateContextLocator.CallContextLocator">
            <summary>
                define the backup locator
            </summary>
        </member>
        <member name="P:Cedar.Core.ApplicationContexts.HttpSessionStateContextLocator.SessionStateAvailabe">
            <summary>
                get the session state's availabe
            </summary>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.HttpSessionStateContextLocator.GetContextItem(System.String)">
            <summary>
                Get an existing context item by given key.
            </summary>
            <param name="key">The key of the <see cref="T:Cedar.Core.ApplicationContexts.ContextItem" /> to get.</param>
            <returns>
                The <see cref="T:Cedar.Core.ApplicationContexts.ContextItem" /> object to get.
            </returns>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.HttpSessionStateContextLocator.SetContextItemCore(Cedar.Core.ApplicationContexts.ContextItem)">
            <summary>
                Add a new context item or use the new context item to override the exiting one.
            </summary>
            <param name="contextItem">The new <see cref="T:Cedar.Core.ApplicationContexts.ContextItem" /> to set.</param>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.HttpSessionStateContextLocator.GetCurrentContext">
            <summary>
                Get all current context item collection.
            </summary>
            <returns>
                A <see cref="T:Cedar.Core.ApplicationContexts.ContextItemCollection" /> containg all of the current context items.
            </returns>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.HttpSessionStateContextLocator.Clear">
            <summary>
                Clear the current context item collection.
            </summary>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.HttpSessionStateContextLocator.ContextItemExits(System.String)">
            <summary>
                Check if the context item of the given key exists.
            </summary>
            <param name="key">The key of the <see cref="T:Cedar.Core.ApplicationContexts.ContextItem" />.</param>
            <returns>
                true if the <see cref="T:Cedar.Core.ApplicationContexts.ContextItem" /> already exists; otherwise, false.
            </returns>
        </member>
        <member name="T:Cedar.Core.ApplicationContexts.IContextLocator">
            <summary>
            </summary>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.IContextLocator.GetContextItem(System.String)">
            <summary>
                Get an existing context item by given key.
            </summary>
            <param name="key">The key of the ContextItem to get.</param>
            <returns>TheContextItem object to get.</returns>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.IContextLocator.SetContextItem(Cedar.Core.ApplicationContexts.ContextItem)">
            <summary>
                Add a new context item or use the new context item to override the exiting one.
            </summary>
            <param name="contextItem">The new ContextItem to set.</param>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.IContextLocator.GetCurrentContext">
            <summary>
                Get all current context item collection.
            </summary>
            <returns>A ContextItemCollection containg all of the current context items.</returns>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.IContextLocator.AttachContext(Cedar.Core.ApplicationContexts.ContextItemCollection,Cedar.Core.ApplicationContexts.ContextAttachBehavior)">
            <summary>
                Attach a new context item collection to the current context.
            </summary>
            <param name="context">The ContextItemCollection to attach.</param>
            <param name="behavior">The ContextAttachBehavior.</param>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.IContextLocator.Clear">
            <summary>
                Clear the current context item collection.
            </summary>
        </member>
        <member name="M:Cedar.Core.ApplicationContexts.IContextLocator.ContextItemExits(System.String)">
            <summary>
                Check if the context item of the given key exists.
            </summary>
            <param name="key">The key of the ContextItem.</param>
            <returns>true if the ContextItem already exists; otherwise, false.</returns>
        </member>
        <member name="T:Cedar.Core.AttributeAccessor">
            <summary>
                This static class is used to get attributes from assemblies, types and type members.
            </summary>
        </member>
        <member name="M:Cedar.Core.AttributeAccessor.GetAttributes(System.Reflection.Assembly,System.Boolean)">
            <summary>
                Gets the attributes applied to the given <see cref="T:System.Reflection.Assembly" />.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns>
                The attributes applied to the given <see cref="T:System.Reflection.Assembly" />
            </returns>
        </member>
        <member name="M:Cedar.Core.AttributeAccessor.GetAttributes(System.Type,System.Boolean)">
            <summary>
                Gets the attributes applied to the given <see cref="T:System.Type" />,
            </summary>
            <param name="type">The type.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns>
                The attributes applied to the given <see cref="T:System.Reflection.MemberInfo" />
            </returns>
        </member>
        <member name="M:Cedar.Core.AttributeAccessor.GetAttributes(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
                Gets the attributes applied to the given <see cref="T:System.Reflection.MemberInfo" />.
            </summary>
            <param name="member">The member.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns>
                The attributes applied to the given <see cref="T:System.Type" />
            </returns>
        </member>
        <member name="M:Cedar.Core.AttributeAccessor.GetAttributes``1(System.Reflection.Assembly,System.Boolean)">
            <summary>
                Gets the attributes applied to the given <see cref="T:System.Reflection.Assembly" />.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="assembly">The assembly.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns>
                The attributes applied to the given <see cref="T:System.Reflection.Assembly" />
            </returns>
        </member>
        <member name="M:Cedar.Core.AttributeAccessor.GetAttributes``1(System.Type,System.Boolean)">
            <summary>
                Gets the attributes applied to the given <see cref="T:System.Type" />,
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="type">The type.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns>
                The attributes applied to the given <see cref="T:System.Reflection.MemberInfo" />
            </returns>
        </member>
        <member name="M:Cedar.Core.AttributeAccessor.GetAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
                Gets the attributes applied to the given <see cref="T:System.Reflection.MemberInfo" />.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="member">The member.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns>
                The attributes applied to the given <see cref="T:System.Type" />
            </returns>
        </member>
        <member name="T:Cedar.Core.ConfigManager">
            <summary>
                The static facade class to manangement configuration.
            </summary>
        </member>
        <member name="P:Cedar.Core.ConfigManager.ConnectionStrings">
            <summary>
                Gets the connection strings settings.
            </summary>
            <value>The connection strings settings.</value>
        </member>
        <member name="M:Cedar.Core.ConfigManager.TryGetConfigurationSection``1(System.String,``0@)">
            <summary>
                Tries the get configuration section.
            </summary>
            <typeparam name="TConfigSection">The type of the config section.</typeparam>
            <param name="configSectionName">Name of the config section.</param>
            <param name="configurationSection">The configuration section.</param>
            <returns>
                A <see cref="T:System.Boolean" /> value indicating whether to successfully get the
                <see cref="T:System.Configuration.ConfigurationSection" />.
            </returns>
        </member>
        <member name="M:Cedar.Core.ConfigManager.TryGetConfigurationSection``1(``0@)">
            <summary>
                Tries the get configuration section.
            </summary>
            <typeparam name="TConfigSection">The type of the config section.</typeparam>
            <param name="configurationSection">The configuration section.</param>
            <returns>
                A <see cref="T:System.Boolean" /> value indicating whether to successfully get the
                <see cref="T:System.Configuration.ConfigurationSection" />.
            </returns>
        </member>
        <member name="M:Cedar.Core.ConfigManager.GetConfigurationSection``1(System.String)">
            <summary>
                Gets the configuration section.
            </summary>
            <typeparam name="TConfigSection">The type of the config section.</typeparam>
            <param name="configSectionName">Name of the config section.</param>
            <returns>The located <see cref="T:System.Configuration.ConfigurationSection" />.</returns>
        </member>
        <member name="M:Cedar.Core.ConfigManager.GetConfigurationSection``1">
            <summary>
                Gets the configuration section.
            </summary>
            <typeparam name="TConfigSection">The type of the config section.</typeparam>
            <returns>The located <see cref="T:System.Configuration.ConfigurationSection" />.</returns>
        </member>
        <member name="T:Cedar.Core.Configuration.AssemblyQualifiedTypeNameConfigurationConverter">
            <summary>
                程序集限制命名配置转化
            </summary>
        </member>
        <member name="M:Cedar.Core.Configuration.AssemblyQualifiedTypeNameConfigurationConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
                Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object" /> to convert.</param>
            <returns>
                An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Cedar.Core.Configuration.AssemblyQualifiedTypeNameConfigurationConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
                Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="culture">
                A <see cref="T:System.Globalization.CultureInfo" />. If null is passed, the current culture is
                assumed.
            </param>
            <param name="value">The <see cref="T:System.Object" /> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type" /> to convert the <paramref name="value" /> parameter to.</param>
            <returns>
                An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
        </member>
        <member name="T:Cedar.Core.Configuration.ConfigurationElementAttribute">
            <summary>
                配置元素属性
            </summary>
        </member>
        <member name="M:Cedar.Core.Configuration.ConfigurationElementAttribute.#ctor(System.Type)">
            <summary>
                初始化一个新的实例配置元素类型
            </summary>
            <param name="configurationElementType">配置元素类型</param>
        </member>
        <member name="P:Cedar.Core.Configuration.ConfigurationElementAttribute.ConfigurationElementType">
            <summary>
                获取配元素类型
            </summary>
        </member>
        <member name="T:Cedar.Core.Configuration.ConfigurationElementCollection`1">
            <summary>
                默认的元素集合,以Key值作为键值的配置元素的元素集合
            </summary>
            <typeparam name="T">类型为KeyedConfigurationElement</typeparam>
        </member>
        <member name="M:Cedar.Core.Configuration.ConfigurationElementCollection`1.CreateNewElement">
            <summary>
                根据泛型KeyedConfigurationElement的T创建实例
            </summary>
            <returns>KeyedConfigurationElement</returns>
        </member>
        <member name="M:Cedar.Core.Configuration.ConfigurationElementCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
                获取元素KeyedConfigurationElement键值
            </summary>
            <param name="element">KeyedConfigurationElement</param>
            <returns>KeyedConfigurationElement.Key</returns>
        </member>
        <member name="T:Cedar.Core.Configuration.ConfigurationSectionNameAttribute">
            <summary>
                配置元素Section属性
            </summary>
        </member>
        <member name="M:Cedar.Core.Configuration.ConfigurationSectionNameAttribute.#ctor(System.String)">
            <summary>
            </summary>
            <param name="sectionName"></param>
        </member>
        <member name="P:Cedar.Core.Configuration.ConfigurationSectionNameAttribute.SectionName">
            <summary>
                Gets the name of the configuration section.
            </summary>
            <value>
                The name of the configuration section.
            </value>
        </member>
        <member name="T:Cedar.Core.Configuration.KeyedConfigurationElement">
            <summary>
                微软默认的配置元素,以Key值作为键值的配置元素,Key值规则可重写
            </summary>
        </member>
        <member name="P:Cedar.Core.Configuration.KeyedConfigurationElement.key">
            <summary>
                Gets the key.
            </summary>
            <value>
                The key.
            </value>
        </member>
        <member name="T:Cedar.Core.Configuration.NamedConfigurationElement">
            <summary>
                以Name为键值命名的配置元素
            </summary>
        </member>
        <member name="F:Cedar.Core.Configuration.NamedConfigurationElement.NamePropertyName">
            <summary>
                The name property name
            </summary>
        </member>
        <member name="P:Cedar.Core.Configuration.NamedConfigurationElement.Name">
            <summary>
                Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Cedar.Core.Configuration.NamedElementCollection`1">
            <summary>
                以Name值作为键值的配置元素的元素集合
            </summary>
            <typeparam name="T">NamedConfigurationElement</typeparam>
        </member>
        <member name="M:Cedar.Core.Configuration.NamedElementCollection`1.CreateNewElement">
            <summary>
                根据泛型NamedConfigurationElement的T创建实例
            </summary>
            <returns>NamedConfigurationElement</returns>
        </member>
        <member name="M:Cedar.Core.Configuration.NamedElementCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
                获取元素NamedConfigurationElement键值
            </summary>
            <param name="element">NamedConfigurationElement</param>
            <returns>NamedConfigurationElement.Name</returns>
        </member>
        <member name="M:Cedar.Core.Configuration.NamedElementCollection`1.Get(System.Int32)">
            <summary>
                通过Index获取NamedConfigurationElement
            </summary>
            <param name="index"></param>
            <returns>NamedConfigurationElement</returns>
        </member>
        <member name="M:Cedar.Core.Configuration.NamedElementCollection`1.Get(System.String)">
            <summary>
                通过name获取NamedConfigurationElement
            </summary>
            <param name="name"></param>
            <returns>NamedConfigurationElement</returns>
        </member>
        <member name="T:Cedar.Core.Configuration.NameTypeConfigurationElement">
            <summary>
                以Name和Type为键值对的配置元素
            </summary>
        </member>
        <member name="P:Cedar.Core.Configuration.NameTypeConfigurationElement.Name">
            <summary>
                Gets or sets the name.
            </summary>
            <value>
                The name.
            </value>
        </member>
        <member name="P:Cedar.Core.Configuration.NameTypeConfigurationElement.Type">
            <summary>
                Gets or sets the type.
            </summary>
            <value>
                The type.
            </value>
        </member>
        <member name="M:Cedar.Core.Configuration.NameTypeConfigurationElement.Deserialize(System.Xml.XmlReader)">
            <summary>
                Deserializes the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="T:Cedar.Core.Configuration.NameTypeConfigurationElementCollection`1">
            <summary>
                以Name和Type值作为键值的配置元素的元素集合
            </summary>
            <typeparam name="T">NameTypeConfigurationElement</typeparam>
        </member>
        <member name="M:Cedar.Core.Configuration.NameTypeConfigurationElementCollection`1.CreateNewElement">
            <summary>
                根据泛型NameTypeConfigurationElement的T创建实例
            </summary>
            <returns>NameTypeConfigurationElement</returns>
        </member>
        <member name="M:Cedar.Core.Configuration.NameTypeConfigurationElementCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
                获取元素NameTypeConfigurationElement键值
            </summary>
            <param name="element">NameTypeConfigurationElement</param>
            <returns>NameTypeConfigurationElement.Name</returns>
        </member>
        <member name="M:Cedar.Core.Configuration.NameTypeConfigurationElementCollection`1.GetConfigurationElementType(System.Xml.XmlReader)">
            <summary>
                获取配置元素中的type值
            </summary>
            <param name="reader">The reader.</param>
            <returns>NameTypeConfigurationElement.Type</returns>
        </member>
        <member name="M:Cedar.Core.Configuration.NameTypeConfigurationElementCollection`1.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>
                反序列化无法认识的元素
            </summary>
            <param name="elementName"></param>
            <param name="reader"></param>
            <returns>
                true 如果反序列化成功; 否则, false. 默认是false.
            </returns>
        </member>
        <member name="M:Cedar.Core.Configuration.NameTypeConfigurationElementCollection`1.GetConfigurationElement(System.String)">
            <summary>
                通过name获取NameTypeConfigurationElement
            </summary>
            <param name="name"></param>
            <returns>NameTypeConfigurationElement</returns>
        </member>
        <member name="T:Cedar.Core.Configuration.ProviderDataBase`1">
            <summary>
                Provider based configuraiton element classes should be derived from this class.
            </summary>
            <typeparam name="TProvider">The type of the provider.</typeparam>
        </member>
        <member name="P:Cedar.Core.Configuration.ProviderDataBase`1.Lifetime">
            <summary>
                Gets the lifetime.
            </summary>
            <value>
                The lifetime.
            </value>
        </member>
        <member name="M:Cedar.Core.Configuration.ProviderDataBase`1.GetProviderCreator(Cedar.Core.Configuration.ServiceLocatableSettings)">
            <summary>
                Get the delegate to create provider instance.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The delegate to create provider instance.</returns>
        </member>
        <member name="T:Cedar.Core.Configuration.ServiceLocatableSettings">
            <summary>
                All of concrete <see cref="T:System.Configuration.ConfigurationSection" /> classes in which the service locaor can
                be specified should be derived from this class.
            </summary>
        </member>
        <member name="M:Cedar.Core.Configuration.ServiceLocatableSettings.Configure(Cedar.Core.IoC.IServiceLocator)">
            <summary>
                Configures the specified service locator.
            </summary>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="T:Cedar.Core.Data.Database">
            <summary>
                A abstract database which is used to perform basic data access operation.
            </summary>
        </member>
        <member name="P:Cedar.Core.Data.Database.DatabaseName">
            <summary>
                Gets the name of the database.
            </summary>
            <value>
                The name of the database.
            </value>
        </member>
        <member name="M:Cedar.Core.Data.Database.CreateConnection">
            <summary>
                Gets the database provider factory.
            </summary>
            <value>
                The database provider factory.
            </value>
            <summary>
                Creates the connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cedar.Core.Data.Database.Execute(System.String,System.Object,System.Data.Common.DbTransaction,System.Data.CommandType)">
            <summary>
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Cedar.Core.Data.Database.Query(System.String,System.Object,System.Data.CommandType)">
            <summary>
            </summary>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Cedar.Core.Data.Database.Query``1(System.String,System.Object,System.Data.Common.DbTransaction,System.Data.CommandType)">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="T:Cedar.Core.Data.DatabaseFactories">
            <summary>
                The factory to create <see cref="T:Cedar.Core.Data.Database" /> by the specified connection string name.
            </summary>
        </member>
        <member name="M:Cedar.Core.Data.DatabaseFactories.GetDatabase(System.String)">
            <summary>
                Gets the database.
            </summary>
            <param name="databaseName">Name of the connection string.</param>
            <returns>The <see cref="T:Cedar.Core.Data.Database" />.</returns>
        </member>
        <member name="M:Cedar.Core.Data.DatabaseFactories.GetDatabase">
            <summary>
                Gets the database.
            </summary>
            <returns>The <see cref="T:Cedar.Core.Data.Database" />.</returns>
        </member>
        <member name="T:Cedar.Core.Data.IDatabaseFactory">
            <summary>
                All database factory classes must implement this interface.
            </summary>
        </member>
        <member name="M:Cedar.Core.Data.IDatabaseFactory.GetDatabase(System.String)">
            <summary>
                Gets the database.
            </summary>
            <param name="databaseName">Name of the connection string.</param>
            <returns>The <see cref="T:Cedar.Core.Data.Database" />.</returns>
        </member>
        <member name="M:Cedar.Core.Data.IDatabaseFactory.GetDatabase">
            <summary>
                Gets the database.
            </summary>
            <returns>The <see cref="T:Cedar.Core.Data.Database" />.</returns>
        </member>
        <member name="T:Cedar.Core.Data.IParameterCache">
            <summary>
                All parameter cache classes must implement this interface.
            </summary>
        </member>
        <member name="M:Cedar.Core.Data.IParameterCache.SetParameters(System.Data.Common.DbCommand,Cedar.Core.Data.Database)">
            <summary>
                Sets the parameters.
            </summary>
            <param name="command">The command.</param>
            <param name="database">The <see cref="T:Cedar.Core.Data.Database" />.</param>
        </member>
        <member name="T:Cedar.Core.Data.UpdateBehavior">
            <summary>
                Update Behavior
            </summary>
        </member>
        <member name="F:Cedar.Core.Data.UpdateBehavior.Standard">
            <summary>
                The standard
            </summary>
        </member>
        <member name="F:Cedar.Core.Data.UpdateBehavior.Continue">
            <summary>
                The continue
            </summary>
        </member>
        <member name="F:Cedar.Core.Data.UpdateBehavior.Transactional">
            <summary>
                The transactional
            </summary>
        </member>
        <member name="T:Cedar.Core.IoC.ServiceLocatableDictionary`1">
            <summary>
                A dictionary of object can be activated by service locator.
            </summary>
            <typeparam name="T">The type of element's value.</typeparam>
        </member>
        <member name="M:Cedar.Core.IoC.ServiceLocatableDictionary`1.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Cedar.Core.IoC.ServiceLocatableDictionary`1" /> class.
            </summary>
            <param name="serviceLocatorName">Name of the service locator.</param>
        </member>
        <member name="P:Cedar.Core.IoC.ServiceLocatableDictionary`1.ServiceLocator">
            <summary>
                Gets the service locator.
            </summary>
            <value>
                The service locator.
            </value>
        </member>
        <member name="P:Cedar.Core.IoC.ServiceLocatableDictionary`1.Keys">
            <summary>
                Gets the keys.
            </summary>
            <value>
                The keys.
            </value>
        </member>
        <member name="P:Cedar.Core.IoC.ServiceLocatableDictionary`1.Values">
            <summary>
                Gets the values.
            </summary>
            <value>
                The values.
            </value>
        </member>
        <member name="P:Cedar.Core.IoC.ServiceLocatableDictionary`1.Item(System.String)">
            <summary>
                Gets the object with the specified key.
            </summary>
            <value>
                The value.
            </value>
            <param name="key">The key.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Cedar.Core.IoC.Assemblies">
            <summary>
            </summary>
        </member>
        <member name="M:Cedar.Core.IoC.Assemblies.GetAssembliesCore">
            <summary>
                获取核心集合
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cedar.Core.IoC.Configuration.AssemblyConfigurationElement">
            <summary>
                The configuration element to configure assembly name or path.
            </summary>
        </member>
        <member name="P:Cedar.Core.IoC.Configuration.AssemblyConfigurationElement.Assembly">
            <summary>
                Gets or sets the assembly.
            </summary>
            <value>
                The assembly.
            </value>
        </member>
        <member name="P:Cedar.Core.IoC.Configuration.AssemblyConfigurationElement.key">
            <summary>
                Gets the key.
            </summary>
            <value>
                The key.
            </value>
        </member>
        <member name="T:Cedar.Core.IoC.Configuration.ServiceLocationSettings">
            <summary>
                The configuration setting for "cedar.serviceLocation".
            </summary>
        </member>
        <member name="P:Cedar.Core.IoC.Configuration.ServiceLocationSettings.DefaultServiceLocator">
            <summary>
                Gets the default service locator.
            </summary>
            <value>
                The default service locator.
            </value>
        </member>
        <member name="P:Cedar.Core.IoC.Configuration.ServiceLocationSettings.ServiceLocators">
            <summary>
                Gets the service locators.
            </summary>
            <value>
                The service locators.
            </value>
        </member>
        <member name="P:Cedar.Core.IoC.Configuration.ServiceLocationSettings.ResolvedAssemblies">
            <summary>
                Gets or sets the resolved assemblies.
            </summary>
            <value>
                The resolved assemblies.
            </value>
        </member>
        <member name="M:Cedar.Core.IoC.Configuration.ServiceLocationSettings.GetServiceLocator(System.String)">
            <summary>
                Gets the service locator.
            </summary>
            <param name="name">The name.</param>
            <returns>The service locator.</returns>
        </member>
        <member name="T:Cedar.Core.IoC.Configuration.ServiceLocatorDataBase">
            <summary>
                提供创建ServiceLocator的配置基类
            </summary>
        </member>
        <member name="M:Cedar.Core.IoC.Configuration.ServiceLocatorDataBase.CreateServiceLocator">
            <summary>
                Creates the service locator.
            </summary>
            <returns>The created service locator.</returns>
        </member>
        <member name="T:Cedar.Core.IoC.DefaultAssemblyResolver">
            <summary>
            </summary>
        </member>
        <member name="P:Cedar.Core.IoC.DefaultAssemblyResolver.Assemblies">
            <summary>
            </summary>
        </member>
        <member name="M:Cedar.Core.IoC.DefaultAssemblyResolver.GetAssemblies">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cedar.Core.IoC.IAssemblyResolver">
            <summary>
            </summary>
        </member>
        <member name="T:Cedar.Core.IoC.IServiceLocatableObject">
            <summary>
                Mark the class canbe locatable
            </summary>
        </member>
        <member name="P:Cedar.Core.IoC.IServiceLocatableObject.ServiceLocator">
            <summary>
                Gets the service locator.
            </summary>
            <value>The service locator.</value>
        </member>
        <member name="T:Cedar.Core.IoC.IServiceLocator">
            <summary>
                All of service locator classes must implement this interface.
            </summary>
        </member>
        <member name="M:Cedar.Core.IoC.IServiceLocator.GetService(System.Type,System.String)">
            <summary>
                Gets the service based on the specified registered type and optional registration name.
            </summary>
            <param name="registeredType">The service type registered.</param>
            <param name="name">The service type registration name.</param>
            <returns>The service instance activated.</returns>
        </member>
        <member name="M:Cedar.Core.IoC.IServiceLocator.GetAllServices(System.Type)">
            <summary>
                Gets all services based on the specified registered type.
            </summary>
            <param name="registeredType">The service type registered.</param>
            <returns>The list of acticated service instances.</returns>
        </member>
        <member name="M:Cedar.Core.IoC.IServiceLocator.GetAllKeys(System.Type)">
            <summary>
                Gets all keys (service type registrtion name) for the specified registered type.
            </summary>
            <param name="registeredType">The service type registered.</param>
            <returns>The key list.</returns>
        </member>
        <member name="M:Cedar.Core.IoC.IServiceLocator.IsRegistered(System.Type)">
            <summary>
                Determines whether the specified registered type is registered.
            </summary>
            <param name="registeredType">The service type registered.</param>
            <returns>
                <c>true</c> if the specified registered type is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cedar.Core.IoC.IServiceLocator.IsRegistered(System.Type,System.Type)">
            <summary>
                Determines whether the specified registered type is registered.
            </summary>
            <param name="registeredType">The service type registered.</param>
            <param name="mappedToType">The concrete type to which the registered type is mapped.</param>
            <returns>
                <c>true</c> if the specified registered type is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cedar.Core.IoC.IServiceLocator.Register(System.Type,System.Type,System.String,System.Boolean,Cedar.Core.IoC.Lifetime)">
            <summary>
                Perform service type registration.
            </summary>
            <param name="registeredType">The service type registered.</param>
            <param name="mappedToType">The concrete type to which the registered type is mapped.</param>
            <param name="name">The service type registration name.</param>
            <param name="isDefault">if set to <c>true</c> [is default].</param>
            <param name="lifetime">The lifetime.</param>
        </member>
        <member name="M:Cedar.Core.IoC.IServiceLocator.GetService``1(System.String)">
            <summary>
                Gets the service based on the specified registered type and optional registration name.
            </summary>
            <typeparam name="T">The service type registered.</typeparam>
            <param name="name">The service type registration name.</param>
            <returns>The service instance activated.</returns>
        </member>
        <member name="M:Cedar.Core.IoC.IServiceLocator.GetAllServices``1">
            <summary>
                Gets all services based on the specified registered type.
            </summary>
            <typeparam name="T">The service type registered.</typeparam>
            <returns>The list of activated service instance.</returns>
        </member>
        <member name="M:Cedar.Core.IoC.IServiceLocator.GetAllKeys``1">
            <summary>
                Gets all keys.
            </summary>
            Gets all keys (service type registrtion name) for the specified registered type.
            <returns>The key list.</returns>
        </member>
        <member name="M:Cedar.Core.IoC.IServiceLocator.IsRegistered``1">
            <summary>
                Determines whether this instance is registered.
            </summary>
            <typeparam name="T">The service type registered.</typeparam>
            <returns>
                <c>true</c> if this instance is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cedar.Core.IoC.IServiceLocator.Register``1(System.Func{``0},System.String,System.Boolean,Cedar.Core.IoC.Lifetime)">
            <summary>
                Perform service type registration.
            </summary>
            <typeparam name="T">The service type registered.</typeparam>
            <param name="creator">The delegate to create the service instance.</param>
            <param name="name">The service type registration name.</param>
            <param name="isDefault">A bool value indicating whether it is a default service registration.</param>
            <param name="lifetime">The lifetime.</param>
        </member>
        <member name="M:Cedar.Core.IoC.IServiceLocator.Register``2(System.String,System.Boolean,Cedar.Core.IoC.Lifetime)">
            <summary>
                Perform service type registration.
            </summary>
            <typeparam name="TFrom">The service type registered.</typeparam>
            <typeparam name="TTo">The concrete type to which the registered type is mapped.</typeparam>
            <param name="name">The service type registration name.</param>
            <param name="isDefault">if set to <c>true</c> [is default].</param>
            <param name="lifetime">The lifetime.</param>
        </member>
        <member name="T:Cedar.Core.IoC.IServiceLocatorConfigurator">
            <summary>
                All of service locator configurator classes must implement this interface.
            </summary>
        </member>
        <member name="M:Cedar.Core.IoC.IServiceLocatorConfigurator.Configure(Cedar.Core.IoC.IServiceLocator)">
            <summary>
                Configures the specified service locator.
            </summary>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="T:Cedar.Core.IoC.Lifetime">
            <summary>
                Control the lifetime of acticated service instance.
            </summary>
        </member>
        <member name="F:Cedar.Core.IoC.Lifetime.Singleton">
            <summary>
                The singleton service instance is got activated for each service activation attempts.
            </summary>
        </member>
        <member name="F:Cedar.Core.IoC.Lifetime.Transient">
            <summary>
                Always create a new service instance for each service activation attempts.
            </summary>
        </member>
        <member name="T:Cedar.Core.IoC.MapToAttribute">
            <summary>
                This attribute is used to build mapping between service interface and implementation type.
            </summary>
        </member>
        <member name="M:Cedar.Core.IoC.MapToAttribute.#ctor(System.Type,System.Int32)">
            <summary>
            </summary>
            <param name="registeredType"></param>
            <param name="quality"></param>
        </member>
        <member name="P:Cedar.Core.IoC.MapToAttribute.RegisteredType">
            <summary>
                Gets service interface type.
            </summary>
            <value>
                The service interface type.
            </value>
        </member>
        <member name="P:Cedar.Core.IoC.MapToAttribute.Lifetime">
            <summary>
                Gets or sets the lifetime.
            </summary>
            <value>
                The lifetime.
            </value>
        </member>
        <member name="P:Cedar.Core.IoC.MapToAttribute.Quality">
            <summary>
                Gets the mapping quality.
            </summary>
            <value>
                The mapping quality.
            </value>
        </member>
        <member name="T:Cedar.Core.IoC.ReflectedServiceLocatorConfigurator">
            <summary>
                反射serviceLocator配置者
            </summary>
        </member>
        <member name="M:Cedar.Core.IoC.ReflectedServiceLocatorConfigurator.#ctor(Cedar.Core.IoC.IAssemblyResolver)">
            <summary>
                构造函数，获取可Resolver的集合
            </summary>
            <param name="assemblyResolver"></param>
        </member>
        <member name="P:Cedar.Core.IoC.ReflectedServiceLocatorConfigurator.AssemblyResolver">
            <summary>
            </summary>
        </member>
        <member name="M:Cedar.Core.IoC.ReflectedServiceLocatorConfigurator.Configure(Cedar.Core.IoC.IServiceLocator)">
            <summary>
                对serviceLocator进行配置服务
            </summary>
            <param name="serviceLocator"></param>
        </member>
        <member name="M:Cedar.Core.IoC.ReflectedServiceLocatorConfigurator.GetMapToAttributes">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cedar.Core.IoC.ReflectedServiceLocatorConfigurator.CreateInstance``1(System.Object[])">
            <summary>
                通过属性映射创建实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Cedar.Core.IoC.ResolutionException">
            <summary>
                Exception which is thrown when type resolution fails.
            </summary>
        </member>
        <member name="M:Cedar.Core.IoC.ResolutionException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Cedar.Core.IoC.ResolutionException.#ctor(System.String)">
            <summary>
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Cedar.Core.IoC.ResolutionException.#ctor(System.String,System.Exception)">
            <summary>
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Cedar.Core.IoC.ResolutionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Cedar.Core.IoC.ServiceLocatorFactory">
            <summary>
                This is the factory to create or get service locator.
            </summary>
        </member>
        <member name="M:Cedar.Core.IoC.ServiceLocatorFactory.#cctor">
            <summary>
            </summary>
        </member>
        <member name="P:Cedar.Core.IoC.ServiceLocatorFactory.Configurators">
            <summary>
                Gets the configurators.
            </summary>
            <value>
                The configurators.
            </value>
        </member>
        <member name="M:Cedar.Core.IoC.ServiceLocatorFactory.GetServiceLocator(System.String)">
            <summary>
                Gets the service locator.
            </summary>
            <param name="name">The name.</param>
            <returns>The service locator.</returns>
        </member>
        <member name="M:Cedar.Core.IoC.ServiceLocatorFactory.AddResovledAssemblies(System.Reflection.Assembly[])">
            <summary>
                Adds the resovled assemblies.
            </summary>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:Cedar.Core.IoC.ServiceLocatorFactory.Reset">
            <summary>
                Clear all cached service locators.
            </summary>
        </member>
        <member name="T:Cedar.Core.IoC.Settings">
            <summary>
            </summary>
        </member>
        <member name="P:Cedar.Core.IoC.Settings.SectionNames">
            <summary>
            </summary>
        </member>
        <member name="T:Cedar.Core.Logging.ComponentTypeAttribute">
             <summary>
            
             </summary>
        </member>
        <member name="P:Cedar.Core.Logging.ComponentTypeAttribute.ComponentType">
            <summary>
            The component type.
            </summary>
        </member>
        <member name="M:Cedar.Core.Logging.ComponentTypeAttribute.#ctor(System.String)">
            <summary>
            The contructor of ComponentTypeAttribute
            </summary>
            <param name="componentType"></param>
        </member>
        <member name="T:Cedar.Core.Logging.ILogger">
            <summary>
            Manages logging.
            </summary>
            <remarks>
            This is a facade for the different logging subsystems.
            It offers a simplified interface that follows Ioc patterns
            and a simplified priority/level/severity abstraction. 
            </remarks>
        </member>
        <member name="M:Cedar.Core.Logging.ILogger.Write(System.Object,System.Diagnostics.TraceEventType,System.Exception)">
            <summary>
            Logs message.
            </summary>
            <param name="message">The message to log</param>
            <param name="severity">The message severity</param>
            <param name="exception">The message exception</param>
        </member>
        <member name="T:Cedar.Core.Logging.ILoggerFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Cedar.Core.Logging.ILoggerFactory.Create">
            <summary>
            Creates a new logger.
            </summary>
        </member>
        <member name="T:Cedar.Core.Logging.LoggerFactories">
            <summary>
            
            </summary>
        </member>
        <member name="M:Cedar.Core.Logging.LoggerFactories.CreateLogger">
            <summary>
            Gets the ILogger.
            </summary>
            <returns>The <see cref="T:Cedar.Core.Logging.ILogger" />.</returns>
        </member>
        <member name="T:Cedar.Core.Logging.IMessageLogEntry">
            <summary>
            The logging interface for MessageEntry 
            </summary>
        </member>
        <member name="P:Cedar.Core.Logging.IMessageLogEntry.TraceEventType">
            <summary>
            Gets the type of the trace event.
            </summary>
            <value>
            The type of the trace event.
            </value>
        </member>
        <member name="T:Cedar.Core.Logging.IMessageLogEntry0">
            <summary>
            The logging interface for MessageEntry0
            </summary>
        </member>
        <member name="M:Cedar.Core.Logging.IMessageLogEntry0.Format">
            <summary>
            Formats this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cedar.Core.Logging.IMessageLogEntry1">
            <summary>
            The logging interface for MessageEntry1
            </summary>
        </member>
        <member name="M:Cedar.Core.Logging.IMessageLogEntry1.Format(System.Object)">
            <summary>
            Formats the specified argument.
            </summary>
            <param name="arg">The argument.</param>
            <returns></returns>
        </member>
        <member name="T:Cedar.Core.Logging.IMessageLogEntry2">
            <summary>
            The logging interface for MessageEntry2
            </summary>
        </member>
        <member name="M:Cedar.Core.Logging.IMessageLogEntry2.Format(System.Object,System.Object)">
            <summary>
            Formats the specified arg1.
            </summary>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <returns></returns>
        </member>
        <member name="T:Cedar.Core.Logging.IMessageLogEntry3">
            <summary>
            The logging interface for MessageEntry3
            </summary>
        </member>
        <member name="M:Cedar.Core.Logging.IMessageLogEntry3.Format(System.Object,System.Object,System.Object)">
            <summary>
            Formats the specified arg1.
            </summary>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="arg3">The arg3.</param>
            <returns></returns>
        </member>
        <member name="T:Cedar.Core.Logging.IMessageLogEntryN">
            <summary>
            The logging interface for MessageEntryN
            </summary>
        </member>
        <member name="M:Cedar.Core.Logging.IMessageLogEntryN.Format(System.Object[])">
            <summary>
            Formats the specified arguments.
            </summary>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="T:Cedar.Core.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ApplicationNameNotExists">
            <summary>
              Looks up a localized string similar to  The application did not exist..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.CompressedMessageSizeCounterHelpResource">
            <summary>
              Looks up a localized string similar to  The total size of compressed message..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.CompressionElapsedTimeCounterHelpResource">
            <summary>
              Looks up a localized string similar to  The compression duration..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ConcurrentUpdated">
            <summary>
              Looks up a localized string similar to  The record has been updated by others..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ConfiguraitonElementNotExists">
            <summary>
              Looks up a localized string similar to  The configuration element whose name is &quot;{0}&quot; does not exist..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.CounterCategoryHelpResourceName">
            <summary>
              Looks up a localized string similar to  The performance counters for iConnect.Core..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionAppContextSettingsNotExists">
            <summary>
              Looks up a localized string similar to  Cannot locate the &quot;{0}&quot; configuration section..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionArgumentMustNotBeEmpty">
            <summary>
              Looks up a localized string similar to  The provided string argument must not be empty..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionCannotChangeReadonlyContextItem">
            <summary>
              Looks up a localized string similar to  Cannot change or override the readonly ContextItem..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionCannotLocateReadableProperty">
            <summary>
              Looks up a localized string similar to  Cannot not find a readable &quot;{0}&quot; property for the type &quot;{1}&quot;.
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionCannotLocateWriterableProperty">
            <summary>
              Looks up a localized string similar to  Cannot not find a writable &quot;{0}&quot; property for the type &quot;{1}&quot;.
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionCannotModifyReadonlyProperties">
            <summary>
              Looks up a localized string similar to  Cannot modify the extended properties of the readonly ContextItem..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionCannotModifyReadonlyValue">
            <summary>
              Looks up a localized string similar to  Cannot modify the value of the readonly ContextItem..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionCannotResolveTypeName">
            <summary>
              Looks up a localized string similar to  Cannot resolve the assembly qualified type name &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionConfigurationLoadFileNotFound">
            <summary>
              Looks up a localized string similar to  ExceptionConfigurationLoadFileNotFound=The configuration file {0} could not be found..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionConfigurationSectionNameAttributeNotExists">
            <summary>
              Looks up a localized string similar to  The configuraiton section name is not specified by decorating the type &quot;{0}&quot; with a ConfigurationSectionNameAttribute..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionContextCannotBeSerialized">
            <summary>
              Looks up a localized string similar to  One or more current ContextItem cannot be serialized..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionCultureNotExists">
            <summary>
              Looks up a localized string similar to  The entry with the culture &quot;{0}&quot; does not exist..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionCustomMessageCompressorNotExists">
            <summary>
              Looks up a localized string similar to  You must specify the configuraton name of custom MessageCompressor when you select Custom MessageCompressor..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionDataPropertyDuplicateName">
            <summary>
              Looks up a localized string similar to  The same property name &quot;{0}&quot; is configurated in the entity..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionDefaultServiceLocatorNotExists">
            <summary>
              Looks up a localized string similar to  The default service locator cannot be activated..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionDepedentFileNameNotInitialized">
            <summary>
              Looks up a localized string similar to  The DefaultCacheStore&apos;s expiration mode is specified &quot;FileDepedency&quot;, but the &quot;DependentFileName&quot; is not specified..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionDuplicateCulture">
            <summary>
              Looks up a localized string similar to  The entry with the culture &quot;{0}&quot; exists..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionDuplicateNeutralEntry">
            <summary>
              Looks up a localized string similar to  There must be only one culture neutral entry..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionEmptyArrayOrList">
            <summary>
              Looks up a localized string similar to  The given list or array cannot be null or empty..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionEntryAddedIntoAnotherSet">
            <summary>
              Looks up a localized string similar to  The given entry has been added into another set..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionEntryAddedIntoSet">
            <summary>
              Looks up a localized string similar to  The given entry has been added into the set..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionEntryNotAddedIntoSet">
            <summary>
              Looks up a localized string similar to  The given entry is not added into the set..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionExpiredTimeNotValidTimeSpan">
            <summary>
              Looks up a localized string similar to  The specified expired time can not be parsed as a valid TimeSpan..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionInvalidBackupLocator">
            <summary>
              Looks up a localized string similar to  The backup ContextLocator must not be &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionInvalidCast">
            <summary>
              Looks up a localized string similar to  Invalid cast from type &quot;{0}&quot; to type &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionInvalidCultureName">
            <summary>
              Looks up a localized string similar to  Culture name &quot;{0}&quot; is invalid..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionInvalidDatabaseName">
            <summary>
              Looks up a localized string similar to  Cannot locate the database of &quot;{0}&quot; for the configuration..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionInvalidExtendedFormatArguments">
            <summary>
              Looks up a localized string similar to  The format length is invalid..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionInvalidPageIndex">
            <summary>
              Looks up a localized string similar to  The valid page index must be a positive integer..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionInvalidPageSize">
            <summary>
              Looks up a localized string similar to  The valid page size must be a positive integer..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionInvalidThreadToCreateContextScope">
            <summary>
              Looks up a localized string similar to  The ApplicationContextScope cannot be created in the same thread in which the context items are cloned..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionInvalidTypeAssemblyQualifiedName">
            <summary>
              Looks up a localized string similar to  Cannot load the type &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionLocalizationFailed">
            <summary>
              Looks up a localized string similar to  Cannot retrieve property &apos;{0}&apos; because localization failed.  Type &apos;{1}&apos; is not public or does not contain a public static string property with the name &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionMessageEntryNotExists">
            <summary>
              Looks up a localized string similar to  The message entry &quot;{0}&quot; cannot be found from the category &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionMethodMustBeImplementedBySubclasses">
            <summary>
              Looks up a localized string similar to  The method just be only implemented in sub classes..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionMissingConfigSection">
            <summary>
              Looks up a localized string similar to  Cannot locate the configuration section of &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionMissingConfigurationElementTypeAttribute">
            <summary>
              Looks up a localized string similar to  The configuration element type is not mapped to the type &quot;{0}&quot; by applying ConfigurationElementTypeAttribute..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionMustContainInterceptionExtension">
            <summary>
              Looks up a localized string similar to  Container does not have the interception extension..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionNeutralEntryNotExists">
            <summary>
              Looks up a localized string similar to  There is no culture neutral entry..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionNotApplyConfigurationElementAttribute">
            <summary>
              Looks up a localized string similar to  The configuration element type is not specified by the ConfigurationElementAttribute applied to the type &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionNotAssignableFrom">
            <summary>
              Looks up a localized string similar to  The PropertyAccessor&apos;s type cannot be assignable fromThe given object&apos;s type..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionNotDeployComponent">
            <summary>
              Looks up a localized string similar to  No &quot;{0}&quot; can be resolved from deployed assemblies..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionNotEventHandler">
            <summary>
              Looks up a localized string similar to  The delegate {0} is not a valid event handler..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionNotSoapMessage">
            <summary>
              Looks up a localized string similar to  The CompressionEndpointBehavice can only be applied SOAP based endpoint ..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionNotSpeciifedConfigSection">
            <summary>
              Looks up a localized string similar to  The  type of the configuration section of &quot;{0}&quot; is not &quot;1&quot;..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionPropertyNotExists">
            <summary>
              Looks up a localized string similar to  The property &quot;{0}&quot; is not defined in the type &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionPropertyNotReadable">
            <summary>
              Looks up a localized string similar to  The property &quot;{0}&quot; of the type &quot;{1}&quot; is not readable..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionPropertyNotWritable">
            <summary>
              Looks up a localized string similar to  The property &quot;{0}&quot; of the type &quot;{1}&quot; is not writable..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionRangeDay">
            <summary>
              Looks up a localized string similar to  Day of Week in Extended Format out of range..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionRangeHour">
            <summary>
              Looks up a localized string similar to  Hour in Extended Format out of range..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionRangeMinute">
            <summary>
              Looks up a localized string similar to  Minutes in Extended Format out of range..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionRangeMonth">
            <summary>
              Looks up a localized string similar to  Month of Year in Extended Format out of range..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionSequenceNoElement">
            <summary>
              Looks up a localized string similar to  There is no element in the sequence..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionServiceLocatorNotExists">
            <summary>
              Looks up a localized string similar to  The service locator &quot;{0}&quot; is not configured..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionSettingsNotExists">
            <summary>
              Looks up a localized string similar to  The configuration section &quot;{0}&quot; does not exist..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionSettingSourceNotExists">
            <summary>
              Looks up a localized string similar to  The setting source &quot;{0}&quot; is not configured..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionTransformContextNotInitialized">
            <summary>
              Looks up a localized string similar to  TransformContext is not initialized..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionTransientCallInterceptOnlyForNonGenericInterface">
            <summary>
              Looks up a localized string similar to  Transient call interception can only be used for non-generic interface..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionTranslationEntryNotExists">
            <summary>
              Looks up a localized string similar to  The message entry &quot;{0}&quot; (culture=&quot;{1}&quot;) cannot be found from the category &quot;{2}&quot;..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionTypeForCustomServiceLocatorMustDeriveFrom">
            <summary>
              Looks up a localized string similar to  The Custom Service Locator &apos;{0}&apos; with Type &apos;{1}&apos; must derive from IServiceLocator..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionTypeHasNoContructor">
            <summary>
              Looks up a localized string similar to  The type &quot;{0}&quot; does not have default construtor..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionTypeofContextCannotBeNull">
            <summary>
              Looks up a localized string similar to  The Type of the service location context cannot be be..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionTypesAreNotAssignable">
            <summary>
              Looks up a localized string similar to  The type {1} cannot be assigned to variables of type {0}..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionUnityConfigSectionNotExists">
            <summary>
              Looks up a localized string similar to  Cannot locate the unity configuration section for the current configuration source..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionUnityContainerNotExists">
            <summary>
              Looks up a localized string similar to  The unity container &quot;{0}&quot; specified does not exist..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.ExceptionUnknownType">
            <summary>
              Looks up a localized string similar to  &lt;unknown&gt;.
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.InterceptionNotSupportedForTransientCall">
            <summary>
              Looks up a localized string similar to  The type {0} is not interceptable for Transient Call..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.SourceMessageSizeCounterHelpResource">
            <summary>
              Looks up a localized string similar to  The total size of source message..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.TotalCompressionAttemptsHelpResource">
            <summary>
              Looks up a localized string similar to  The total times of compression attempts..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.TotalCompressionHitsCounterHelpResource">
            <summary>
              Looks up a localized string similar to  The total times of compression..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.TotoalCompressionMissesCounterHelpResource">
            <summary>
              Looks up a localized string similar to  The total times of missing compression ..
            </summary>
        </member>
        <member name="P:Cedar.Core.Properties.Resources.TransactionAlreadyCompleted">
            <summary>
              Looks up a localized string similar to  Transaction already completed..
            </summary>
        </member>
        <member name="T:Cedar.Core.ResourceUtility">
            <summary>
                This unity class is used to Resource string formatting.
            </summary>
        </member>
        <member name="M:Cedar.Core.ResourceUtility.Format(System.String,System.Object[])">
            <summary>
                Formats the specified resource string based on the current culture.
            </summary>
            <param name="resourceString">The resource string.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="T:Cedar.Core.SettingSource.Configuration.SettingSourceDataBase">
            <summary>
                This is base class of all concrete setting source configuration element classes.
            </summary>
        </member>
        <member name="M:Cedar.Core.SettingSource.Configuration.SettingSourceDataBase.CreateSettingSource">
            <summary>
                Creates the setting source.
            </summary>
            <returns>The created setting source.</returns>
        </member>
        <member name="T:Cedar.Core.SettingSource.Configuration.SettingSourceSettings">
            <summary>
            </summary>
        </member>
        <member name="P:Cedar.Core.SettingSource.Configuration.SettingSourceSettings.DefaultSettingSource">
            <summary>
                Gets the default setting source.
            </summary>
            <value>
                The default setting source.
            </value>
        </member>
        <member name="P:Cedar.Core.SettingSource.Configuration.SettingSourceSettings.SettingSources">
            <summary>
                Gets the setting sources.
            </summary>
            <value>
                The setting sources.
            </value>
        </member>
        <member name="M:Cedar.Core.SettingSource.Configuration.SettingSourceSettings.GetSettingSource(System.String)">
            <summary>
                Gets the setting source.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"></exception>
        </member>
        <member name="T:Cedar.Core.SettingSource.ISettingSource">
            <summary>
                All of setting resource classes must implement this interface.
            </summary>
        </member>
        <member name="M:Cedar.Core.SettingSource.ISettingSource.GetConfigurationSection(System.String)">
            <summary>
                Gets the configuration section based on specified section name.
            </summary>
            <param name="sectionName">Name of the section.</param>
            <returns>The target configuration section.</returns>
        </member>
        <member name="M:Cedar.Core.SettingSource.ISettingSource.SetAsCurrentSettingsSource">
            <summary>
                Sets as current settings source.
            </summary>
        </member>
        <member name="T:Cedar.Core.SettingSource.SettingSourceFactory">
            <summary>
                This is factory to create or get setting source.
            </summary>
        </member>
        <member name="M:Cedar.Core.SettingSource.SettingSourceFactory.GetSettingSource(System.String)">
            <summary>
                Gets the setting source.
            </summary>
            <param name="name">The name.</param>
            <returns>The setting source.</returns>
        </member>
        <member name="M:Cedar.Core.SettingSource.SettingSourceFactory.ChangeSettingSource(Cedar.Core.SettingSource.ISettingSource)">
            <summary>
                Changes the setting source.
            </summary>
            <param name="settingSource">The setting source.</param>
        </member>
        <member name="M:Cedar.Core.SettingSource.SettingSourceFactory.ChangeSettingSource(System.String)">
            <summary>
                Changes the setting source.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Cedar.Core.SettingSource.SettingSourceFactory.Reset">
            <summary>
                Resets this default setting source to null.
            </summary>
        </member>
        <member name="T:Cedar.Core.TimeConverter">
            <summary>
                A helper class to perform UTC time and local time transformation.
            </summary>
        </member>
        <member name="P:Cedar.Core.TimeConverter.NeedConvertUtc">
            <summary>
                Gets a value indicating whether [need convert UTC].
            </summary>
            <value><c>true</c> if [need convert UTC]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cedar.Core.TimeConverter.CurrentDateTime">
            <summary>
                Gets the current date time.
            </summary>
            <value>The current date time.</value>
        </member>
        <member name="M:Cedar.Core.TimeConverter.IsIngoredDate(System.DateTime)">
            <summary>
                Determines whether date is ingored date.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>
                <c>true</c> if ingored date; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cedar.Core.TimeConverter.ConvertBeforeSaving(System.DateTime)">
            <summary>
                Transforms the before saving.
            </summary>
            <param name="dateTime">The time to convert.</param>
            <returns>The tranformed time.</returns>
        </member>
        <member name="M:Cedar.Core.TimeConverter.ConvertAfterQuery(System.DateTime)">
            <summary>
                Transforms the after retrieval from database.
            </summary>
            <param name="time">The time.</param>
            <returns>The tranformed time.</returns>
        </member>
        <member name="T:System.StringExtensions">
            <summary>
                This class defines a series of extension methods against string type.
            </summary>
        </member>
        <member name="M:System.StringExtensions.Format(System.String,System.Object[])">
            <summary>
                Formats the specified template.
            </summary>
            <param name="template">The template.</param>
            <param name="arguments">The arguments.</param>
            <returns>The formatted string.</returns>
        </member>
    </members>
</doc>
