#region Copyright(C) 2008 NCS Pte. Ltd. All rights reserved.
// ==============================================================================
// Copyright(C) 2008 NCS Pte Ltd
//
// SYSTEM NAME			: NCS HiiP System
// COMPONENT ID			: HiiP.Modules.Framework.BatchJob
// COMPONENT DESC		: Sample
//
// CREATED DATE/BY	    : 10 March 2008 /Lu Ya Ming
//
// REVISION HISTORY:
// DATE/BY              ISSUE#/SR#/CS/PM#/OTHERS DESCRIPTION OF CHANGE
// ==============================================================================
#endregion

using System;
using System.Threading;
using System.Linq;

using NCS.IConnect.BatchJob;
using HiiP.Framework.Common.Server;
using HiiP.Framework.BatchJob.Server;
using HiiP.Framework.Common.InstanceBuilders;

namespace HiiP.Framework.BatchJob.Component
{
    public class BatchJobSample : HiiPBatchJobBase
    {
        protected override void DoWork()
        {
            var param =
           this.BatchJobRunningInfo.RunningParameters.Where(x => x.Name == "SleepTime").FirstOrDefault();

            if (param != null)
            {
                Thread.Sleep(int.Parse(param.Value) * 60 * 1000);
            }


        }

        protected override void OnStarting()
        {
            base.OnStarting();
        }

        /// <summary>
        /// Called when [completed].
        /// </summary>
        /// <remarks></remarks>
        protected override void OnCompleted()
        {

            if (!this.BatchJobRunningInfo.RunningID.HasValue)
            {
                base.OnCompleted();

                return;
            }

            var param =
                this.BatchJobRunningInfo.RunningParameters.Where(x => x.Name == "CompletedStatus").FirstOrDefault();

            BatchJobStatus status = BatchJobStatus.Completed;
            if (param!=null && !string.IsNullOrEmpty(param.Value))
            {
                status = (BatchJobStatus)Enum.Parse(typeof(BatchJobStatus), param.Value);
            }

            var castedStatus = 1;
            switch (status)
            {
                case BatchJobStatus.CancelFailed:
                case BatchJobStatus.Cancelled:
                case BatchJobStatus.Cancelling:
                case BatchJobStatus.Running:
                case BatchJobStatus.ForcedCancelling:
                case BatchJobStatus.Unstarted:
                    base.OnCompleted();
                    return;
                case BatchJobStatus.Completed:
                    castedStatus = 1;
                    break;
                case BatchJobStatus.CompletedWithErrors:
                    castedStatus = 2;
                    break;
                case BatchJobStatus.Error:
                    castedStatus = 3;
                    break;
                default:
                    break;
            }

            var service = InstanceBuilder.CreateInstance<BatchJobExternalService>();

            service.UpdateBatchJobHistory(this.BatchJobRunningInfo.RunningID.Value, DateTime.Now, castedStatus, 3, 2, 1, "exception");
        }
       


        protected override void OnError(Exception e)
        {
            base.OnError(e);
        }
    }
}