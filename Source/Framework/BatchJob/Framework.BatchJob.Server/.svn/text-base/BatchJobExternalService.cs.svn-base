#region Copyright(C) 2010 NCS Pte. Ltd. All rights reserved.

// ==================================================================================================
// Copyright(C) 2010 NCS Pte. Ltd. All rights reserved.
//
// SYSTEM NAME       :   Housing Integrated Information Program
// COMPONENT ID      :   Framework/Batch job
// COMPONENT DESC    :  
//
// CREATED DATE/BY   : 29/12/2010/He Jiang Yan
//
// REVISION HISTORY  : DATE/BY                    SR#/CS/PM#/OTHERS          DESCRIPTION OF CHANGE
// ==================================================================================================

#endregion

using System;
using System.ServiceModel;
using HiiP.Framework.BatchJob.Interface.Constants;
using HiiP.Framework.BatchJob.Interface.Services;
using HiiP.Framework.Common.Server;
using HiiP.Framework.Common.Server.CallHandlers;
using HiiP.Framework.Logging.Library;
using NCS.IConnect.BatchJob;
using HiiP.Framework.Common.ApplicationContexts;

namespace HiiP.Framework.BatchJob.Server
{
    [ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall, Namespace = "http://hiip.ooh.dhs.vic.gov.au/")]
    public class BatchJobExternalService : ServiceBase, IBatchJobExternalService
    {
        #region IBatchJobExternalService Members

        [CachableServiceAuthorizationCallHandler(FunctionNames.UpdateBatchJobHistoryFunctionID, Ordinal = 1)]
        [MonitoringCallHandler(ComponentType.ThirdPartySystem, ModuleID = FunctionNames.BatchJobModuleID, FunctionID = FunctionNames.UpdateBatchJobHistoryFunctionID, Ordinal = 2)]
        public void UpdateBatchJobHistory(int batchJobRunHistoryID, DateTime endDateTime, int status, int numberOfRecordsProcessed, int numberOfRecordsSucceeded, int numberOfRecordsFailed, string exception)
        {

            var controller = ScheduleControllerFactory.CreateScheduleController();
            var historyInfo = controller.GetBatchJobHistoryById(batchJobRunHistoryID);

            historyInfo.EndTime = endDateTime;
            historyInfo.Exception = exception;
            historyInfo.Percentage = 100;
            historyInfo.Successful = true;

            TimeSpan elapse = endDateTime - historyInfo.StartTime;
            elapse = new TimeSpan(0, 0, Convert.ToInt32(elapse.TotalSeconds));

            historyInfo.ElapseTime = elapse;
            historyInfo.RemainingTime = new TimeSpan(0, 0, 0);

            switch (status)
            {
                case 1:
                    historyInfo.Status = BatchJobStatus.Completed;
                    break;
                case 2:
                    historyInfo.Status = BatchJobStatus.CompletedWithErrors;
                    break;
                case 3:
                    historyInfo.Status = BatchJobStatus.Error;
                    break;
                default:
                    throw new ArgumentOutOfRangeException(string.Format("The value of the input status is not allowed. It just can be 1(for Completed) or 2( for CompletedWithErrors) or 3(for Error)."));
            }

            var notes = string.Format("There are {0} records processed, and {1} of records succeeded, {2} failed.", numberOfRecordsProcessed, numberOfRecordsSucceeded, numberOfRecordsFailed);
            historyInfo.AddNote(notes);
            controller.UpdateBatchJobHistory(historyInfo);
        }

        #endregion
    }
}
