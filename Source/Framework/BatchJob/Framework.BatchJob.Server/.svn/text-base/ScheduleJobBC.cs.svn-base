#region Copyright(C) 2010 NCS Pte. Ltd. All rights reserved.

// ==================================================================================================
// Copyright(C) 2010 NCS Pte. Ltd. All rights reserved.
//
// SYSTEM NAME       :   Housing Integrated Information Program
// COMPONENT ID      :   Framework/Batch job
// COMPONENT DESC    :  
//
// CREATED DATE/BY   : 29/12/2010/He Jiang Yan
//
// REVISION HISTORY  : DATE/BY                    SR#/CS/PM#/OTHERS          DESCRIPTION OF CHANGE
// ==================================================================================================

#endregion

using System;
using HiiP.Framework.BatchJob.Interface.BusinessEntities;
using HiiP.Framework.BatchJob.Interface.Constants;
using HiiP.Framework.Common.InstanceBuilders;
using HiiP.Framework.Common.Server;
using HiiP.Framework.Logging.Library;

namespace HiiP.Framework.BatchJob.Server
{
    public class ScheduleJobBC : HiiPBusinessComponentBase
    {
        #region IScheduleJobService Members

        [MonitoringCallHandler(ComponentType.BusinessComponent, ModuleID = FunctionNames.BatchJobModuleID, FunctionID = FunctionNames.ViewBatchJobFunctionID)]
        public BatchJobDetailInfoDataSet GetBatchJobInfo(string batchJobID)
        {
            ScheduleJobDA da = InstanceBuilder.Wrap<ScheduleJobDA>(new ScheduleJobDA());
            return da.GetBatchJobInfo(batchJobID);
        }

        [MonitoringCallHandler(ComponentType.BusinessComponent, ModuleID = FunctionNames.BatchJobModuleID, FunctionID = FunctionNames.ScheduleABatchJobFunctionID)]
        public void AddBatchJob(BatchJobDetailInfoDataSet batchJobInfo)
        {
            ScheduleJobDA da = InstanceBuilder.Wrap<ScheduleJobDA>(new ScheduleJobDA());
            da.AddBatchJob(batchJobInfo);
        }

        [MonitoringCallHandler(ComponentType.BusinessComponent, ModuleID = FunctionNames.BatchJobModuleID, FunctionID = FunctionNames.UpdateBatchJobFunctionID)]
        public void UpdateBatchJob(BatchJobDetailInfoDataSet batchJobInfo)
        {
            ScheduleJobDA da = InstanceBuilder.Wrap<ScheduleJobDA>(new ScheduleJobDA());
            da.UpdateBatchJob(batchJobInfo);
        }

        /// <summary>
        /// Get all jobs which Frequency != "RunOnce".
        /// </summary>
        /// <returns>DependencyJobsDataSet.T_IC_BATCH_JOBDataTable</returns>
        [MonitoringCallHandler(ComponentType.BusinessComponent, ModuleID = FunctionNames.BatchJobModuleID, FunctionID = FunctionNames.MaintainDependencyBatchJobListFunctionID)]
        public DependencyJobsDataSet.T_IC_BATCH_JOBDataTable GetAllBatchJobsAsChild()
        {
            ScheduleJobDA da = InstanceBuilder.Wrap<ScheduleJobDA>(new ScheduleJobDA());
            return da.GetAllBatchJobsAsChild();
        }

        /// <summary>
        /// Get all jobs by child job ID, run time and job next run history ID.
        /// </summary>
        /// <param name="jobID"></param>
        /// <param name="frequency"></param>
        /// <param name="interval"></param>
        /// <param name="runDayOfWeek"></param>
        /// <param name="runDateOfYear"></param>
        /// <param name="runDayOfMonth"></param>
        /// <param name="Months"></param>
        /// <param name="indexOfMonth"></param>
        /// <param name="isRunInNextDay"></param>
        /// <param name="runtime"></param>
        /// <param name="nextID"></param>
        /// <returns>DependencyJobsDataSet.T_IC_BATCH_JOBDataTable</returns>
        [MonitoringCallHandler(ComponentType.BusinessComponent, ModuleID = FunctionNames.BatchJobModuleID, FunctionID = FunctionNames.MaintainDependencyBatchJobListFunctionID)]
        public DependencyJobsDataSet.T_IC_BATCH_JOBDataTable GetAllBatchJobsAsParent(string jobID,
            string frequency,
            int? interval,
            string runDayOfWeek,
            string runDateOfYear,
            string runDayOfMonth,
            string Months,
            int? indexOfMonth,
            bool isRunInNextDay,
            string runtime,
            ref int? nextID)
        {
            ScheduleJobDA da = InstanceBuilder.Wrap<ScheduleJobDA>(new ScheduleJobDA());
            return da.GetAllBatchJobsAsParent(jobID,
                frequency,
                interval,
                runDayOfWeek,
                runDateOfYear,
                runDayOfMonth,
                Months,
                indexOfMonth,
                isRunInNextDay,
                runtime,
                ref nextID);
        }

        /// <summary>
        /// Get all parents of the child job with child job ID.
        /// </summary>
        /// <param name="jobID"></param>
        /// <returns>DependencyJobsDataSet.T_IC_BATCH_JOB_LISTDataTable</returns>
        [MonitoringCallHandler(ComponentType.BusinessComponent, ModuleID = FunctionNames.BatchJobModuleID, FunctionID = FunctionNames.MaintainDependencyBatchJobListFunctionID)]
        public DependencyJobsDataSet.T_IC_BATCH_JOB_LISTDataTable GetAllParentsWithJobID(string jobID)
        {
            ScheduleJobDA da = InstanceBuilder.Wrap<ScheduleJobDA>(new ScheduleJobDA());
            return da.GetAllParentsWithJobID(jobID);
        }

        /// <summary>
        /// Dependency changes will be updated to database.
        /// </summary>
        /// <param name="dependencyInfo"></param>
        [MonitoringCallHandler(ComponentType.BusinessComponent, ModuleID = FunctionNames.BatchJobModuleID, FunctionID = FunctionNames.MaintainDependencyBatchJobListFunctionID)]
        public void UpdateDependency(DependencyJobsDataSet dependencyInfo)
        {
            ScheduleJobDA da = InstanceBuilder.Wrap<ScheduleJobDA>(new ScheduleJobDA());
            da.UpdateDependency(dependencyInfo);
        }

        /// <summary>
        /// Check whether the conditions of their match.
        /// </summary>
        /// <param name="childJobID"></param>
        /// <param name="parentJobIDs"></param>
        /// <returns>string</returns>
        [MonitoringCallHandler(ComponentType.BusinessComponent, ModuleID = FunctionNames.BatchJobModuleID, FunctionID = FunctionNames.MaintainDependencyBatchJobListFunctionID)]
        public string DependencyCheck(string childJobID, string parentJobIDs)
        {
            ScheduleJobDA da = InstanceBuilder.Wrap<ScheduleJobDA>(new ScheduleJobDA());
            return da.DependencyCheck(childJobID, parentJobIDs);
        }


        [MonitoringCallHandler(ComponentType.BusinessComponent, ModuleID = FunctionNames.BatchJobModuleID, FunctionID = FunctionNames.MaintainDependencyBatchJobListFunctionID)]
        public bool CheckDuplicateName(string jobName, string jobID)
        {
            ScheduleJobDA da = InstanceBuilder.Wrap<ScheduleJobDA>(new ScheduleJobDA());
            return da.CheckDuplicateName(jobName, jobID);
        }

        #endregion
    }
}
