//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace HiiP.Framework.Logging.BusinessEntity {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("LoggingUsageDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class LoggingUsageDataSet : global::System.Data.DataSet {
        
        private T_IC_LOGGING_USAGEDataTable tableT_IC_LOGGING_USAGE;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LoggingUsageDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected LoggingUsageDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["T_IC_LOGGING_USAGE"] != null)) {
                    base.Tables.Add(new T_IC_LOGGING_USAGEDataTable(ds.Tables["T_IC_LOGGING_USAGE"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public T_IC_LOGGING_USAGEDataTable T_IC_LOGGING_USAGE {
            get {
                return this.tableT_IC_LOGGING_USAGE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            LoggingUsageDataSet cln = ((LoggingUsageDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["T_IC_LOGGING_USAGE"] != null)) {
                    base.Tables.Add(new T_IC_LOGGING_USAGEDataTable(ds.Tables["T_IC_LOGGING_USAGE"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableT_IC_LOGGING_USAGE = ((T_IC_LOGGING_USAGEDataTable)(base.Tables["T_IC_LOGGING_USAGE"]));
            if ((initTable == true)) {
                if ((this.tableT_IC_LOGGING_USAGE != null)) {
                    this.tableT_IC_LOGGING_USAGE.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "LoggingUsageDataSet";
            this.Prefix = "";
            this.Namespace = "http://hiip.ooh.dhs.vic.gov.au/LoggingUsageDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableT_IC_LOGGING_USAGE = new T_IC_LOGGING_USAGEDataTable();
            base.Tables.Add(this.tableT_IC_LOGGING_USAGE);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeT_IC_LOGGING_USAGE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            LoggingUsageDataSet ds = new LoggingUsageDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void T_IC_LOGGING_USAGERowChangeEventHandler(object sender, T_IC_LOGGING_USAGERowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class T_IC_LOGGING_USAGEDataTable : global::System.Data.TypedTableBase<T_IC_LOGGING_USAGERow> {
            
            private global::System.Data.DataColumn columnSTART_TIME;
            
            private global::System.Data.DataColumn columnEND_TIME;
            
            private global::System.Data.DataColumn columnUSER_NAME;
            
            private global::System.Data.DataColumn columnUSER_ROLES;
            
            private global::System.Data.DataColumn columnORGANIZATION_NAME;
            
            private global::System.Data.DataColumn columnGEOGRAPHIC_AREA;
            
            private global::System.Data.DataColumn columnMODULE_ID;
            
            private global::System.Data.DataColumn columnFUNCTION_ID;
            
            private global::System.Data.DataColumn columnUSER_COUNT;
            
            private global::System.Data.DataColumn columnFREQUENCY;
            
            private global::System.Data.DataColumn columnOFFICE_NAME;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IC_LOGGING_USAGEDataTable() {
                this.TableName = "T_IC_LOGGING_USAGE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal T_IC_LOGGING_USAGEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected T_IC_LOGGING_USAGEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn START_TIMEColumn {
                get {
                    return this.columnSTART_TIME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn END_TIMEColumn {
                get {
                    return this.columnEND_TIME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USER_NAMEColumn {
                get {
                    return this.columnUSER_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USER_ROLESColumn {
                get {
                    return this.columnUSER_ROLES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORGANIZATION_NAMEColumn {
                get {
                    return this.columnORGANIZATION_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GEOGRAPHIC_AREAColumn {
                get {
                    return this.columnGEOGRAPHIC_AREA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MODULE_IDColumn {
                get {
                    return this.columnMODULE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FUNCTION_IDColumn {
                get {
                    return this.columnFUNCTION_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USER_COUNTColumn {
                get {
                    return this.columnUSER_COUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FREQUENCYColumn {
                get {
                    return this.columnFREQUENCY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OFFICE_NAMEColumn {
                get {
                    return this.columnOFFICE_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IC_LOGGING_USAGERow this[int index] {
                get {
                    return ((T_IC_LOGGING_USAGERow)(this.Rows[index]));
                }
            }
            
            public event T_IC_LOGGING_USAGERowChangeEventHandler T_IC_LOGGING_USAGERowChanging;
            
            public event T_IC_LOGGING_USAGERowChangeEventHandler T_IC_LOGGING_USAGERowChanged;
            
            public event T_IC_LOGGING_USAGERowChangeEventHandler T_IC_LOGGING_USAGERowDeleting;
            
            public event T_IC_LOGGING_USAGERowChangeEventHandler T_IC_LOGGING_USAGERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddT_IC_LOGGING_USAGERow(T_IC_LOGGING_USAGERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IC_LOGGING_USAGERow AddT_IC_LOGGING_USAGERow(System.DateTime START_TIME, System.DateTime END_TIME, string USER_NAME, string USER_ROLES, string ORGANIZATION_NAME, string GEOGRAPHIC_AREA, string MODULE_ID, string FUNCTION_ID, string USER_COUNT, string FREQUENCY, string OFFICE_NAME) {
                T_IC_LOGGING_USAGERow rowT_IC_LOGGING_USAGERow = ((T_IC_LOGGING_USAGERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        START_TIME,
                        END_TIME,
                        USER_NAME,
                        USER_ROLES,
                        ORGANIZATION_NAME,
                        GEOGRAPHIC_AREA,
                        MODULE_ID,
                        FUNCTION_ID,
                        USER_COUNT,
                        FREQUENCY,
                        OFFICE_NAME};
                rowT_IC_LOGGING_USAGERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowT_IC_LOGGING_USAGERow);
                return rowT_IC_LOGGING_USAGERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                T_IC_LOGGING_USAGEDataTable cln = ((T_IC_LOGGING_USAGEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new T_IC_LOGGING_USAGEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSTART_TIME = base.Columns["START_TIME"];
                this.columnEND_TIME = base.Columns["END_TIME"];
                this.columnUSER_NAME = base.Columns["USER_NAME"];
                this.columnUSER_ROLES = base.Columns["USER_ROLES"];
                this.columnORGANIZATION_NAME = base.Columns["ORGANIZATION_NAME"];
                this.columnGEOGRAPHIC_AREA = base.Columns["GEOGRAPHIC_AREA"];
                this.columnMODULE_ID = base.Columns["MODULE_ID"];
                this.columnFUNCTION_ID = base.Columns["FUNCTION_ID"];
                this.columnUSER_COUNT = base.Columns["USER_COUNT"];
                this.columnFREQUENCY = base.Columns["FREQUENCY"];
                this.columnOFFICE_NAME = base.Columns["OFFICE_NAME"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSTART_TIME = new global::System.Data.DataColumn("START_TIME", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTART_TIME);
                this.columnEND_TIME = new global::System.Data.DataColumn("END_TIME", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEND_TIME);
                this.columnUSER_NAME = new global::System.Data.DataColumn("USER_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER_NAME);
                this.columnUSER_ROLES = new global::System.Data.DataColumn("USER_ROLES", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER_ROLES);
                this.columnORGANIZATION_NAME = new global::System.Data.DataColumn("ORGANIZATION_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORGANIZATION_NAME);
                this.columnGEOGRAPHIC_AREA = new global::System.Data.DataColumn("GEOGRAPHIC_AREA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGEOGRAPHIC_AREA);
                this.columnMODULE_ID = new global::System.Data.DataColumn("MODULE_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMODULE_ID);
                this.columnFUNCTION_ID = new global::System.Data.DataColumn("FUNCTION_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFUNCTION_ID);
                this.columnUSER_COUNT = new global::System.Data.DataColumn("USER_COUNT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER_COUNT);
                this.columnFREQUENCY = new global::System.Data.DataColumn("FREQUENCY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFREQUENCY);
                this.columnOFFICE_NAME = new global::System.Data.DataColumn("OFFICE_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOFFICE_NAME);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IC_LOGGING_USAGERow NewT_IC_LOGGING_USAGERow() {
                return ((T_IC_LOGGING_USAGERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new T_IC_LOGGING_USAGERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(T_IC_LOGGING_USAGERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.T_IC_LOGGING_USAGERowChanged != null)) {
                    this.T_IC_LOGGING_USAGERowChanged(this, new T_IC_LOGGING_USAGERowChangeEvent(((T_IC_LOGGING_USAGERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.T_IC_LOGGING_USAGERowChanging != null)) {
                    this.T_IC_LOGGING_USAGERowChanging(this, new T_IC_LOGGING_USAGERowChangeEvent(((T_IC_LOGGING_USAGERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.T_IC_LOGGING_USAGERowDeleted != null)) {
                    this.T_IC_LOGGING_USAGERowDeleted(this, new T_IC_LOGGING_USAGERowChangeEvent(((T_IC_LOGGING_USAGERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.T_IC_LOGGING_USAGERowDeleting != null)) {
                    this.T_IC_LOGGING_USAGERowDeleting(this, new T_IC_LOGGING_USAGERowChangeEvent(((T_IC_LOGGING_USAGERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveT_IC_LOGGING_USAGERow(T_IC_LOGGING_USAGERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                LoggingUsageDataSet ds = new LoggingUsageDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "T_IC_LOGGING_USAGEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class T_IC_LOGGING_USAGERow : global::System.Data.DataRow {
            
            private T_IC_LOGGING_USAGEDataTable tableT_IC_LOGGING_USAGE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal T_IC_LOGGING_USAGERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableT_IC_LOGGING_USAGE = ((T_IC_LOGGING_USAGEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime START_TIME {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableT_IC_LOGGING_USAGE.START_TIMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'START_TIME\' in table \'T_IC_LOGGING_USAGE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_USAGE.START_TIMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime END_TIME {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableT_IC_LOGGING_USAGE.END_TIMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'END_TIME\' in table \'T_IC_LOGGING_USAGE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_USAGE.END_TIMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USER_NAME {
                get {
                    try {
                        return ((string)(this[this.tableT_IC_LOGGING_USAGE.USER_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USER_NAME\' in table \'T_IC_LOGGING_USAGE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_USAGE.USER_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USER_ROLES {
                get {
                    try {
                        return ((string)(this[this.tableT_IC_LOGGING_USAGE.USER_ROLESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USER_ROLES\' in table \'T_IC_LOGGING_USAGE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_USAGE.USER_ROLESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORGANIZATION_NAME {
                get {
                    try {
                        return ((string)(this[this.tableT_IC_LOGGING_USAGE.ORGANIZATION_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORGANIZATION_NAME\' in table \'T_IC_LOGGING_USAGE\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_USAGE.ORGANIZATION_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GEOGRAPHIC_AREA {
                get {
                    try {
                        return ((string)(this[this.tableT_IC_LOGGING_USAGE.GEOGRAPHIC_AREAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GEOGRAPHIC_AREA\' in table \'T_IC_LOGGING_USAGE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_USAGE.GEOGRAPHIC_AREAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MODULE_ID {
                get {
                    try {
                        return ((string)(this[this.tableT_IC_LOGGING_USAGE.MODULE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MODULE_ID\' in table \'T_IC_LOGGING_USAGE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_USAGE.MODULE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FUNCTION_ID {
                get {
                    try {
                        return ((string)(this[this.tableT_IC_LOGGING_USAGE.FUNCTION_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FUNCTION_ID\' in table \'T_IC_LOGGING_USAGE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_USAGE.FUNCTION_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USER_COUNT {
                get {
                    try {
                        return ((string)(this[this.tableT_IC_LOGGING_USAGE.USER_COUNTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USER_COUNT\' in table \'T_IC_LOGGING_USAGE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_USAGE.USER_COUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FREQUENCY {
                get {
                    try {
                        return ((string)(this[this.tableT_IC_LOGGING_USAGE.FREQUENCYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FREQUENCY\' in table \'T_IC_LOGGING_USAGE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_USAGE.FREQUENCYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OFFICE_NAME {
                get {
                    try {
                        return ((string)(this[this.tableT_IC_LOGGING_USAGE.OFFICE_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OFFICE_NAME\' in table \'T_IC_LOGGING_USAGE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_USAGE.OFFICE_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTART_TIMENull() {
                return this.IsNull(this.tableT_IC_LOGGING_USAGE.START_TIMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTART_TIMENull() {
                this[this.tableT_IC_LOGGING_USAGE.START_TIMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEND_TIMENull() {
                return this.IsNull(this.tableT_IC_LOGGING_USAGE.END_TIMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEND_TIMENull() {
                this[this.tableT_IC_LOGGING_USAGE.END_TIMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSER_NAMENull() {
                return this.IsNull(this.tableT_IC_LOGGING_USAGE.USER_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSER_NAMENull() {
                this[this.tableT_IC_LOGGING_USAGE.USER_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSER_ROLESNull() {
                return this.IsNull(this.tableT_IC_LOGGING_USAGE.USER_ROLESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSER_ROLESNull() {
                this[this.tableT_IC_LOGGING_USAGE.USER_ROLESColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORGANIZATION_NAMENull() {
                return this.IsNull(this.tableT_IC_LOGGING_USAGE.ORGANIZATION_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORGANIZATION_NAMENull() {
                this[this.tableT_IC_LOGGING_USAGE.ORGANIZATION_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGEOGRAPHIC_AREANull() {
                return this.IsNull(this.tableT_IC_LOGGING_USAGE.GEOGRAPHIC_AREAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGEOGRAPHIC_AREANull() {
                this[this.tableT_IC_LOGGING_USAGE.GEOGRAPHIC_AREAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMODULE_IDNull() {
                return this.IsNull(this.tableT_IC_LOGGING_USAGE.MODULE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMODULE_IDNull() {
                this[this.tableT_IC_LOGGING_USAGE.MODULE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFUNCTION_IDNull() {
                return this.IsNull(this.tableT_IC_LOGGING_USAGE.FUNCTION_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFUNCTION_IDNull() {
                this[this.tableT_IC_LOGGING_USAGE.FUNCTION_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSER_COUNTNull() {
                return this.IsNull(this.tableT_IC_LOGGING_USAGE.USER_COUNTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSER_COUNTNull() {
                this[this.tableT_IC_LOGGING_USAGE.USER_COUNTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFREQUENCYNull() {
                return this.IsNull(this.tableT_IC_LOGGING_USAGE.FREQUENCYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFREQUENCYNull() {
                this[this.tableT_IC_LOGGING_USAGE.FREQUENCYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOFFICE_NAMENull() {
                return this.IsNull(this.tableT_IC_LOGGING_USAGE.OFFICE_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOFFICE_NAMENull() {
                this[this.tableT_IC_LOGGING_USAGE.OFFICE_NAMEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class T_IC_LOGGING_USAGERowChangeEvent : global::System.EventArgs {
            
            private T_IC_LOGGING_USAGERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IC_LOGGING_USAGERowChangeEvent(T_IC_LOGGING_USAGERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IC_LOGGING_USAGERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591