//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace HiiP.Framework.Logging.BusinessEntity {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("AuditLogViewDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class AuditLogViewDataSet : global::System.Data.DataSet {
        
        private T_IC_AUDIT_LOG_QUERYDataTable tableT_IC_AUDIT_LOG_QUERY;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AuditLogViewDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected AuditLogViewDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["T_IC_AUDIT_LOG_QUERY"] != null)) {
                    base.Tables.Add(new T_IC_AUDIT_LOG_QUERYDataTable(ds.Tables["T_IC_AUDIT_LOG_QUERY"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public T_IC_AUDIT_LOG_QUERYDataTable T_IC_AUDIT_LOG_QUERY {
            get {
                return this.tableT_IC_AUDIT_LOG_QUERY;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            AuditLogViewDataSet cln = ((AuditLogViewDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["T_IC_AUDIT_LOG_QUERY"] != null)) {
                    base.Tables.Add(new T_IC_AUDIT_LOG_QUERYDataTable(ds.Tables["T_IC_AUDIT_LOG_QUERY"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableT_IC_AUDIT_LOG_QUERY = ((T_IC_AUDIT_LOG_QUERYDataTable)(base.Tables["T_IC_AUDIT_LOG_QUERY"]));
            if ((initTable == true)) {
                if ((this.tableT_IC_AUDIT_LOG_QUERY != null)) {
                    this.tableT_IC_AUDIT_LOG_QUERY.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "AuditLogViewDataSet";
            this.Prefix = "";
            this.Namespace = "http://hiip.ooh.dhs.vic.gov.au/AuditLogViewDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableT_IC_AUDIT_LOG_QUERY = new T_IC_AUDIT_LOG_QUERYDataTable();
            base.Tables.Add(this.tableT_IC_AUDIT_LOG_QUERY);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeT_IC_AUDIT_LOG_QUERY() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            AuditLogViewDataSet ds = new AuditLogViewDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void T_IC_AUDIT_LOG_QUERYRowChangeEventHandler(object sender, T_IC_AUDIT_LOG_QUERYRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class T_IC_AUDIT_LOG_QUERYDataTable : global::System.Data.TypedTableBase<T_IC_AUDIT_LOG_QUERYRow> {
            
            private global::System.Data.DataColumn columnTRANSACTION_ID;
            
            private global::System.Data.DataColumn columnUSER_NAME;
            
            private global::System.Data.DataColumn columnLOG_FUNCTION;
            
            private global::System.Data.DataColumn columnLOG_TIME;
            
            private global::System.Data.DataColumn columnAPP_VERSION;
            
            private global::System.Data.DataColumn columnLOG_ID;
            
            private global::System.Data.DataColumn columnLOG_SUB_ID;
            
            private global::System.Data.DataColumn columnOPERATION;
            
            private global::System.Data.DataColumn columnOPERATION_TIME;
            
            private global::System.Data.DataColumn columnTABLE_NAME;
            
            private global::System.Data.DataColumn columnHOST_NAME;
            
            private global::System.Data.DataColumn columnIP_ADDRESS;
            
            private global::System.Data.DataColumn columnDEVICE;
            
            private global::System.Data.DataColumn columnINDEX;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IC_AUDIT_LOG_QUERYDataTable() {
                this.TableName = "T_IC_AUDIT_LOG_QUERY";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal T_IC_AUDIT_LOG_QUERYDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected T_IC_AUDIT_LOG_QUERYDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TRANSACTION_IDColumn {
                get {
                    return this.columnTRANSACTION_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USER_NAMEColumn {
                get {
                    return this.columnUSER_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOG_FUNCTIONColumn {
                get {
                    return this.columnLOG_FUNCTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOG_TIMEColumn {
                get {
                    return this.columnLOG_TIME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn APP_VERSIONColumn {
                get {
                    return this.columnAPP_VERSION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOG_IDColumn {
                get {
                    return this.columnLOG_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOG_SUB_IDColumn {
                get {
                    return this.columnLOG_SUB_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OPERATIONColumn {
                get {
                    return this.columnOPERATION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OPERATION_TIMEColumn {
                get {
                    return this.columnOPERATION_TIME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TABLE_NAMEColumn {
                get {
                    return this.columnTABLE_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HOST_NAMEColumn {
                get {
                    return this.columnHOST_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IP_ADDRESSColumn {
                get {
                    return this.columnIP_ADDRESS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEVICEColumn {
                get {
                    return this.columnDEVICE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INDEXColumn {
                get {
                    return this.columnINDEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IC_AUDIT_LOG_QUERYRow this[int index] {
                get {
                    return ((T_IC_AUDIT_LOG_QUERYRow)(this.Rows[index]));
                }
            }
            
            public event T_IC_AUDIT_LOG_QUERYRowChangeEventHandler T_IC_AUDIT_LOG_QUERYRowChanging;
            
            public event T_IC_AUDIT_LOG_QUERYRowChangeEventHandler T_IC_AUDIT_LOG_QUERYRowChanged;
            
            public event T_IC_AUDIT_LOG_QUERYRowChangeEventHandler T_IC_AUDIT_LOG_QUERYRowDeleting;
            
            public event T_IC_AUDIT_LOG_QUERYRowChangeEventHandler T_IC_AUDIT_LOG_QUERYRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddT_IC_AUDIT_LOG_QUERYRow(T_IC_AUDIT_LOG_QUERYRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IC_AUDIT_LOG_QUERYRow AddT_IC_AUDIT_LOG_QUERYRow(string TRANSACTION_ID, string USER_NAME, string LOG_FUNCTION, System.DateTime LOG_TIME, string APP_VERSION, string LOG_ID, long LOG_SUB_ID, string OPERATION, System.DateTime OPERATION_TIME, string TABLE_NAME, string HOST_NAME, string IP_ADDRESS, string DEVICE, long INDEX) {
                T_IC_AUDIT_LOG_QUERYRow rowT_IC_AUDIT_LOG_QUERYRow = ((T_IC_AUDIT_LOG_QUERYRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TRANSACTION_ID,
                        USER_NAME,
                        LOG_FUNCTION,
                        LOG_TIME,
                        APP_VERSION,
                        LOG_ID,
                        LOG_SUB_ID,
                        OPERATION,
                        OPERATION_TIME,
                        TABLE_NAME,
                        HOST_NAME,
                        IP_ADDRESS,
                        DEVICE,
                        INDEX};
                rowT_IC_AUDIT_LOG_QUERYRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowT_IC_AUDIT_LOG_QUERYRow);
                return rowT_IC_AUDIT_LOG_QUERYRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                T_IC_AUDIT_LOG_QUERYDataTable cln = ((T_IC_AUDIT_LOG_QUERYDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new T_IC_AUDIT_LOG_QUERYDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTRANSACTION_ID = base.Columns["TRANSACTION_ID"];
                this.columnUSER_NAME = base.Columns["USER_NAME"];
                this.columnLOG_FUNCTION = base.Columns["LOG_FUNCTION"];
                this.columnLOG_TIME = base.Columns["LOG_TIME"];
                this.columnAPP_VERSION = base.Columns["APP_VERSION"];
                this.columnLOG_ID = base.Columns["LOG_ID"];
                this.columnLOG_SUB_ID = base.Columns["LOG_SUB_ID"];
                this.columnOPERATION = base.Columns["OPERATION"];
                this.columnOPERATION_TIME = base.Columns["OPERATION_TIME"];
                this.columnTABLE_NAME = base.Columns["TABLE_NAME"];
                this.columnHOST_NAME = base.Columns["HOST_NAME"];
                this.columnIP_ADDRESS = base.Columns["IP_ADDRESS"];
                this.columnDEVICE = base.Columns["DEVICE"];
                this.columnINDEX = base.Columns["INDEX"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTRANSACTION_ID = new global::System.Data.DataColumn("TRANSACTION_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRANSACTION_ID);
                this.columnUSER_NAME = new global::System.Data.DataColumn("USER_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER_NAME);
                this.columnLOG_FUNCTION = new global::System.Data.DataColumn("LOG_FUNCTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOG_FUNCTION);
                this.columnLOG_TIME = new global::System.Data.DataColumn("LOG_TIME", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOG_TIME);
                this.columnAPP_VERSION = new global::System.Data.DataColumn("APP_VERSION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAPP_VERSION);
                this.columnLOG_ID = new global::System.Data.DataColumn("LOG_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOG_ID);
                this.columnLOG_SUB_ID = new global::System.Data.DataColumn("LOG_SUB_ID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOG_SUB_ID);
                this.columnOPERATION = new global::System.Data.DataColumn("OPERATION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOPERATION);
                this.columnOPERATION_TIME = new global::System.Data.DataColumn("OPERATION_TIME", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOPERATION_TIME);
                this.columnTABLE_NAME = new global::System.Data.DataColumn("TABLE_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTABLE_NAME);
                this.columnHOST_NAME = new global::System.Data.DataColumn("HOST_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHOST_NAME);
                this.columnIP_ADDRESS = new global::System.Data.DataColumn("IP_ADDRESS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIP_ADDRESS);
                this.columnDEVICE = new global::System.Data.DataColumn("DEVICE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEVICE);
                this.columnINDEX = new global::System.Data.DataColumn("INDEX", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINDEX);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IC_AUDIT_LOG_QUERYRow NewT_IC_AUDIT_LOG_QUERYRow() {
                return ((T_IC_AUDIT_LOG_QUERYRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new T_IC_AUDIT_LOG_QUERYRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(T_IC_AUDIT_LOG_QUERYRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.T_IC_AUDIT_LOG_QUERYRowChanged != null)) {
                    this.T_IC_AUDIT_LOG_QUERYRowChanged(this, new T_IC_AUDIT_LOG_QUERYRowChangeEvent(((T_IC_AUDIT_LOG_QUERYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.T_IC_AUDIT_LOG_QUERYRowChanging != null)) {
                    this.T_IC_AUDIT_LOG_QUERYRowChanging(this, new T_IC_AUDIT_LOG_QUERYRowChangeEvent(((T_IC_AUDIT_LOG_QUERYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.T_IC_AUDIT_LOG_QUERYRowDeleted != null)) {
                    this.T_IC_AUDIT_LOG_QUERYRowDeleted(this, new T_IC_AUDIT_LOG_QUERYRowChangeEvent(((T_IC_AUDIT_LOG_QUERYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.T_IC_AUDIT_LOG_QUERYRowDeleting != null)) {
                    this.T_IC_AUDIT_LOG_QUERYRowDeleting(this, new T_IC_AUDIT_LOG_QUERYRowChangeEvent(((T_IC_AUDIT_LOG_QUERYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveT_IC_AUDIT_LOG_QUERYRow(T_IC_AUDIT_LOG_QUERYRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AuditLogViewDataSet ds = new AuditLogViewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "T_IC_AUDIT_LOG_QUERYDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class T_IC_AUDIT_LOG_QUERYRow : global::System.Data.DataRow {
            
            private T_IC_AUDIT_LOG_QUERYDataTable tableT_IC_AUDIT_LOG_QUERY;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal T_IC_AUDIT_LOG_QUERYRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableT_IC_AUDIT_LOG_QUERY = ((T_IC_AUDIT_LOG_QUERYDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TRANSACTION_ID {
                get {
                    if (this.IsTRANSACTION_IDNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_AUDIT_LOG_QUERY.TRANSACTION_IDColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_AUDIT_LOG_QUERY.TRANSACTION_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USER_NAME {
                get {
                    if (this.IsUSER_NAMENull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_AUDIT_LOG_QUERY.USER_NAMEColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_AUDIT_LOG_QUERY.USER_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LOG_FUNCTION {
                get {
                    if (this.IsLOG_FUNCTIONNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_AUDIT_LOG_QUERY.LOG_FUNCTIONColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_AUDIT_LOG_QUERY.LOG_FUNCTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LOG_TIME {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableT_IC_AUDIT_LOG_QUERY.LOG_TIMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LOG_TIME\' in table \'T_IC_AUDIT_LOG_QUERY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_IC_AUDIT_LOG_QUERY.LOG_TIMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string APP_VERSION {
                get {
                    if (this.IsAPP_VERSIONNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_AUDIT_LOG_QUERY.APP_VERSIONColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_AUDIT_LOG_QUERY.APP_VERSIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LOG_ID {
                get {
                    if (this.IsLOG_IDNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_AUDIT_LOG_QUERY.LOG_IDColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_AUDIT_LOG_QUERY.LOG_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long LOG_SUB_ID {
                get {
                    try {
                        return ((long)(this[this.tableT_IC_AUDIT_LOG_QUERY.LOG_SUB_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LOG_SUB_ID\' in table \'T_IC_AUDIT_LOG_QUERY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_IC_AUDIT_LOG_QUERY.LOG_SUB_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OPERATION {
                get {
                    if (this.IsOPERATIONNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_AUDIT_LOG_QUERY.OPERATIONColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_AUDIT_LOG_QUERY.OPERATIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime OPERATION_TIME {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableT_IC_AUDIT_LOG_QUERY.OPERATION_TIMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OPERATION_TIME\' in table \'T_IC_AUDIT_LOG_QUERY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_IC_AUDIT_LOG_QUERY.OPERATION_TIMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TABLE_NAME {
                get {
                    if (this.IsTABLE_NAMENull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_AUDIT_LOG_QUERY.TABLE_NAMEColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_AUDIT_LOG_QUERY.TABLE_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HOST_NAME {
                get {
                    if (this.IsHOST_NAMENull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_AUDIT_LOG_QUERY.HOST_NAMEColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_AUDIT_LOG_QUERY.HOST_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IP_ADDRESS {
                get {
                    if (this.IsIP_ADDRESSNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_AUDIT_LOG_QUERY.IP_ADDRESSColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_AUDIT_LOG_QUERY.IP_ADDRESSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEVICE {
                get {
                    if (this.IsDEVICENull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_AUDIT_LOG_QUERY.DEVICEColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_AUDIT_LOG_QUERY.DEVICEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long INDEX {
                get {
                    try {
                        return ((long)(this[this.tableT_IC_AUDIT_LOG_QUERY.INDEXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INDEX\' in table \'T_IC_AUDIT_LOG_QUERY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_IC_AUDIT_LOG_QUERY.INDEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTRANSACTION_IDNull() {
                return this.IsNull(this.tableT_IC_AUDIT_LOG_QUERY.TRANSACTION_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTRANSACTION_IDNull() {
                this[this.tableT_IC_AUDIT_LOG_QUERY.TRANSACTION_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSER_NAMENull() {
                return this.IsNull(this.tableT_IC_AUDIT_LOG_QUERY.USER_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSER_NAMENull() {
                this[this.tableT_IC_AUDIT_LOG_QUERY.USER_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLOG_FUNCTIONNull() {
                return this.IsNull(this.tableT_IC_AUDIT_LOG_QUERY.LOG_FUNCTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLOG_FUNCTIONNull() {
                this[this.tableT_IC_AUDIT_LOG_QUERY.LOG_FUNCTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLOG_TIMENull() {
                return this.IsNull(this.tableT_IC_AUDIT_LOG_QUERY.LOG_TIMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLOG_TIMENull() {
                this[this.tableT_IC_AUDIT_LOG_QUERY.LOG_TIMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAPP_VERSIONNull() {
                return this.IsNull(this.tableT_IC_AUDIT_LOG_QUERY.APP_VERSIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAPP_VERSIONNull() {
                this[this.tableT_IC_AUDIT_LOG_QUERY.APP_VERSIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLOG_IDNull() {
                return this.IsNull(this.tableT_IC_AUDIT_LOG_QUERY.LOG_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLOG_IDNull() {
                this[this.tableT_IC_AUDIT_LOG_QUERY.LOG_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLOG_SUB_IDNull() {
                return this.IsNull(this.tableT_IC_AUDIT_LOG_QUERY.LOG_SUB_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLOG_SUB_IDNull() {
                this[this.tableT_IC_AUDIT_LOG_QUERY.LOG_SUB_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOPERATIONNull() {
                return this.IsNull(this.tableT_IC_AUDIT_LOG_QUERY.OPERATIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOPERATIONNull() {
                this[this.tableT_IC_AUDIT_LOG_QUERY.OPERATIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOPERATION_TIMENull() {
                return this.IsNull(this.tableT_IC_AUDIT_LOG_QUERY.OPERATION_TIMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOPERATION_TIMENull() {
                this[this.tableT_IC_AUDIT_LOG_QUERY.OPERATION_TIMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTABLE_NAMENull() {
                return this.IsNull(this.tableT_IC_AUDIT_LOG_QUERY.TABLE_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTABLE_NAMENull() {
                this[this.tableT_IC_AUDIT_LOG_QUERY.TABLE_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHOST_NAMENull() {
                return this.IsNull(this.tableT_IC_AUDIT_LOG_QUERY.HOST_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHOST_NAMENull() {
                this[this.tableT_IC_AUDIT_LOG_QUERY.HOST_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIP_ADDRESSNull() {
                return this.IsNull(this.tableT_IC_AUDIT_LOG_QUERY.IP_ADDRESSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIP_ADDRESSNull() {
                this[this.tableT_IC_AUDIT_LOG_QUERY.IP_ADDRESSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEVICENull() {
                return this.IsNull(this.tableT_IC_AUDIT_LOG_QUERY.DEVICEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEVICENull() {
                this[this.tableT_IC_AUDIT_LOG_QUERY.DEVICEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINDEXNull() {
                return this.IsNull(this.tableT_IC_AUDIT_LOG_QUERY.INDEXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINDEXNull() {
                this[this.tableT_IC_AUDIT_LOG_QUERY.INDEXColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class T_IC_AUDIT_LOG_QUERYRowChangeEvent : global::System.EventArgs {
            
            private T_IC_AUDIT_LOG_QUERYRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IC_AUDIT_LOG_QUERYRowChangeEvent(T_IC_AUDIT_LOG_QUERYRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IC_AUDIT_LOG_QUERYRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591