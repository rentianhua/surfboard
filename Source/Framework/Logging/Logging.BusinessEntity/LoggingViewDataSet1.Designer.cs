//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace HiiP.Framework.Logging.BusinessEntity {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("LoggingViewDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class LoggingViewDataSet : global::System.Data.DataSet {
        
        private T_IC_LOGGING_LOGDataTable tableT_IC_LOGGING_LOG;
        
        private T_IC_PERFORMANCE_LOGDataTable tableT_IC_PERFORMANCE_LOG;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LoggingViewDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected LoggingViewDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["T_IC_LOGGING_LOG"] != null)) {
                    base.Tables.Add(new T_IC_LOGGING_LOGDataTable(ds.Tables["T_IC_LOGGING_LOG"]));
                }
                if ((ds.Tables["T_IC_PERFORMANCE_LOG"] != null)) {
                    base.Tables.Add(new T_IC_PERFORMANCE_LOGDataTable(ds.Tables["T_IC_PERFORMANCE_LOG"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public T_IC_LOGGING_LOGDataTable T_IC_LOGGING_LOG {
            get {
                return this.tableT_IC_LOGGING_LOG;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public T_IC_PERFORMANCE_LOGDataTable T_IC_PERFORMANCE_LOG {
            get {
                return this.tableT_IC_PERFORMANCE_LOG;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            LoggingViewDataSet cln = ((LoggingViewDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["T_IC_LOGGING_LOG"] != null)) {
                    base.Tables.Add(new T_IC_LOGGING_LOGDataTable(ds.Tables["T_IC_LOGGING_LOG"]));
                }
                if ((ds.Tables["T_IC_PERFORMANCE_LOG"] != null)) {
                    base.Tables.Add(new T_IC_PERFORMANCE_LOGDataTable(ds.Tables["T_IC_PERFORMANCE_LOG"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableT_IC_LOGGING_LOG = ((T_IC_LOGGING_LOGDataTable)(base.Tables["T_IC_LOGGING_LOG"]));
            if ((initTable == true)) {
                if ((this.tableT_IC_LOGGING_LOG != null)) {
                    this.tableT_IC_LOGGING_LOG.InitVars();
                }
            }
            this.tableT_IC_PERFORMANCE_LOG = ((T_IC_PERFORMANCE_LOGDataTable)(base.Tables["T_IC_PERFORMANCE_LOG"]));
            if ((initTable == true)) {
                if ((this.tableT_IC_PERFORMANCE_LOG != null)) {
                    this.tableT_IC_PERFORMANCE_LOG.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "LoggingViewDataSet";
            this.Prefix = "";
            this.Namespace = "http://hiip.ooh.dhs.vic.gov.au/LoggingViewDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableT_IC_LOGGING_LOG = new T_IC_LOGGING_LOGDataTable();
            base.Tables.Add(this.tableT_IC_LOGGING_LOG);
            this.tableT_IC_PERFORMANCE_LOG = new T_IC_PERFORMANCE_LOGDataTable();
            base.Tables.Add(this.tableT_IC_PERFORMANCE_LOG);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeT_IC_LOGGING_LOG() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeT_IC_PERFORMANCE_LOG() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            LoggingViewDataSet ds = new LoggingViewDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void T_IC_LOGGING_LOGRowChangeEventHandler(object sender, T_IC_LOGGING_LOGRowChangeEvent e);
        
        public delegate void T_IC_PERFORMANCE_LOGRowChangeEventHandler(object sender, T_IC_PERFORMANCE_LOGRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class T_IC_LOGGING_LOGDataTable : global::System.Data.TypedTableBase<T_IC_LOGGING_LOGRow> {
            
            private global::System.Data.DataColumn columnLOG_ID;
            
            private global::System.Data.DataColumn columnAPP_ID;
            
            private global::System.Data.DataColumn columnEVENT_ID;
            
            private global::System.Data.DataColumn columnPRIORITY;
            
            private global::System.Data.DataColumn columnSEVERITY;
            
            private global::System.Data.DataColumn columnTITLE;
            
            private global::System.Data.DataColumn columnLOG_TIME;
            
            private global::System.Data.DataColumn columnMACHINE_NAME;
            
            private global::System.Data.DataColumn columnAPP_DOMAIN_NAME;
            
            private global::System.Data.DataColumn columnPROCESS_ID;
            
            private global::System.Data.DataColumn columnPROCESS_NAME;
            
            private global::System.Data.DataColumn columnTHREAD_NAME;
            
            private global::System.Data.DataColumn columnWIN32_THREAD_ID;
            
            private global::System.Data.DataColumn columnMESSAGE;
            
            private global::System.Data.DataColumn columnFORMATTED_MESSAGE;
            
            private global::System.Data.DataColumn columnMETHOD_NAME;
            
            private global::System.Data.DataColumn columnACTIVITY_ID;
            
            private global::System.Data.DataColumn columnTRACING_START_TICKS;
            
            private global::System.Data.DataColumn columnTRACING_END_TICKS;
            
            private global::System.Data.DataColumn columnSECONDS_ELAPSED;
            
            private global::System.Data.DataColumn columnUSER_NAME;
            
            private global::System.Data.DataColumn columnIP_ADDRESS;
            
            private global::System.Data.DataColumn columnUSER_ROLES;
            
            private global::System.Data.DataColumn columnUSER_GRAPHIC_AREA;
            
            private global::System.Data.DataColumn columnMODULE_ID;
            
            private global::System.Data.DataColumn columnFUNCTION_ID;
            
            private global::System.Data.DataColumn columnCOMPONENT;
            
            private global::System.Data.DataColumn columnPARAMETER_VALUES;
            
            private global::System.Data.DataColumn columnSTART_DATE;
            
            private global::System.Data.DataColumn columnEND_DATE;
            
            private global::System.Data.DataColumn columnORGANIZATION;
            
            private global::System.Data.DataColumn columnCATEGORY_NAME;
            
            private global::System.Data.DataColumn columnOFFICE;
            
            private global::System.Data.DataColumn columnINSTANCE_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IC_LOGGING_LOGDataTable() {
                this.TableName = "T_IC_LOGGING_LOG";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal T_IC_LOGGING_LOGDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected T_IC_LOGGING_LOGDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOG_IDColumn {
                get {
                    return this.columnLOG_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn APP_IDColumn {
                get {
                    return this.columnAPP_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EVENT_IDColumn {
                get {
                    return this.columnEVENT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRIORITYColumn {
                get {
                    return this.columnPRIORITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SEVERITYColumn {
                get {
                    return this.columnSEVERITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TITLEColumn {
                get {
                    return this.columnTITLE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOG_TIMEColumn {
                get {
                    return this.columnLOG_TIME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MACHINE_NAMEColumn {
                get {
                    return this.columnMACHINE_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn APP_DOMAIN_NAMEColumn {
                get {
                    return this.columnAPP_DOMAIN_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PROCESS_IDColumn {
                get {
                    return this.columnPROCESS_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PROCESS_NAMEColumn {
                get {
                    return this.columnPROCESS_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn THREAD_NAMEColumn {
                get {
                    return this.columnTHREAD_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WIN32_THREAD_IDColumn {
                get {
                    return this.columnWIN32_THREAD_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MESSAGEColumn {
                get {
                    return this.columnMESSAGE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FORMATTED_MESSAGEColumn {
                get {
                    return this.columnFORMATTED_MESSAGE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn METHOD_NAMEColumn {
                get {
                    return this.columnMETHOD_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ACTIVITY_IDColumn {
                get {
                    return this.columnACTIVITY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TRACING_START_TICKSColumn {
                get {
                    return this.columnTRACING_START_TICKS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TRACING_END_TICKSColumn {
                get {
                    return this.columnTRACING_END_TICKS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SECONDS_ELAPSEDColumn {
                get {
                    return this.columnSECONDS_ELAPSED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USER_NAMEColumn {
                get {
                    return this.columnUSER_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IP_ADDRESSColumn {
                get {
                    return this.columnIP_ADDRESS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USER_ROLESColumn {
                get {
                    return this.columnUSER_ROLES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USER_GRAPHIC_AREAColumn {
                get {
                    return this.columnUSER_GRAPHIC_AREA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MODULE_IDColumn {
                get {
                    return this.columnMODULE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FUNCTION_IDColumn {
                get {
                    return this.columnFUNCTION_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPONENTColumn {
                get {
                    return this.columnCOMPONENT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PARAMETER_VALUESColumn {
                get {
                    return this.columnPARAMETER_VALUES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn START_DATEColumn {
                get {
                    return this.columnSTART_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn END_DATEColumn {
                get {
                    return this.columnEND_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORGANIZATIONColumn {
                get {
                    return this.columnORGANIZATION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CATEGORY_NAMEColumn {
                get {
                    return this.columnCATEGORY_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OFFICEColumn {
                get {
                    return this.columnOFFICE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INSTANCE_IDColumn {
                get {
                    return this.columnINSTANCE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IC_LOGGING_LOGRow this[int index] {
                get {
                    return ((T_IC_LOGGING_LOGRow)(this.Rows[index]));
                }
            }
            
            public event T_IC_LOGGING_LOGRowChangeEventHandler T_IC_LOGGING_LOGRowChanging;
            
            public event T_IC_LOGGING_LOGRowChangeEventHandler T_IC_LOGGING_LOGRowChanged;
            
            public event T_IC_LOGGING_LOGRowChangeEventHandler T_IC_LOGGING_LOGRowDeleting;
            
            public event T_IC_LOGGING_LOGRowChangeEventHandler T_IC_LOGGING_LOGRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddT_IC_LOGGING_LOGRow(T_IC_LOGGING_LOGRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IC_LOGGING_LOGRow AddT_IC_LOGGING_LOGRow(
                        string APP_ID, 
                        int EVENT_ID, 
                        int PRIORITY, 
                        string SEVERITY, 
                        string TITLE, 
                        System.DateTime LOG_TIME, 
                        string MACHINE_NAME, 
                        string APP_DOMAIN_NAME, 
                        string PROCESS_ID, 
                        string PROCESS_NAME, 
                        string THREAD_NAME, 
                        string WIN32_THREAD_ID, 
                        string MESSAGE, 
                        string FORMATTED_MESSAGE, 
                        string METHOD_NAME, 
                        string ACTIVITY_ID, 
                        string TRACING_START_TICKS, 
                        string TRACING_END_TICKS, 
                        decimal SECONDS_ELAPSED, 
                        string USER_NAME, 
                        string IP_ADDRESS, 
                        string USER_ROLES, 
                        string USER_GRAPHIC_AREA, 
                        string MODULE_ID, 
                        string FUNCTION_ID, 
                        string COMPONENT, 
                        string PARAMETER_VALUES, 
                        System.DateTime START_DATE, 
                        System.DateTime END_DATE, 
                        string ORGANIZATION, 
                        string CATEGORY_NAME, 
                        string OFFICE, 
                        string INSTANCE_ID) {
                T_IC_LOGGING_LOGRow rowT_IC_LOGGING_LOGRow = ((T_IC_LOGGING_LOGRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        APP_ID,
                        EVENT_ID,
                        PRIORITY,
                        SEVERITY,
                        TITLE,
                        LOG_TIME,
                        MACHINE_NAME,
                        APP_DOMAIN_NAME,
                        PROCESS_ID,
                        PROCESS_NAME,
                        THREAD_NAME,
                        WIN32_THREAD_ID,
                        MESSAGE,
                        FORMATTED_MESSAGE,
                        METHOD_NAME,
                        ACTIVITY_ID,
                        TRACING_START_TICKS,
                        TRACING_END_TICKS,
                        SECONDS_ELAPSED,
                        USER_NAME,
                        IP_ADDRESS,
                        USER_ROLES,
                        USER_GRAPHIC_AREA,
                        MODULE_ID,
                        FUNCTION_ID,
                        COMPONENT,
                        PARAMETER_VALUES,
                        START_DATE,
                        END_DATE,
                        ORGANIZATION,
                        CATEGORY_NAME,
                        OFFICE,
                        INSTANCE_ID};
                rowT_IC_LOGGING_LOGRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowT_IC_LOGGING_LOGRow);
                return rowT_IC_LOGGING_LOGRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IC_LOGGING_LOGRow FindByLOG_ID(int LOG_ID) {
                return ((T_IC_LOGGING_LOGRow)(this.Rows.Find(new object[] {
                            LOG_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                T_IC_LOGGING_LOGDataTable cln = ((T_IC_LOGGING_LOGDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new T_IC_LOGGING_LOGDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLOG_ID = base.Columns["LOG_ID"];
                this.columnAPP_ID = base.Columns["APP_ID"];
                this.columnEVENT_ID = base.Columns["EVENT_ID"];
                this.columnPRIORITY = base.Columns["PRIORITY"];
                this.columnSEVERITY = base.Columns["SEVERITY"];
                this.columnTITLE = base.Columns["TITLE"];
                this.columnLOG_TIME = base.Columns["LOG_TIME"];
                this.columnMACHINE_NAME = base.Columns["MACHINE_NAME"];
                this.columnAPP_DOMAIN_NAME = base.Columns["APP_DOMAIN_NAME"];
                this.columnPROCESS_ID = base.Columns["PROCESS_ID"];
                this.columnPROCESS_NAME = base.Columns["PROCESS_NAME"];
                this.columnTHREAD_NAME = base.Columns["THREAD_NAME"];
                this.columnWIN32_THREAD_ID = base.Columns["WIN32_THREAD_ID"];
                this.columnMESSAGE = base.Columns["MESSAGE"];
                this.columnFORMATTED_MESSAGE = base.Columns["FORMATTED_MESSAGE"];
                this.columnMETHOD_NAME = base.Columns["METHOD_NAME"];
                this.columnACTIVITY_ID = base.Columns["ACTIVITY_ID"];
                this.columnTRACING_START_TICKS = base.Columns["TRACING_START_TICKS"];
                this.columnTRACING_END_TICKS = base.Columns["TRACING_END_TICKS"];
                this.columnSECONDS_ELAPSED = base.Columns["SECONDS_ELAPSED"];
                this.columnUSER_NAME = base.Columns["USER_NAME"];
                this.columnIP_ADDRESS = base.Columns["IP_ADDRESS"];
                this.columnUSER_ROLES = base.Columns["USER_ROLES"];
                this.columnUSER_GRAPHIC_AREA = base.Columns["USER_GRAPHIC_AREA"];
                this.columnMODULE_ID = base.Columns["MODULE_ID"];
                this.columnFUNCTION_ID = base.Columns["FUNCTION_ID"];
                this.columnCOMPONENT = base.Columns["COMPONENT"];
                this.columnPARAMETER_VALUES = base.Columns["PARAMETER_VALUES"];
                this.columnSTART_DATE = base.Columns["START_DATE"];
                this.columnEND_DATE = base.Columns["END_DATE"];
                this.columnORGANIZATION = base.Columns["ORGANIZATION"];
                this.columnCATEGORY_NAME = base.Columns["CATEGORY_NAME"];
                this.columnOFFICE = base.Columns["OFFICE"];
                this.columnINSTANCE_ID = base.Columns["INSTANCE_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLOG_ID = new global::System.Data.DataColumn("LOG_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOG_ID);
                this.columnAPP_ID = new global::System.Data.DataColumn("APP_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAPP_ID);
                this.columnEVENT_ID = new global::System.Data.DataColumn("EVENT_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEVENT_ID);
                this.columnPRIORITY = new global::System.Data.DataColumn("PRIORITY", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRIORITY);
                this.columnSEVERITY = new global::System.Data.DataColumn("SEVERITY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSEVERITY);
                this.columnTITLE = new global::System.Data.DataColumn("TITLE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTITLE);
                this.columnLOG_TIME = new global::System.Data.DataColumn("LOG_TIME", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOG_TIME);
                this.columnMACHINE_NAME = new global::System.Data.DataColumn("MACHINE_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMACHINE_NAME);
                this.columnAPP_DOMAIN_NAME = new global::System.Data.DataColumn("APP_DOMAIN_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAPP_DOMAIN_NAME);
                this.columnPROCESS_ID = new global::System.Data.DataColumn("PROCESS_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPROCESS_ID);
                this.columnPROCESS_NAME = new global::System.Data.DataColumn("PROCESS_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPROCESS_NAME);
                this.columnTHREAD_NAME = new global::System.Data.DataColumn("THREAD_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTHREAD_NAME);
                this.columnWIN32_THREAD_ID = new global::System.Data.DataColumn("WIN32_THREAD_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWIN32_THREAD_ID);
                this.columnMESSAGE = new global::System.Data.DataColumn("MESSAGE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMESSAGE);
                this.columnFORMATTED_MESSAGE = new global::System.Data.DataColumn("FORMATTED_MESSAGE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFORMATTED_MESSAGE);
                this.columnMETHOD_NAME = new global::System.Data.DataColumn("METHOD_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMETHOD_NAME);
                this.columnACTIVITY_ID = new global::System.Data.DataColumn("ACTIVITY_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACTIVITY_ID);
                this.columnTRACING_START_TICKS = new global::System.Data.DataColumn("TRACING_START_TICKS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRACING_START_TICKS);
                this.columnTRACING_END_TICKS = new global::System.Data.DataColumn("TRACING_END_TICKS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRACING_END_TICKS);
                this.columnSECONDS_ELAPSED = new global::System.Data.DataColumn("SECONDS_ELAPSED", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSECONDS_ELAPSED);
                this.columnUSER_NAME = new global::System.Data.DataColumn("USER_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER_NAME);
                this.columnIP_ADDRESS = new global::System.Data.DataColumn("IP_ADDRESS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIP_ADDRESS);
                this.columnUSER_ROLES = new global::System.Data.DataColumn("USER_ROLES", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER_ROLES);
                this.columnUSER_GRAPHIC_AREA = new global::System.Data.DataColumn("USER_GRAPHIC_AREA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER_GRAPHIC_AREA);
                this.columnMODULE_ID = new global::System.Data.DataColumn("MODULE_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMODULE_ID);
                this.columnFUNCTION_ID = new global::System.Data.DataColumn("FUNCTION_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFUNCTION_ID);
                this.columnCOMPONENT = new global::System.Data.DataColumn("COMPONENT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPONENT);
                this.columnPARAMETER_VALUES = new global::System.Data.DataColumn("PARAMETER_VALUES", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPARAMETER_VALUES);
                this.columnSTART_DATE = new global::System.Data.DataColumn("START_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTART_DATE);
                this.columnEND_DATE = new global::System.Data.DataColumn("END_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEND_DATE);
                this.columnORGANIZATION = new global::System.Data.DataColumn("ORGANIZATION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORGANIZATION);
                this.columnCATEGORY_NAME = new global::System.Data.DataColumn("CATEGORY_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGORY_NAME);
                this.columnOFFICE = new global::System.Data.DataColumn("OFFICE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOFFICE);
                this.columnINSTANCE_ID = new global::System.Data.DataColumn("INSTANCE_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINSTANCE_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLOG_ID}, true));
                this.columnLOG_ID.AutoIncrement = true;
                this.columnLOG_ID.AutoIncrementSeed = -1;
                this.columnLOG_ID.AutoIncrementStep = -1;
                this.columnLOG_ID.AllowDBNull = false;
                this.columnLOG_ID.ReadOnly = true;
                this.columnLOG_ID.Unique = true;
                this.columnAPP_ID.AllowDBNull = false;
                this.columnAPP_ID.MaxLength = 50;
                this.columnPRIORITY.AllowDBNull = false;
                this.columnSEVERITY.AllowDBNull = false;
                this.columnSEVERITY.MaxLength = 32;
                this.columnTITLE.AllowDBNull = false;
                this.columnTITLE.MaxLength = 256;
                this.columnLOG_TIME.AllowDBNull = false;
                this.columnMACHINE_NAME.AllowDBNull = false;
                this.columnMACHINE_NAME.MaxLength = 32;
                this.columnAPP_DOMAIN_NAME.AllowDBNull = false;
                this.columnAPP_DOMAIN_NAME.MaxLength = 512;
                this.columnPROCESS_ID.AllowDBNull = false;
                this.columnPROCESS_ID.MaxLength = 256;
                this.columnPROCESS_NAME.AllowDBNull = false;
                this.columnPROCESS_NAME.MaxLength = 512;
                this.columnTHREAD_NAME.MaxLength = 512;
                this.columnWIN32_THREAD_ID.MaxLength = 128;
                this.columnMETHOD_NAME.MaxLength = 128;
                this.columnACTIVITY_ID.MaxLength = 128;
                this.columnTRACING_START_TICKS.MaxLength = 128;
                this.columnTRACING_END_TICKS.MaxLength = 128;
                this.columnUSER_NAME.MaxLength = 256;
                this.columnIP_ADDRESS.MaxLength = 128;
                this.columnUSER_ROLES.MaxLength = 512;
                this.columnUSER_GRAPHIC_AREA.MaxLength = 128;
                this.columnMODULE_ID.MaxLength = 128;
                this.columnFUNCTION_ID.MaxLength = 128;
                this.columnCOMPONENT.MaxLength = 50;
                this.columnORGANIZATION.MaxLength = 128;
                this.columnOFFICE.MaxLength = 128;
                this.columnINSTANCE_ID.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IC_LOGGING_LOGRow NewT_IC_LOGGING_LOGRow() {
                return ((T_IC_LOGGING_LOGRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new T_IC_LOGGING_LOGRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(T_IC_LOGGING_LOGRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.T_IC_LOGGING_LOGRowChanged != null)) {
                    this.T_IC_LOGGING_LOGRowChanged(this, new T_IC_LOGGING_LOGRowChangeEvent(((T_IC_LOGGING_LOGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.T_IC_LOGGING_LOGRowChanging != null)) {
                    this.T_IC_LOGGING_LOGRowChanging(this, new T_IC_LOGGING_LOGRowChangeEvent(((T_IC_LOGGING_LOGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.T_IC_LOGGING_LOGRowDeleted != null)) {
                    this.T_IC_LOGGING_LOGRowDeleted(this, new T_IC_LOGGING_LOGRowChangeEvent(((T_IC_LOGGING_LOGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.T_IC_LOGGING_LOGRowDeleting != null)) {
                    this.T_IC_LOGGING_LOGRowDeleting(this, new T_IC_LOGGING_LOGRowChangeEvent(((T_IC_LOGGING_LOGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveT_IC_LOGGING_LOGRow(T_IC_LOGGING_LOGRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                LoggingViewDataSet ds = new LoggingViewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "T_IC_LOGGING_LOGDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class T_IC_PERFORMANCE_LOGDataTable : global::System.Data.TypedTableBase<T_IC_PERFORMANCE_LOGRow> {
            
            private global::System.Data.DataColumn columnSTART_DATE;
            
            private global::System.Data.DataColumn columnEND_DATE;
            
            private global::System.Data.DataColumn columnSECONDS_ELAPSED;
            
            private global::System.Data.DataColumn columnMODULE_ID;
            
            private global::System.Data.DataColumn columnFUNCTION_ID;
            
            private global::System.Data.DataColumn columnCOMPONENT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IC_PERFORMANCE_LOGDataTable() {
                this.TableName = "T_IC_PERFORMANCE_LOG";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal T_IC_PERFORMANCE_LOGDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected T_IC_PERFORMANCE_LOGDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn START_DATEColumn {
                get {
                    return this.columnSTART_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn END_DATEColumn {
                get {
                    return this.columnEND_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SECONDS_ELAPSEDColumn {
                get {
                    return this.columnSECONDS_ELAPSED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MODULE_IDColumn {
                get {
                    return this.columnMODULE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FUNCTION_IDColumn {
                get {
                    return this.columnFUNCTION_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPONENTColumn {
                get {
                    return this.columnCOMPONENT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IC_PERFORMANCE_LOGRow this[int index] {
                get {
                    return ((T_IC_PERFORMANCE_LOGRow)(this.Rows[index]));
                }
            }
            
            public event T_IC_PERFORMANCE_LOGRowChangeEventHandler T_IC_PERFORMANCE_LOGRowChanging;
            
            public event T_IC_PERFORMANCE_LOGRowChangeEventHandler T_IC_PERFORMANCE_LOGRowChanged;
            
            public event T_IC_PERFORMANCE_LOGRowChangeEventHandler T_IC_PERFORMANCE_LOGRowDeleting;
            
            public event T_IC_PERFORMANCE_LOGRowChangeEventHandler T_IC_PERFORMANCE_LOGRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddT_IC_PERFORMANCE_LOGRow(T_IC_PERFORMANCE_LOGRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IC_PERFORMANCE_LOGRow AddT_IC_PERFORMANCE_LOGRow(System.DateTime START_DATE, System.DateTime END_DATE, decimal SECONDS_ELAPSED, string MODULE_ID, string FUNCTION_ID, string COMPONENT) {
                T_IC_PERFORMANCE_LOGRow rowT_IC_PERFORMANCE_LOGRow = ((T_IC_PERFORMANCE_LOGRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        START_DATE,
                        END_DATE,
                        SECONDS_ELAPSED,
                        MODULE_ID,
                        FUNCTION_ID,
                        COMPONENT};
                rowT_IC_PERFORMANCE_LOGRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowT_IC_PERFORMANCE_LOGRow);
                return rowT_IC_PERFORMANCE_LOGRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                T_IC_PERFORMANCE_LOGDataTable cln = ((T_IC_PERFORMANCE_LOGDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new T_IC_PERFORMANCE_LOGDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSTART_DATE = base.Columns["START_DATE"];
                this.columnEND_DATE = base.Columns["END_DATE"];
                this.columnSECONDS_ELAPSED = base.Columns["SECONDS_ELAPSED"];
                this.columnMODULE_ID = base.Columns["MODULE_ID"];
                this.columnFUNCTION_ID = base.Columns["FUNCTION_ID"];
                this.columnCOMPONENT = base.Columns["COMPONENT"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSTART_DATE = new global::System.Data.DataColumn("START_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTART_DATE);
                this.columnEND_DATE = new global::System.Data.DataColumn("END_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEND_DATE);
                this.columnSECONDS_ELAPSED = new global::System.Data.DataColumn("SECONDS_ELAPSED", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSECONDS_ELAPSED);
                this.columnMODULE_ID = new global::System.Data.DataColumn("MODULE_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMODULE_ID);
                this.columnFUNCTION_ID = new global::System.Data.DataColumn("FUNCTION_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFUNCTION_ID);
                this.columnCOMPONENT = new global::System.Data.DataColumn("COMPONENT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPONENT);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IC_PERFORMANCE_LOGRow NewT_IC_PERFORMANCE_LOGRow() {
                return ((T_IC_PERFORMANCE_LOGRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new T_IC_PERFORMANCE_LOGRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(T_IC_PERFORMANCE_LOGRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.T_IC_PERFORMANCE_LOGRowChanged != null)) {
                    this.T_IC_PERFORMANCE_LOGRowChanged(this, new T_IC_PERFORMANCE_LOGRowChangeEvent(((T_IC_PERFORMANCE_LOGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.T_IC_PERFORMANCE_LOGRowChanging != null)) {
                    this.T_IC_PERFORMANCE_LOGRowChanging(this, new T_IC_PERFORMANCE_LOGRowChangeEvent(((T_IC_PERFORMANCE_LOGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.T_IC_PERFORMANCE_LOGRowDeleted != null)) {
                    this.T_IC_PERFORMANCE_LOGRowDeleted(this, new T_IC_PERFORMANCE_LOGRowChangeEvent(((T_IC_PERFORMANCE_LOGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.T_IC_PERFORMANCE_LOGRowDeleting != null)) {
                    this.T_IC_PERFORMANCE_LOGRowDeleting(this, new T_IC_PERFORMANCE_LOGRowChangeEvent(((T_IC_PERFORMANCE_LOGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveT_IC_PERFORMANCE_LOGRow(T_IC_PERFORMANCE_LOGRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                LoggingViewDataSet ds = new LoggingViewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "T_IC_PERFORMANCE_LOGDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class T_IC_LOGGING_LOGRow : global::System.Data.DataRow {
            
            private T_IC_LOGGING_LOGDataTable tableT_IC_LOGGING_LOG;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal T_IC_LOGGING_LOGRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableT_IC_LOGGING_LOG = ((T_IC_LOGGING_LOGDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LOG_ID {
                get {
                    return ((int)(this[this.tableT_IC_LOGGING_LOG.LOG_IDColumn]));
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.LOG_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string APP_ID {
                get {
                    return ((string)(this[this.tableT_IC_LOGGING_LOG.APP_IDColumn]));
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.APP_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EVENT_ID {
                get {
                    try {
                        return ((int)(this[this.tableT_IC_LOGGING_LOG.EVENT_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EVENT_ID\' in table \'T_IC_LOGGING_LOG\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.EVENT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PRIORITY {
                get {
                    return ((int)(this[this.tableT_IC_LOGGING_LOG.PRIORITYColumn]));
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.PRIORITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SEVERITY {
                get {
                    return ((string)(this[this.tableT_IC_LOGGING_LOG.SEVERITYColumn]));
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.SEVERITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TITLE {
                get {
                    return ((string)(this[this.tableT_IC_LOGGING_LOG.TITLEColumn]));
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.TITLEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LOG_TIME {
                get {
                    return ((global::System.DateTime)(this[this.tableT_IC_LOGGING_LOG.LOG_TIMEColumn]));
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.LOG_TIMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MACHINE_NAME {
                get {
                    return ((string)(this[this.tableT_IC_LOGGING_LOG.MACHINE_NAMEColumn]));
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.MACHINE_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string APP_DOMAIN_NAME {
                get {
                    return ((string)(this[this.tableT_IC_LOGGING_LOG.APP_DOMAIN_NAMEColumn]));
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.APP_DOMAIN_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PROCESS_ID {
                get {
                    return ((string)(this[this.tableT_IC_LOGGING_LOG.PROCESS_IDColumn]));
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.PROCESS_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PROCESS_NAME {
                get {
                    return ((string)(this[this.tableT_IC_LOGGING_LOG.PROCESS_NAMEColumn]));
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.PROCESS_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string THREAD_NAME {
                get {
                    if (this.IsTHREAD_NAMENull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_LOGGING_LOG.THREAD_NAMEColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.THREAD_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WIN32_THREAD_ID {
                get {
                    if (this.IsWIN32_THREAD_IDNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_LOGGING_LOG.WIN32_THREAD_IDColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.WIN32_THREAD_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MESSAGE {
                get {
                    if (this.IsMESSAGENull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_LOGGING_LOG.MESSAGEColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.MESSAGEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FORMATTED_MESSAGE {
                get {
                    if (this.IsFORMATTED_MESSAGENull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_LOGGING_LOG.FORMATTED_MESSAGEColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.FORMATTED_MESSAGEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string METHOD_NAME {
                get {
                    if (this.IsMETHOD_NAMENull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_LOGGING_LOG.METHOD_NAMEColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.METHOD_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ACTIVITY_ID {
                get {
                    if (this.IsACTIVITY_IDNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_LOGGING_LOG.ACTIVITY_IDColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.ACTIVITY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TRACING_START_TICKS {
                get {
                    if (this.IsTRACING_START_TICKSNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_LOGGING_LOG.TRACING_START_TICKSColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.TRACING_START_TICKSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TRACING_END_TICKS {
                get {
                    if (this.IsTRACING_END_TICKSNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_LOGGING_LOG.TRACING_END_TICKSColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.TRACING_END_TICKSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SECONDS_ELAPSED {
                get {
                    try {
                        return ((decimal)(this[this.tableT_IC_LOGGING_LOG.SECONDS_ELAPSEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SECONDS_ELAPSED\' in table \'T_IC_LOGGING_LOG\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.SECONDS_ELAPSEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USER_NAME {
                get {
                    if (this.IsUSER_NAMENull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_LOGGING_LOG.USER_NAMEColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.USER_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IP_ADDRESS {
                get {
                    if (this.IsIP_ADDRESSNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_LOGGING_LOG.IP_ADDRESSColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.IP_ADDRESSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USER_ROLES {
                get {
                    if (this.IsUSER_ROLESNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_LOGGING_LOG.USER_ROLESColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.USER_ROLESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USER_GRAPHIC_AREA {
                get {
                    if (this.IsUSER_GRAPHIC_AREANull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_LOGGING_LOG.USER_GRAPHIC_AREAColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.USER_GRAPHIC_AREAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MODULE_ID {
                get {
                    if (this.IsMODULE_IDNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_LOGGING_LOG.MODULE_IDColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.MODULE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FUNCTION_ID {
                get {
                    if (this.IsFUNCTION_IDNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_LOGGING_LOG.FUNCTION_IDColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.FUNCTION_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COMPONENT {
                get {
                    if (this.IsCOMPONENTNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_LOGGING_LOG.COMPONENTColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.COMPONENTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PARAMETER_VALUES {
                get {
                    if (this.IsPARAMETER_VALUESNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_LOGGING_LOG.PARAMETER_VALUESColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.PARAMETER_VALUESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime START_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableT_IC_LOGGING_LOG.START_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'START_DATE\' in table \'T_IC_LOGGING_LOG\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.START_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime END_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableT_IC_LOGGING_LOG.END_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'END_DATE\' in table \'T_IC_LOGGING_LOG\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.END_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORGANIZATION {
                get {
                    if (this.IsORGANIZATIONNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_LOGGING_LOG.ORGANIZATIONColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.ORGANIZATIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CATEGORY_NAME {
                get {
                    if (this.IsCATEGORY_NAMENull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_LOGGING_LOG.CATEGORY_NAMEColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.CATEGORY_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OFFICE {
                get {
                    if (this.IsOFFICENull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_LOGGING_LOG.OFFICEColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.OFFICEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INSTANCE_ID {
                get {
                    if (this.IsINSTANCE_IDNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_LOGGING_LOG.INSTANCE_IDColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_LOGGING_LOG.INSTANCE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEVENT_IDNull() {
                return this.IsNull(this.tableT_IC_LOGGING_LOG.EVENT_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEVENT_IDNull() {
                this[this.tableT_IC_LOGGING_LOG.EVENT_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTHREAD_NAMENull() {
                return this.IsNull(this.tableT_IC_LOGGING_LOG.THREAD_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTHREAD_NAMENull() {
                this[this.tableT_IC_LOGGING_LOG.THREAD_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWIN32_THREAD_IDNull() {
                return this.IsNull(this.tableT_IC_LOGGING_LOG.WIN32_THREAD_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWIN32_THREAD_IDNull() {
                this[this.tableT_IC_LOGGING_LOG.WIN32_THREAD_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMESSAGENull() {
                return this.IsNull(this.tableT_IC_LOGGING_LOG.MESSAGEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMESSAGENull() {
                this[this.tableT_IC_LOGGING_LOG.MESSAGEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFORMATTED_MESSAGENull() {
                return this.IsNull(this.tableT_IC_LOGGING_LOG.FORMATTED_MESSAGEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFORMATTED_MESSAGENull() {
                this[this.tableT_IC_LOGGING_LOG.FORMATTED_MESSAGEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMETHOD_NAMENull() {
                return this.IsNull(this.tableT_IC_LOGGING_LOG.METHOD_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMETHOD_NAMENull() {
                this[this.tableT_IC_LOGGING_LOG.METHOD_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsACTIVITY_IDNull() {
                return this.IsNull(this.tableT_IC_LOGGING_LOG.ACTIVITY_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetACTIVITY_IDNull() {
                this[this.tableT_IC_LOGGING_LOG.ACTIVITY_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTRACING_START_TICKSNull() {
                return this.IsNull(this.tableT_IC_LOGGING_LOG.TRACING_START_TICKSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTRACING_START_TICKSNull() {
                this[this.tableT_IC_LOGGING_LOG.TRACING_START_TICKSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTRACING_END_TICKSNull() {
                return this.IsNull(this.tableT_IC_LOGGING_LOG.TRACING_END_TICKSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTRACING_END_TICKSNull() {
                this[this.tableT_IC_LOGGING_LOG.TRACING_END_TICKSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSECONDS_ELAPSEDNull() {
                return this.IsNull(this.tableT_IC_LOGGING_LOG.SECONDS_ELAPSEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSECONDS_ELAPSEDNull() {
                this[this.tableT_IC_LOGGING_LOG.SECONDS_ELAPSEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSER_NAMENull() {
                return this.IsNull(this.tableT_IC_LOGGING_LOG.USER_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSER_NAMENull() {
                this[this.tableT_IC_LOGGING_LOG.USER_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIP_ADDRESSNull() {
                return this.IsNull(this.tableT_IC_LOGGING_LOG.IP_ADDRESSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIP_ADDRESSNull() {
                this[this.tableT_IC_LOGGING_LOG.IP_ADDRESSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSER_ROLESNull() {
                return this.IsNull(this.tableT_IC_LOGGING_LOG.USER_ROLESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSER_ROLESNull() {
                this[this.tableT_IC_LOGGING_LOG.USER_ROLESColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSER_GRAPHIC_AREANull() {
                return this.IsNull(this.tableT_IC_LOGGING_LOG.USER_GRAPHIC_AREAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSER_GRAPHIC_AREANull() {
                this[this.tableT_IC_LOGGING_LOG.USER_GRAPHIC_AREAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMODULE_IDNull() {
                return this.IsNull(this.tableT_IC_LOGGING_LOG.MODULE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMODULE_IDNull() {
                this[this.tableT_IC_LOGGING_LOG.MODULE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFUNCTION_IDNull() {
                return this.IsNull(this.tableT_IC_LOGGING_LOG.FUNCTION_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFUNCTION_IDNull() {
                this[this.tableT_IC_LOGGING_LOG.FUNCTION_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPONENTNull() {
                return this.IsNull(this.tableT_IC_LOGGING_LOG.COMPONENTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPONENTNull() {
                this[this.tableT_IC_LOGGING_LOG.COMPONENTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPARAMETER_VALUESNull() {
                return this.IsNull(this.tableT_IC_LOGGING_LOG.PARAMETER_VALUESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPARAMETER_VALUESNull() {
                this[this.tableT_IC_LOGGING_LOG.PARAMETER_VALUESColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTART_DATENull() {
                return this.IsNull(this.tableT_IC_LOGGING_LOG.START_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTART_DATENull() {
                this[this.tableT_IC_LOGGING_LOG.START_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEND_DATENull() {
                return this.IsNull(this.tableT_IC_LOGGING_LOG.END_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEND_DATENull() {
                this[this.tableT_IC_LOGGING_LOG.END_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORGANIZATIONNull() {
                return this.IsNull(this.tableT_IC_LOGGING_LOG.ORGANIZATIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORGANIZATIONNull() {
                this[this.tableT_IC_LOGGING_LOG.ORGANIZATIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCATEGORY_NAMENull() {
                return this.IsNull(this.tableT_IC_LOGGING_LOG.CATEGORY_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCATEGORY_NAMENull() {
                this[this.tableT_IC_LOGGING_LOG.CATEGORY_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOFFICENull() {
                return this.IsNull(this.tableT_IC_LOGGING_LOG.OFFICEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOFFICENull() {
                this[this.tableT_IC_LOGGING_LOG.OFFICEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINSTANCE_IDNull() {
                return this.IsNull(this.tableT_IC_LOGGING_LOG.INSTANCE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINSTANCE_IDNull() {
                this[this.tableT_IC_LOGGING_LOG.INSTANCE_IDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class T_IC_PERFORMANCE_LOGRow : global::System.Data.DataRow {
            
            private T_IC_PERFORMANCE_LOGDataTable tableT_IC_PERFORMANCE_LOG;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal T_IC_PERFORMANCE_LOGRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableT_IC_PERFORMANCE_LOG = ((T_IC_PERFORMANCE_LOGDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime START_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableT_IC_PERFORMANCE_LOG.START_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'START_DATE\' in table \'T_IC_PERFORMANCE_LOG\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_IC_PERFORMANCE_LOG.START_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime END_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableT_IC_PERFORMANCE_LOG.END_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'END_DATE\' in table \'T_IC_PERFORMANCE_LOG\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_IC_PERFORMANCE_LOG.END_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SECONDS_ELAPSED {
                get {
                    try {
                        return ((decimal)(this[this.tableT_IC_PERFORMANCE_LOG.SECONDS_ELAPSEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SECONDS_ELAPSED\' in table \'T_IC_PERFORMANCE_LOG\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableT_IC_PERFORMANCE_LOG.SECONDS_ELAPSEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MODULE_ID {
                get {
                    if (this.IsMODULE_IDNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_PERFORMANCE_LOG.MODULE_IDColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_PERFORMANCE_LOG.MODULE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FUNCTION_ID {
                get {
                    if (this.IsFUNCTION_IDNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_PERFORMANCE_LOG.FUNCTION_IDColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_PERFORMANCE_LOG.FUNCTION_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COMPONENT {
                get {
                    if (this.IsCOMPONENTNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableT_IC_PERFORMANCE_LOG.COMPONENTColumn]));
                    }
                }
                set {
                    this[this.tableT_IC_PERFORMANCE_LOG.COMPONENTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTART_DATENull() {
                return this.IsNull(this.tableT_IC_PERFORMANCE_LOG.START_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTART_DATENull() {
                this[this.tableT_IC_PERFORMANCE_LOG.START_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEND_DATENull() {
                return this.IsNull(this.tableT_IC_PERFORMANCE_LOG.END_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEND_DATENull() {
                this[this.tableT_IC_PERFORMANCE_LOG.END_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSECONDS_ELAPSEDNull() {
                return this.IsNull(this.tableT_IC_PERFORMANCE_LOG.SECONDS_ELAPSEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSECONDS_ELAPSEDNull() {
                this[this.tableT_IC_PERFORMANCE_LOG.SECONDS_ELAPSEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMODULE_IDNull() {
                return this.IsNull(this.tableT_IC_PERFORMANCE_LOG.MODULE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMODULE_IDNull() {
                this[this.tableT_IC_PERFORMANCE_LOG.MODULE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFUNCTION_IDNull() {
                return this.IsNull(this.tableT_IC_PERFORMANCE_LOG.FUNCTION_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFUNCTION_IDNull() {
                this[this.tableT_IC_PERFORMANCE_LOG.FUNCTION_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPONENTNull() {
                return this.IsNull(this.tableT_IC_PERFORMANCE_LOG.COMPONENTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPONENTNull() {
                this[this.tableT_IC_PERFORMANCE_LOG.COMPONENTColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class T_IC_LOGGING_LOGRowChangeEvent : global::System.EventArgs {
            
            private T_IC_LOGGING_LOGRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IC_LOGGING_LOGRowChangeEvent(T_IC_LOGGING_LOGRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IC_LOGGING_LOGRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class T_IC_PERFORMANCE_LOGRowChangeEvent : global::System.EventArgs {
            
            private T_IC_PERFORMANCE_LOGRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IC_PERFORMANCE_LOGRowChangeEvent(T_IC_PERFORMANCE_LOGRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public T_IC_PERFORMANCE_LOGRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591