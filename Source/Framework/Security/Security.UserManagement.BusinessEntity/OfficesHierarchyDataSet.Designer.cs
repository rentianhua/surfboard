//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3615
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace HiiP.Framework.Security.UserManagement.BusinessEntity {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("OfficesHierarchyDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class OfficesHierarchyDataSet : global::System.Data.DataSet {
        
        private LookupOrganisationalUnitHierarchyDataTable tableLookupOrganisationalUnitHierarchy;
        
        private OrganisationUserDataTable tableOrganisationUser;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OfficesHierarchyDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected OfficesHierarchyDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["LookupOrganisationalUnitHierarchy"] != null)) {
                    base.Tables.Add(new LookupOrganisationalUnitHierarchyDataTable(ds.Tables["LookupOrganisationalUnitHierarchy"]));
                }
                if ((ds.Tables["OrganisationUser"] != null)) {
                    base.Tables.Add(new OrganisationUserDataTable(ds.Tables["OrganisationUser"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LookupOrganisationalUnitHierarchyDataTable LookupOrganisationalUnitHierarchy {
            get {
                return this.tableLookupOrganisationalUnitHierarchy;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OrganisationUserDataTable OrganisationUser {
            get {
                return this.tableOrganisationUser;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            OfficesHierarchyDataSet cln = ((OfficesHierarchyDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["LookupOrganisationalUnitHierarchy"] != null)) {
                    base.Tables.Add(new LookupOrganisationalUnitHierarchyDataTable(ds.Tables["LookupOrganisationalUnitHierarchy"]));
                }
                if ((ds.Tables["OrganisationUser"] != null)) {
                    base.Tables.Add(new OrganisationUserDataTable(ds.Tables["OrganisationUser"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableLookupOrganisationalUnitHierarchy = ((LookupOrganisationalUnitHierarchyDataTable)(base.Tables["LookupOrganisationalUnitHierarchy"]));
            if ((initTable == true)) {
                if ((this.tableLookupOrganisationalUnitHierarchy != null)) {
                    this.tableLookupOrganisationalUnitHierarchy.InitVars();
                }
            }
            this.tableOrganisationUser = ((OrganisationUserDataTable)(base.Tables["OrganisationUser"]));
            if ((initTable == true)) {
                if ((this.tableOrganisationUser != null)) {
                    this.tableOrganisationUser.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "OfficesHierarchyDataSet";
            this.Prefix = "";
            this.Namespace = "http://hiip.ooh.dhs.vic.gov.au/OfficesHierarchyDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableLookupOrganisationalUnitHierarchy = new LookupOrganisationalUnitHierarchyDataTable();
            base.Tables.Add(this.tableLookupOrganisationalUnitHierarchy);
            this.tableOrganisationUser = new OrganisationUserDataTable();
            base.Tables.Add(this.tableOrganisationUser);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLookupOrganisationalUnitHierarchy() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOrganisationUser() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            OfficesHierarchyDataSet ds = new OfficesHierarchyDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void LookupOrganisationalUnitHierarchyRowChangeEventHandler(object sender, LookupOrganisationalUnitHierarchyRowChangeEvent e);
        
        public delegate void OrganisationUserRowChangeEventHandler(object sender, OrganisationUserRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LookupOrganisationalUnitHierarchyDataTable : global::System.Data.TypedTableBase<LookupOrganisationalUnitHierarchyRow> {
            
            private global::System.Data.DataColumn columnOrganisationalUnitHierarchyID;
            
            private global::System.Data.DataColumn columnOrganisationalUnitTypeID;
            
            private global::System.Data.DataColumn columnParentID;
            
            private global::System.Data.DataColumn columnCategory;
            
            private global::System.Data.DataColumn columnMapPath;
            
            private global::System.Data.DataColumn columnDepth;
            
            private global::System.Data.DataColumn columnOrganisationalUnitName;
            
            private global::System.Data.DataColumn columnOrganisationalUnitID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookupOrganisationalUnitHierarchyDataTable() {
                this.TableName = "LookupOrganisationalUnitHierarchy";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LookupOrganisationalUnitHierarchyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LookupOrganisationalUnitHierarchyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrganisationalUnitHierarchyIDColumn {
                get {
                    return this.columnOrganisationalUnitHierarchyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrganisationalUnitTypeIDColumn {
                get {
                    return this.columnOrganisationalUnitTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParentIDColumn {
                get {
                    return this.columnParentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MapPathColumn {
                get {
                    return this.columnMapPath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepthColumn {
                get {
                    return this.columnDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrganisationalUnitNameColumn {
                get {
                    return this.columnOrganisationalUnitName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrganisationalUnitIDColumn {
                get {
                    return this.columnOrganisationalUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookupOrganisationalUnitHierarchyRow this[int index] {
                get {
                    return ((LookupOrganisationalUnitHierarchyRow)(this.Rows[index]));
                }
            }
            
            public event LookupOrganisationalUnitHierarchyRowChangeEventHandler LookupOrganisationalUnitHierarchyRowChanging;
            
            public event LookupOrganisationalUnitHierarchyRowChangeEventHandler LookupOrganisationalUnitHierarchyRowChanged;
            
            public event LookupOrganisationalUnitHierarchyRowChangeEventHandler LookupOrganisationalUnitHierarchyRowDeleting;
            
            public event LookupOrganisationalUnitHierarchyRowChangeEventHandler LookupOrganisationalUnitHierarchyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLookupOrganisationalUnitHierarchyRow(LookupOrganisationalUnitHierarchyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookupOrganisationalUnitHierarchyRow AddLookupOrganisationalUnitHierarchyRow(int OrganisationalUnitTypeID, int ParentID, string Category, string MapPath, int Depth, string OrganisationalUnitName, string OrganisationalUnitID) {
                LookupOrganisationalUnitHierarchyRow rowLookupOrganisationalUnitHierarchyRow = ((LookupOrganisationalUnitHierarchyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        OrganisationalUnitTypeID,
                        ParentID,
                        Category,
                        MapPath,
                        Depth,
                        OrganisationalUnitName,
                        OrganisationalUnitID};
                rowLookupOrganisationalUnitHierarchyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLookupOrganisationalUnitHierarchyRow);
                return rowLookupOrganisationalUnitHierarchyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookupOrganisationalUnitHierarchyRow FindByOrganisationalUnitHierarchyID(int OrganisationalUnitHierarchyID) {
                return ((LookupOrganisationalUnitHierarchyRow)(this.Rows.Find(new object[] {
                            OrganisationalUnitHierarchyID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LookupOrganisationalUnitHierarchyDataTable cln = ((LookupOrganisationalUnitHierarchyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LookupOrganisationalUnitHierarchyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOrganisationalUnitHierarchyID = base.Columns["OrganisationalUnitHierarchyID"];
                this.columnOrganisationalUnitTypeID = base.Columns["OrganisationalUnitTypeID"];
                this.columnParentID = base.Columns["ParentID"];
                this.columnCategory = base.Columns["Category"];
                this.columnMapPath = base.Columns["MapPath"];
                this.columnDepth = base.Columns["Depth"];
                this.columnOrganisationalUnitName = base.Columns["OrganisationalUnitName"];
                this.columnOrganisationalUnitID = base.Columns["OrganisationalUnitID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOrganisationalUnitHierarchyID = new global::System.Data.DataColumn("OrganisationalUnitHierarchyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrganisationalUnitHierarchyID);
                this.columnOrganisationalUnitTypeID = new global::System.Data.DataColumn("OrganisationalUnitTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrganisationalUnitTypeID);
                this.columnParentID = new global::System.Data.DataColumn("ParentID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParentID);
                this.columnCategory = new global::System.Data.DataColumn("Category", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory);
                this.columnMapPath = new global::System.Data.DataColumn("MapPath", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapPath);
                this.columnDepth = new global::System.Data.DataColumn("Depth", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepth);
                this.columnOrganisationalUnitName = new global::System.Data.DataColumn("OrganisationalUnitName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrganisationalUnitName);
                this.columnOrganisationalUnitID = new global::System.Data.DataColumn("OrganisationalUnitID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrganisationalUnitID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnOrganisationalUnitHierarchyID}, true));
                this.columnOrganisationalUnitHierarchyID.AutoIncrement = true;
                this.columnOrganisationalUnitHierarchyID.AutoIncrementSeed = -1;
                this.columnOrganisationalUnitHierarchyID.AutoIncrementStep = -1;
                this.columnOrganisationalUnitHierarchyID.AllowDBNull = false;
                this.columnOrganisationalUnitHierarchyID.ReadOnly = true;
                this.columnOrganisationalUnitHierarchyID.Unique = true;
                this.columnOrganisationalUnitTypeID.AllowDBNull = false;
                this.columnCategory.AllowDBNull = false;
                this.columnCategory.MaxLength = 50;
                this.columnMapPath.MaxLength = 256;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookupOrganisationalUnitHierarchyRow NewLookupOrganisationalUnitHierarchyRow() {
                return ((LookupOrganisationalUnitHierarchyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LookupOrganisationalUnitHierarchyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LookupOrganisationalUnitHierarchyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LookupOrganisationalUnitHierarchyRowChanged != null)) {
                    this.LookupOrganisationalUnitHierarchyRowChanged(this, new LookupOrganisationalUnitHierarchyRowChangeEvent(((LookupOrganisationalUnitHierarchyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LookupOrganisationalUnitHierarchyRowChanging != null)) {
                    this.LookupOrganisationalUnitHierarchyRowChanging(this, new LookupOrganisationalUnitHierarchyRowChangeEvent(((LookupOrganisationalUnitHierarchyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LookupOrganisationalUnitHierarchyRowDeleted != null)) {
                    this.LookupOrganisationalUnitHierarchyRowDeleted(this, new LookupOrganisationalUnitHierarchyRowChangeEvent(((LookupOrganisationalUnitHierarchyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LookupOrganisationalUnitHierarchyRowDeleting != null)) {
                    this.LookupOrganisationalUnitHierarchyRowDeleting(this, new LookupOrganisationalUnitHierarchyRowChangeEvent(((LookupOrganisationalUnitHierarchyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLookupOrganisationalUnitHierarchyRow(LookupOrganisationalUnitHierarchyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                OfficesHierarchyDataSet ds = new OfficesHierarchyDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LookupOrganisationalUnitHierarchyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OrganisationUserDataTable : global::System.Data.TypedTableBase<OrganisationUserRow> {
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnNodeID;
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnVersionNO;
            
            private global::System.Data.DataColumn columnTransactionID;
            
            private global::System.Data.DataColumn columnCreatedBY;
            
            private global::System.Data.DataColumn columnCreatedTime;
            
            private global::System.Data.DataColumn columnLastUpdatedBy;
            
            private global::System.Data.DataColumn columnLastUpdatedTime;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrganisationUserDataTable() {
                this.TableName = "OrganisationUser";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OrganisationUserDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OrganisationUserDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NodeIDColumn {
                get {
                    return this.columnNodeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VersionNOColumn {
                get {
                    return this.columnVersionNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransactionIDColumn {
                get {
                    return this.columnTransactionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedBYColumn {
                get {
                    return this.columnCreatedBY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedTimeColumn {
                get {
                    return this.columnCreatedTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastUpdatedByColumn {
                get {
                    return this.columnLastUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastUpdatedTimeColumn {
                get {
                    return this.columnLastUpdatedTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrganisationUserRow this[int index] {
                get {
                    return ((OrganisationUserRow)(this.Rows[index]));
                }
            }
            
            public event OrganisationUserRowChangeEventHandler OrganisationUserRowChanging;
            
            public event OrganisationUserRowChangeEventHandler OrganisationUserRowChanged;
            
            public event OrganisationUserRowChangeEventHandler OrganisationUserRowDeleting;
            
            public event OrganisationUserRowChangeEventHandler OrganisationUserRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOrganisationUserRow(OrganisationUserRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrganisationUserRow AddOrganisationUserRow(string UserID, string NodeID, string UnitID, int VersionNO, string TransactionID, string CreatedBY, System.DateTime CreatedTime, string LastUpdatedBy, System.DateTime LastUpdatedTime) {
                OrganisationUserRow rowOrganisationUserRow = ((OrganisationUserRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UserID,
                        NodeID,
                        UnitID,
                        VersionNO,
                        TransactionID,
                        CreatedBY,
                        CreatedTime,
                        LastUpdatedBy,
                        LastUpdatedTime};
                rowOrganisationUserRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOrganisationUserRow);
                return rowOrganisationUserRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrganisationUserRow FindByUserIDNodeID(string UserID, string NodeID) {
                return ((OrganisationUserRow)(this.Rows.Find(new object[] {
                            UserID,
                            NodeID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OrganisationUserDataTable cln = ((OrganisationUserDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OrganisationUserDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserID = base.Columns["UserID"];
                this.columnNodeID = base.Columns["NodeID"];
                this.columnUnitID = base.Columns["UnitID"];
                this.columnVersionNO = base.Columns["VersionNO"];
                this.columnTransactionID = base.Columns["TransactionID"];
                this.columnCreatedBY = base.Columns["CreatedBY"];
                this.columnCreatedTime = base.Columns["CreatedTime"];
                this.columnLastUpdatedBy = base.Columns["LastUpdatedBy"];
                this.columnLastUpdatedTime = base.Columns["LastUpdatedTime"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnNodeID = new global::System.Data.DataColumn("NodeID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNodeID);
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnVersionNO = new global::System.Data.DataColumn("VersionNO", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVersionNO);
                this.columnTransactionID = new global::System.Data.DataColumn("TransactionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransactionID);
                this.columnCreatedBY = new global::System.Data.DataColumn("CreatedBY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedBY);
                this.columnCreatedTime = new global::System.Data.DataColumn("CreatedTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedTime);
                this.columnLastUpdatedBy = new global::System.Data.DataColumn("LastUpdatedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastUpdatedBy);
                this.columnLastUpdatedTime = new global::System.Data.DataColumn("LastUpdatedTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastUpdatedTime);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUserID,
                                this.columnNodeID}, true));
                this.columnUserID.AllowDBNull = false;
                this.columnUserID.MaxLength = 256;
                this.columnNodeID.AllowDBNull = false;
                this.columnNodeID.MaxLength = 50;
                this.columnVersionNO.AllowDBNull = false;
                this.columnTransactionID.AllowDBNull = false;
                this.columnTransactionID.MaxLength = 50;
                this.columnCreatedBY.AllowDBNull = false;
                this.columnCreatedBY.MaxLength = 256;
                this.columnCreatedTime.AllowDBNull = false;
                this.columnLastUpdatedBy.AllowDBNull = false;
                this.columnLastUpdatedBy.MaxLength = 256;
                this.columnLastUpdatedTime.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrganisationUserRow NewOrganisationUserRow() {
                return ((OrganisationUserRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OrganisationUserRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OrganisationUserRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OrganisationUserRowChanged != null)) {
                    this.OrganisationUserRowChanged(this, new OrganisationUserRowChangeEvent(((OrganisationUserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OrganisationUserRowChanging != null)) {
                    this.OrganisationUserRowChanging(this, new OrganisationUserRowChangeEvent(((OrganisationUserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OrganisationUserRowDeleted != null)) {
                    this.OrganisationUserRowDeleted(this, new OrganisationUserRowChangeEvent(((OrganisationUserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OrganisationUserRowDeleting != null)) {
                    this.OrganisationUserRowDeleting(this, new OrganisationUserRowChangeEvent(((OrganisationUserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOrganisationUserRow(OrganisationUserRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                OfficesHierarchyDataSet ds = new OfficesHierarchyDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OrganisationUserDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LookupOrganisationalUnitHierarchyRow : global::System.Data.DataRow {
            
            private LookupOrganisationalUnitHierarchyDataTable tableLookupOrganisationalUnitHierarchy;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LookupOrganisationalUnitHierarchyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLookupOrganisationalUnitHierarchy = ((LookupOrganisationalUnitHierarchyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OrganisationalUnitHierarchyID {
                get {
                    return ((int)(this[this.tableLookupOrganisationalUnitHierarchy.OrganisationalUnitHierarchyIDColumn]));
                }
                set {
                    this[this.tableLookupOrganisationalUnitHierarchy.OrganisationalUnitHierarchyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OrganisationalUnitTypeID {
                get {
                    return ((int)(this[this.tableLookupOrganisationalUnitHierarchy.OrganisationalUnitTypeIDColumn]));
                }
                set {
                    this[this.tableLookupOrganisationalUnitHierarchy.OrganisationalUnitTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParentID {
                get {
                    try {
                        return ((int)(this[this.tableLookupOrganisationalUnitHierarchy.ParentIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParentID\' in table \'LookupOrganisationalUnitHierarchy\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableLookupOrganisationalUnitHierarchy.ParentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Category {
                get {
                    return ((string)(this[this.tableLookupOrganisationalUnitHierarchy.CategoryColumn]));
                }
                set {
                    this[this.tableLookupOrganisationalUnitHierarchy.CategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MapPath {
                get {
                    if (this.IsMapPathNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableLookupOrganisationalUnitHierarchy.MapPathColumn]));
                    }
                }
                set {
                    this[this.tableLookupOrganisationalUnitHierarchy.MapPathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Depth {
                get {
                    try {
                        return ((int)(this[this.tableLookupOrganisationalUnitHierarchy.DepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Depth\' in table \'LookupOrganisationalUnitHierarchy\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableLookupOrganisationalUnitHierarchy.DepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrganisationalUnitName {
                get {
                    if (this.IsOrganisationalUnitNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableLookupOrganisationalUnitHierarchy.OrganisationalUnitNameColumn]));
                    }
                }
                set {
                    this[this.tableLookupOrganisationalUnitHierarchy.OrganisationalUnitNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrganisationalUnitID {
                get {
                    if (this.IsOrganisationalUnitIDNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableLookupOrganisationalUnitHierarchy.OrganisationalUnitIDColumn]));
                    }
                }
                set {
                    this[this.tableLookupOrganisationalUnitHierarchy.OrganisationalUnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParentIDNull() {
                return this.IsNull(this.tableLookupOrganisationalUnitHierarchy.ParentIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParentIDNull() {
                this[this.tableLookupOrganisationalUnitHierarchy.ParentIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMapPathNull() {
                return this.IsNull(this.tableLookupOrganisationalUnitHierarchy.MapPathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMapPathNull() {
                this[this.tableLookupOrganisationalUnitHierarchy.MapPathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepthNull() {
                return this.IsNull(this.tableLookupOrganisationalUnitHierarchy.DepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepthNull() {
                this[this.tableLookupOrganisationalUnitHierarchy.DepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrganisationalUnitNameNull() {
                return this.IsNull(this.tableLookupOrganisationalUnitHierarchy.OrganisationalUnitNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrganisationalUnitNameNull() {
                this[this.tableLookupOrganisationalUnitHierarchy.OrganisationalUnitNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrganisationalUnitIDNull() {
                return this.IsNull(this.tableLookupOrganisationalUnitHierarchy.OrganisationalUnitIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrganisationalUnitIDNull() {
                this[this.tableLookupOrganisationalUnitHierarchy.OrganisationalUnitIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OrganisationUserRow : global::System.Data.DataRow {
            
            private OrganisationUserDataTable tableOrganisationUser;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OrganisationUserRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOrganisationUser = ((OrganisationUserDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserID {
                get {
                    return ((string)(this[this.tableOrganisationUser.UserIDColumn]));
                }
                set {
                    this[this.tableOrganisationUser.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NodeID {
                get {
                    return ((string)(this[this.tableOrganisationUser.NodeIDColumn]));
                }
                set {
                    this[this.tableOrganisationUser.NodeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitID {
                get {
                    try {
                        return ((string)(this[this.tableOrganisationUser.UnitIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitID\' in table \'OrganisationUser\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrganisationUser.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int VersionNO {
                get {
                    return ((int)(this[this.tableOrganisationUser.VersionNOColumn]));
                }
                set {
                    this[this.tableOrganisationUser.VersionNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TransactionID {
                get {
                    return ((string)(this[this.tableOrganisationUser.TransactionIDColumn]));
                }
                set {
                    this[this.tableOrganisationUser.TransactionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreatedBY {
                get {
                    return ((string)(this[this.tableOrganisationUser.CreatedBYColumn]));
                }
                set {
                    this[this.tableOrganisationUser.CreatedBYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreatedTime {
                get {
                    return ((global::System.DateTime)(this[this.tableOrganisationUser.CreatedTimeColumn]));
                }
                set {
                    this[this.tableOrganisationUser.CreatedTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastUpdatedBy {
                get {
                    return ((string)(this[this.tableOrganisationUser.LastUpdatedByColumn]));
                }
                set {
                    this[this.tableOrganisationUser.LastUpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LastUpdatedTime {
                get {
                    return ((global::System.DateTime)(this[this.tableOrganisationUser.LastUpdatedTimeColumn]));
                }
                set {
                    this[this.tableOrganisationUser.LastUpdatedTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitIDNull() {
                return this.IsNull(this.tableOrganisationUser.UnitIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitIDNull() {
                this[this.tableOrganisationUser.UnitIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LookupOrganisationalUnitHierarchyRowChangeEvent : global::System.EventArgs {
            
            private LookupOrganisationalUnitHierarchyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookupOrganisationalUnitHierarchyRowChangeEvent(LookupOrganisationalUnitHierarchyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LookupOrganisationalUnitHierarchyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OrganisationUserRowChangeEvent : global::System.EventArgs {
            
            private OrganisationUserRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrganisationUserRowChangeEvent(OrganisationUserRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrganisationUserRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591