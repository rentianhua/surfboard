//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3607
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace HiiP.Framework.Security.UserManagement.BusinessEntity {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("AppointmentGroupCalendar")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class AppointmentGroupCalendar : global::System.Data.DataSet {
        
        private SS_AppointmentGroupCalendarDataTable tableSS_AppointmentGroupCalendar;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AppointmentGroupCalendar() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected AppointmentGroupCalendar(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["SS_AppointmentGroupCalendar"] != null)) {
                    base.Tables.Add(new SS_AppointmentGroupCalendarDataTable(ds.Tables["SS_AppointmentGroupCalendar"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SS_AppointmentGroupCalendarDataTable SS_AppointmentGroupCalendar {
            get {
                return this.tableSS_AppointmentGroupCalendar;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            AppointmentGroupCalendar cln = ((AppointmentGroupCalendar)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["SS_AppointmentGroupCalendar"] != null)) {
                    base.Tables.Add(new SS_AppointmentGroupCalendarDataTable(ds.Tables["SS_AppointmentGroupCalendar"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSS_AppointmentGroupCalendar = ((SS_AppointmentGroupCalendarDataTable)(base.Tables["SS_AppointmentGroupCalendar"]));
            if ((initTable == true)) {
                if ((this.tableSS_AppointmentGroupCalendar != null)) {
                    this.tableSS_AppointmentGroupCalendar.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "AppointmentGroupCalendar";
            this.Prefix = "";
            this.Namespace = "http://hiip.ooh.dhs.vic.gov.au/OfficesDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSS_AppointmentGroupCalendar = new SS_AppointmentGroupCalendarDataTable();
            base.Tables.Add(this.tableSS_AppointmentGroupCalendar);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSS_AppointmentGroupCalendar() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            AppointmentGroupCalendar ds = new AppointmentGroupCalendar();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void SS_AppointmentGroupCalendarRowChangeEventHandler(object sender, SS_AppointmentGroupCalendarRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SS_AppointmentGroupCalendarDataTable : global::System.Data.TypedTableBase<SS_AppointmentGroupCalendarRow> {
            
            private global::System.Data.DataColumn columnAppointmentGroupCalendarID;
            
            private global::System.Data.DataColumn columnUser_ID;
            
            private global::System.Data.DataColumn columnGroupCalendarName;
            
            private global::System.Data.DataColumn columnGroupCalendarDescription;
            
            private global::System.Data.DataColumn columnVersionNo;
            
            private global::System.Data.DataColumn columnTransactionID;
            
            private global::System.Data.DataColumn columnCreatedBy;
            
            private global::System.Data.DataColumn columnCreatedTime;
            
            private global::System.Data.DataColumn columnLastUpdatedBy;
            
            private global::System.Data.DataColumn columnLastUpdatedTime;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SS_AppointmentGroupCalendarDataTable() {
                this.TableName = "SS_AppointmentGroupCalendar";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SS_AppointmentGroupCalendarDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SS_AppointmentGroupCalendarDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppointmentGroupCalendarIDColumn {
                get {
                    return this.columnAppointmentGroupCalendarID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn User_IDColumn {
                get {
                    return this.columnUser_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroupCalendarNameColumn {
                get {
                    return this.columnGroupCalendarName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroupCalendarDescriptionColumn {
                get {
                    return this.columnGroupCalendarDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VersionNoColumn {
                get {
                    return this.columnVersionNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransactionIDColumn {
                get {
                    return this.columnTransactionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedByColumn {
                get {
                    return this.columnCreatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedTimeColumn {
                get {
                    return this.columnCreatedTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastUpdatedByColumn {
                get {
                    return this.columnLastUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastUpdatedTimeColumn {
                get {
                    return this.columnLastUpdatedTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SS_AppointmentGroupCalendarRow this[int index] {
                get {
                    return ((SS_AppointmentGroupCalendarRow)(this.Rows[index]));
                }
            }
            
            public event SS_AppointmentGroupCalendarRowChangeEventHandler SS_AppointmentGroupCalendarRowChanging;
            
            public event SS_AppointmentGroupCalendarRowChangeEventHandler SS_AppointmentGroupCalendarRowChanged;
            
            public event SS_AppointmentGroupCalendarRowChangeEventHandler SS_AppointmentGroupCalendarRowDeleting;
            
            public event SS_AppointmentGroupCalendarRowChangeEventHandler SS_AppointmentGroupCalendarRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSS_AppointmentGroupCalendarRow(SS_AppointmentGroupCalendarRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SS_AppointmentGroupCalendarRow AddSS_AppointmentGroupCalendarRow(string User_ID, string GroupCalendarName, string GroupCalendarDescription, int VersionNo, string TransactionID, string CreatedBy, System.DateTime CreatedTime, string LastUpdatedBy, System.DateTime LastUpdatedTime) {
                SS_AppointmentGroupCalendarRow rowSS_AppointmentGroupCalendarRow = ((SS_AppointmentGroupCalendarRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        User_ID,
                        GroupCalendarName,
                        GroupCalendarDescription,
                        VersionNo,
                        TransactionID,
                        CreatedBy,
                        CreatedTime,
                        LastUpdatedBy,
                        LastUpdatedTime};
                rowSS_AppointmentGroupCalendarRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSS_AppointmentGroupCalendarRow);
                return rowSS_AppointmentGroupCalendarRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SS_AppointmentGroupCalendarRow FindByAppointmentGroupCalendarID(int AppointmentGroupCalendarID) {
                return ((SS_AppointmentGroupCalendarRow)(this.Rows.Find(new object[] {
                            AppointmentGroupCalendarID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SS_AppointmentGroupCalendarDataTable cln = ((SS_AppointmentGroupCalendarDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SS_AppointmentGroupCalendarDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAppointmentGroupCalendarID = base.Columns["AppointmentGroupCalendarID"];
                this.columnUser_ID = base.Columns["User_ID"];
                this.columnGroupCalendarName = base.Columns["GroupCalendarName"];
                this.columnGroupCalendarDescription = base.Columns["GroupCalendarDescription"];
                this.columnVersionNo = base.Columns["VersionNo"];
                this.columnTransactionID = base.Columns["TransactionID"];
                this.columnCreatedBy = base.Columns["CreatedBy"];
                this.columnCreatedTime = base.Columns["CreatedTime"];
                this.columnLastUpdatedBy = base.Columns["LastUpdatedBy"];
                this.columnLastUpdatedTime = base.Columns["LastUpdatedTime"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAppointmentGroupCalendarID = new global::System.Data.DataColumn("AppointmentGroupCalendarID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAppointmentGroupCalendarID);
                this.columnUser_ID = new global::System.Data.DataColumn("User_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUser_ID);
                this.columnGroupCalendarName = new global::System.Data.DataColumn("GroupCalendarName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupCalendarName);
                this.columnGroupCalendarDescription = new global::System.Data.DataColumn("GroupCalendarDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupCalendarDescription);
                this.columnVersionNo = new global::System.Data.DataColumn("VersionNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVersionNo);
                this.columnTransactionID = new global::System.Data.DataColumn("TransactionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransactionID);
                this.columnCreatedBy = new global::System.Data.DataColumn("CreatedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedBy);
                this.columnCreatedTime = new global::System.Data.DataColumn("CreatedTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedTime);
                this.columnLastUpdatedBy = new global::System.Data.DataColumn("LastUpdatedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastUpdatedBy);
                this.columnLastUpdatedTime = new global::System.Data.DataColumn("LastUpdatedTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastUpdatedTime);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAppointmentGroupCalendarID}, true));
                this.columnAppointmentGroupCalendarID.AutoIncrement = true;
                this.columnAppointmentGroupCalendarID.AutoIncrementSeed = -1;
                this.columnAppointmentGroupCalendarID.AutoIncrementStep = -1;
                this.columnAppointmentGroupCalendarID.AllowDBNull = false;
                this.columnAppointmentGroupCalendarID.ReadOnly = true;
                this.columnAppointmentGroupCalendarID.Unique = true;
                this.columnUser_ID.AllowDBNull = false;
                this.columnUser_ID.MaxLength = 50;
                this.columnGroupCalendarName.AllowDBNull = false;
                this.columnGroupCalendarName.MaxLength = 50;
                this.columnGroupCalendarDescription.AllowDBNull = false;
                this.columnVersionNo.AllowDBNull = false;
                this.columnTransactionID.AllowDBNull = false;
                this.columnTransactionID.MaxLength = 50;
                this.columnCreatedBy.AllowDBNull = false;
                this.columnCreatedBy.MaxLength = 256;
                this.columnCreatedTime.AllowDBNull = false;
                this.columnLastUpdatedBy.AllowDBNull = false;
                this.columnLastUpdatedBy.MaxLength = 256;
                this.columnLastUpdatedTime.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SS_AppointmentGroupCalendarRow NewSS_AppointmentGroupCalendarRow() {
                return ((SS_AppointmentGroupCalendarRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SS_AppointmentGroupCalendarRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SS_AppointmentGroupCalendarRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SS_AppointmentGroupCalendarRowChanged != null)) {
                    this.SS_AppointmentGroupCalendarRowChanged(this, new SS_AppointmentGroupCalendarRowChangeEvent(((SS_AppointmentGroupCalendarRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SS_AppointmentGroupCalendarRowChanging != null)) {
                    this.SS_AppointmentGroupCalendarRowChanging(this, new SS_AppointmentGroupCalendarRowChangeEvent(((SS_AppointmentGroupCalendarRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SS_AppointmentGroupCalendarRowDeleted != null)) {
                    this.SS_AppointmentGroupCalendarRowDeleted(this, new SS_AppointmentGroupCalendarRowChangeEvent(((SS_AppointmentGroupCalendarRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SS_AppointmentGroupCalendarRowDeleting != null)) {
                    this.SS_AppointmentGroupCalendarRowDeleting(this, new SS_AppointmentGroupCalendarRowChangeEvent(((SS_AppointmentGroupCalendarRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSS_AppointmentGroupCalendarRow(SS_AppointmentGroupCalendarRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AppointmentGroupCalendar ds = new AppointmentGroupCalendar();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SS_AppointmentGroupCalendarDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SS_AppointmentGroupCalendarRow : global::System.Data.DataRow {
            
            private SS_AppointmentGroupCalendarDataTable tableSS_AppointmentGroupCalendar;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SS_AppointmentGroupCalendarRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSS_AppointmentGroupCalendar = ((SS_AppointmentGroupCalendarDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AppointmentGroupCalendarID {
                get {
                    return ((int)(this[this.tableSS_AppointmentGroupCalendar.AppointmentGroupCalendarIDColumn]));
                }
                set {
                    this[this.tableSS_AppointmentGroupCalendar.AppointmentGroupCalendarIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string User_ID {
                get {
                    return ((string)(this[this.tableSS_AppointmentGroupCalendar.User_IDColumn]));
                }
                set {
                    this[this.tableSS_AppointmentGroupCalendar.User_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GroupCalendarName {
                get {
                    return ((string)(this[this.tableSS_AppointmentGroupCalendar.GroupCalendarNameColumn]));
                }
                set {
                    this[this.tableSS_AppointmentGroupCalendar.GroupCalendarNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GroupCalendarDescription {
                get {
                    return ((string)(this[this.tableSS_AppointmentGroupCalendar.GroupCalendarDescriptionColumn]));
                }
                set {
                    this[this.tableSS_AppointmentGroupCalendar.GroupCalendarDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int VersionNo {
                get {
                    return ((int)(this[this.tableSS_AppointmentGroupCalendar.VersionNoColumn]));
                }
                set {
                    this[this.tableSS_AppointmentGroupCalendar.VersionNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TransactionID {
                get {
                    return ((string)(this[this.tableSS_AppointmentGroupCalendar.TransactionIDColumn]));
                }
                set {
                    this[this.tableSS_AppointmentGroupCalendar.TransactionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreatedBy {
                get {
                    return ((string)(this[this.tableSS_AppointmentGroupCalendar.CreatedByColumn]));
                }
                set {
                    this[this.tableSS_AppointmentGroupCalendar.CreatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreatedTime {
                get {
                    return ((global::System.DateTime)(this[this.tableSS_AppointmentGroupCalendar.CreatedTimeColumn]));
                }
                set {
                    this[this.tableSS_AppointmentGroupCalendar.CreatedTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastUpdatedBy {
                get {
                    return ((string)(this[this.tableSS_AppointmentGroupCalendar.LastUpdatedByColumn]));
                }
                set {
                    this[this.tableSS_AppointmentGroupCalendar.LastUpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LastUpdatedTime {
                get {
                    return ((global::System.DateTime)(this[this.tableSS_AppointmentGroupCalendar.LastUpdatedTimeColumn]));
                }
                set {
                    this[this.tableSS_AppointmentGroupCalendar.LastUpdatedTimeColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SS_AppointmentGroupCalendarRowChangeEvent : global::System.EventArgs {
            
            private SS_AppointmentGroupCalendarRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SS_AppointmentGroupCalendarRowChangeEvent(SS_AppointmentGroupCalendarRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SS_AppointmentGroupCalendarRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591