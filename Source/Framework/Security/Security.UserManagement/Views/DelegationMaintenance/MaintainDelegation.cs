//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using HiiP.Infrastructure.Interface;
using HiiP.Framework.Security.UserManagement.ServiceProxies;
using HiiP.Framework.Common;
using HiiP.Framework.Common.Client;
using Infragistics.Win.UltraWinGrid;
using Microsoft.Practices.CompositeUI.EventBroker;
using HiiP.Infrastructure.Interface.BusinessEntities;
using HiiP.Framework.Security.UserManagement.BusinessEntity;
using HiiP.Framework.Security.UserManagement.Interface;
using HiiP.Framework.Common.Client.Async;
using System.ComponentModel;
using System.Data;
using System.Collections.Generic;

namespace HiiP.Framework.Security.UserManagement
{
    public partial class MaintainDelegation : BaseView , IMaintainDelegation
    { 
        public MaintainDelegation() 
        {
            InitializeComponent();
        }

        protected override void OnLoad(EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                _presenter.OnViewReady();
                base.OnLoad(e);
                LoadDelegations();
                
            }
            catch (Exception ex)
            {
                this.Enabled = false;

                if (ExceptionManager.Handle(ex)) throw;
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }

        }

        public override void ProcessParameter(HiiP.Infrastructure.Interface.BusinessEntities.ViewParameter parameter)
        {
            AppTitle = _presenter.GetAppTitle();
            base.ProcessParameter(parameter);
        }


        private void LoadDelegations()
        {
            cbdDelegationFunctions.DataSource = _presenter.GetAllDelegationFunctions();
            cbdDelegationFunctions.DisplayMember = "Name";
            cbdDelegationFunctions.ValueMember = "DelegationFunctionId";
            //assign default value "Select All"
            cbdDelegationFunctions.Value = 0;
        }

        private DelegationSearchCriteria GetDelegationSearchCriteria()
        {
            DelegationSearchCriteria objDelegationSearchCriteria = new DelegationSearchCriteria();
            objDelegationSearchCriteria.DelegationFunctionId = Convert.ToInt32(cbdDelegationFunctions.SelectedItem.DataValue.ToString());
            objDelegationSearchCriteria.AdminNotes = txtSearchNotes.Text;
            objDelegationSearchCriteria.IsShowActive = chkbxShowActive.Checked;

            return objDelegationSearchCriteria;
        }

        private void ultraBtnSearch_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;

                this.ultraGridDelegation.Focus();
                var criteria = GetDelegationSearchCriteria();
                using (AsyncWorker<IMaintainDelegation> worker = new AsyncWorker<IMaintainDelegation>(_presenter, this.ultraGridDelegation,true))
                {
                    worker.DoWork += delegate(object senderobj, DoWorkEventArgs ev)
                    {
                        var tempCriteria = ev.Argument as DelegationSearchCriteria;
                        if (tempCriteria == null)
                        {
                            return;
                        }
                        ev.Result = _presenter.FindDelegationDetailEntity(tempCriteria);
                    };

                    worker.RunWorkerCompleted += delegate(object senderobj, RunWorkerCompletedEventArgs ev)
                    {
                        List<DelegationValueEntity> lstResults = ev.Result as List<DelegationValueEntity>;
                        ultraGridDelegation.DataSource = lstResults;
                        ultraGridDelegation.DataBind();
                        ultraLabTotalNum.Text = string.Format("Total record(s) : {0}", ultraGridDelegation.Rows.Count.ToString());

                    };
                    worker.Run(criteria);
                } 

            }
            catch (Exception ex)
            {
                if (ExceptionManager.Handle(ex)) throw;
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        private void ultraButtonCreate_Click(object sender, EventArgs e)
        {
            
            _presenter.CreateDelegation();
           
        }

        private void ultraBtnClose_Click(object sender, EventArgs e)
        {
            _presenter.OnCloseView();
        }

  

        private void ultraGridDelegation_InitializeLayout(object sender, InitializeLayoutEventArgs e)
        {

            e.Layout.Bands[0].Columns["DelegationValueId"].Hidden = true;
            e.Layout.Bands[0].Columns["DelegationFunctionId"].Hidden = true;
            e.Layout.Bands[0].Columns["VersionNo"].Hidden = true;
            e.Layout.Bands[0].Columns["DelegationFunctionName"].Header.Caption = "Delegation function";
            e.Layout.AutoFitStyle = Infragistics.Win.UltraWinGrid.AutoFitStyle.ResizeAllColumns;

            for (int i = 0; i <= e.Layout.Bands[0].Columns.Count - 1; i++)
            {
                e.Layout.Bands[0].Columns[i].CellActivation = Activation.NoEdit;
            }
        }

        private void ultraBtnReset_Click(object sender, EventArgs e)
        {
            chkbxShowActive.Checked = true;
            cbdDelegationFunctions.Value = 0;
            txtSearchNotes.Text = string.Empty;
            ultraLabTotalNum.Text = string.Format("Total record(s) : {0}", 0);
            this.ultraGridDelegation.DataSource = new List<DelegationValueEntity>();
        }

        private void ultraGridDelegation_DoubleClickRow(object sender, DoubleClickRowEventArgs e)
        {
            try
            {
                UltraGridRow row = this.ultraGridDelegation.ActiveRow;
                if (row != null)
                {
                    _presenter.UpdateDelegation(row.Cells["DelegationValueId"].Text);
                }
            }
            catch (Exception exception)
            {
                if (ExceptionManager.Handle(exception)) throw;
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        private void ultraGridDelegation_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyData != Keys.Enter)
            {
                return;
            }

            UltraGridRow row = this.ultraGridDelegation.ActiveRow;
            if (row == null)
            {
                return;
            }
            ultraGridDelegation_DoubleClickRow(sender, new DoubleClickRowEventArgs(row, RowArea.Cell));
        }
    }
}

