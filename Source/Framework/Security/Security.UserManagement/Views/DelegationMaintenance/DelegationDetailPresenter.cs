//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------


using System;
using System.Collections.Generic;

using HiiP.Framework.Security.UserManagement.BusinessEntity;
using HiiP.Framework.Security.UserManagement.Interface.Constants;
using HiiP.Framework.Security.UserManagement.ServiceProxies;
 
using HiiP.Infrastructure.Interface;
using HiiP.Infrastructure.Interface.BusinessEntities;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.ObjectBuilder;
using System.Data; 

namespace HiiP.Framework.Security.UserManagement
{
    public partial class DelegationDetailPresenter : Presenter<IDelegationDetail>
    {
        /// <summary>
        /// This method is a placeholder that will be called by the view when it has been loaded.
        /// </summary>
        /// 
        public ViewParameter parameter;
        private const string cbdDefaulDispText = "Select a value";
        public const int cbdDefaultValue = 0;

        public override void OnViewReady()
        {
            base.OnViewReady();
        }
        public override AppTitleData GetAppTitle()
        {
            string strFunctionName;

            if (parameter.EventFunction == HiiP.Infrastructure.Interface.Constants.EventTopicNames.EventFunctions.UpdateDelegation)
            {
                strFunctionName = string.Concat("Update delegation"," - ", parameter.Key);
                View.SetKey(string.Empty);
            }
            else
            {
                strFunctionName = FunctionNames.CreateDelegationFunctionName;
            }


            return new AppTitleData(
                strFunctionName,
                FunctionNames.CreateDelegationFunctionScreenID
                );
        }

        
        public List<DelegationFunctionEntity> GetAllDelegationFunctions()
        {
            using (DelegationServiceProxy Proxy = new DelegationServiceProxy())
            {
                List<DelegationFunctionEntity> lstDFE = Proxy.GetAllDelegationFunctions();
                lstDFE.Insert(0, new DelegationFunctionEntity(cbdDefaultValue, cbdDefaulDispText, string.Empty));
                return lstDFE;
            }
        }


        public DelegationValueEntity SearchDelegationValueByDelValID(int DelegationValueID)
        {
            using (DelegationServiceProxy Proxy = new DelegationServiceProxy())
            {
                return Proxy.SearchDelegationValueByID(DelegationValueID);
            }
        }


        public List<CodeTableEntity> GetAllAct()
        {
            using (DelegationServiceProxy Proxy = new DelegationServiceProxy())
            {
                List<CodeTableEntity> lstCTE = Proxy.GetAllAct();
                lstCTE.Insert(0, new CodeTableEntity(cbdDefaultValue.ToString(), cbdDefaulDispText));
                return lstCTE;
            }
        }

        public void UpdateDelegationValue(DelegationValueEntity objDelegationValueEntity)
        {            
            using (DelegationServiceProxy Proxy = new DelegationServiceProxy())
            {
                Proxy.UpdateDelegationValue(objDelegationValueEntity);
            }
            
            OnUpdateStatusBarMessage(string.Format("Delegation value - {0} has been successfully saved.",objDelegationValueEntity.DelegationValueId.ToString()));
        }

        public void InsertDelegationValue(DelegationValueEntity objDelegationValueEntity)
        {
            using (DelegationServiceProxy Proxy = new DelegationServiceProxy())
            {
                Proxy.InsertDelegationValue(objDelegationValueEntity);
            }

            OnUpdateStatusBarMessage("Delegation value has been successfully saved.");
        }

        public LookupOrganisationalUnitDataSet.LookupOrganisationalUnitDataTable GetAllBranch()
        {
            using (DelegationServiceProxy Proxy = new DelegationServiceProxy())
            {
                LookupOrganisationalUnitDataSet.LookupOrganisationalUnitDataTable tblLOUD = Proxy.GetAllBranch();
                return (LookupOrganisationalUnitDataSet.LookupOrganisationalUnitDataTable)AddSelectStr(tblLOUD).Table;
            }
        }

        public LookupOrganisationalUnitDataSet.LookupOrganisationalUnitDataTable GetAllUnit(string OrganisationalUnitID)
        {
            
            using (DelegationServiceProxy Proxy = new DelegationServiceProxy())
            {
                LookupOrganisationalUnitDataSet.LookupOrganisationalUnitDataTable tblLOUD = Proxy.GetAllUnit(OrganisationalUnitID);
                return (LookupOrganisationalUnitDataSet.LookupOrganisationalUnitDataTable)AddSelectStr(tblLOUD).Table;
            }
        }

        public LookupOrganisationalUnitDataSet.LookupOrganisationalUnitDataTable GetAllSubUnit(string OrganisationalUnitID)
        {
            using (DelegationServiceProxy Proxy = new DelegationServiceProxy())
            {
                LookupOrganisationalUnitDataSet.LookupOrganisationalUnitDataTable tblLOUD = Proxy.GetAllSubUnit(OrganisationalUnitID);
                return (LookupOrganisationalUnitDataSet.LookupOrganisationalUnitDataTable)AddSelectStr(tblLOUD).Table;
            }
        }

        public string GetDelegationValue()
        {

            using (DelegationServiceProxy Proxy = new DelegationServiceProxy())
            {
                return Proxy.GetDelegationValues(1, "Admin", "66CDAB0A-A916-4da9-943B-6C7F2CF76AD7");
            }
        }

        public List<DelegationValueEntity> FindDelegationDetailEntity()
        {
            using (DelegationServiceProxy Proxy = new DelegationServiceProxy())
            {
                return Proxy.FindDelegationValueEntity(new DelegationSearchCriteria {IsShowActive = true,AdminNotes = string.Empty});

            }
        }

        public override void OnCloseView()
        {           
            base.OnCloseView();
        }

        private DataView AddSelectStr(LookupOrganisationalUnitDataSet.LookupOrganisationalUnitDataTable dt)
        {
            if (dt.Rows.Count > 0)
            {
                LookupOrganisationalUnitDataSet.LookupOrganisationalUnitRow rw = dt.NewLookupOrganisationalUnitRow();
                rw.OrganisationalUnitName = cbdDefaulDispText;
                rw.OrganisationalUnitID = cbdDefaultValue.ToString();
                dt.Rows.Add(rw);

                //Sort order by OrganisationalUnitID
                dt.DefaultView.Sort = "OrganisationalUnitID";
            }
                                  
            return dt.DefaultView;
        }



    }
}

