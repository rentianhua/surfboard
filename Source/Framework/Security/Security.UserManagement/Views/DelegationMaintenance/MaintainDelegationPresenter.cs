//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using HiiP.Infrastructure.Interface;
using HiiP.Infrastructure.Interface.BusinessEntities;
using HiiP.Framework.Security.UserManagement.Interface.Constants;
using System.Collections.Generic;
using HiiP.Framework.Security.UserManagement.BusinessEntity;
using HiiP.Framework.Security.UserManagement.ServiceProxies;
using HiiP.Framework.Security.UserManagement.Interface;

namespace HiiP.Framework.Security.UserManagement
{
    public partial class MaintainDelegationPresenter : Presenter<IMaintainDelegation>
    {
        /// <summary>
        /// This method is a placeholder that will be called by the view when it has been loaded.
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        public override AppTitleData GetAppTitle()
        {
            return new AppTitleData(
                FunctionNames.MaintainDelegationFunctionName,
                FunctionNames.MaintainDelegationFunctionScreenID
                );
        }

        public List<DelegationFunctionEntity> GetAllDelegationFunctions()
        {
            using (DelegationServiceProxy Proxy = new DelegationServiceProxy())
            {                
                List<DelegationFunctionEntity> lstDlgtnFuncEntity = Proxy.GetAllDelegationFunctions();             
                lstDlgtnFuncEntity.Insert(0, new DelegationFunctionEntity(0, "Select All", string.Empty));
                return lstDlgtnFuncEntity;

            }
        }

        public List<DelegationValueEntity> GetAllDelegationDetailEntity()
        {
            using (DelegationServiceProxy Proxy = new DelegationServiceProxy())
            {
                return Proxy.GetAllDelegationValueEntity();
            }
        }

        public List<DelegationValueEntity> FindDelegationDetailEntity(DelegationSearchCriteria objDelegationSearchCriteria)
        {
            using (DelegationServiceProxy Proxy = new DelegationServiceProxy())
            {
                return Proxy.FindDelegationValueEntity(objDelegationSearchCriteria);
            }
        }



        public void UpdateDelegation(string id)
        {
            ViewParameter para = new ViewParameter();
            para.Key = id;
            para.EventFunction = HiiP.Infrastructure.Interface.Constants.EventTopicNames.EventFunctions.UpdateDelegation;
            ShowViewInWorkspace<DelegationDetail>(para);
        }

        public void CreateDelegation()
        {
            ShowViewInWorkspace<DelegationDetail>();
        }

        public override void OnCloseView()
        {           
            base.OnCloseView();
        }
    }
}

