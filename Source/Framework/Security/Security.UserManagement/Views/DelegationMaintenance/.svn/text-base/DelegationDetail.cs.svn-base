//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;

using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using HiiP.Infrastructure.Interface;
using HiiP.Framework.Security.UserManagement.ServiceProxies;
using HiiP.Framework.Common;
using HiiP.Framework.Common.Client;
using HiiP.Infrastructure.Interface.BusinessEntities;
using HiiP.Framework.Security.UserManagement.BusinessEntity;
using NCS.IConnect.CodeTable;

namespace HiiP.Framework.Security.UserManagement
{
    public partial class DelegationDetail : BaseView , IDelegationDetail
    {
        public DelegationDetail()
        {
            InitializeComponent();
        }

        private int _versionNo;
        private const string cbdDefaultValue = "0";

        protected override void OnLoad(EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                this.SetDirtyStatus(true);
                _presenter.OnViewReady();
                base.OnLoad(e);
                
                SetDefaultDate();

                #region Populate dropdown box
                LoadDelegations();                
                LoadGrade();
                LoadAct();
                LoadBranch();
                #endregion
                                
                LoadDelegationDetails();


                this.SetDirtyStatus(false);
            
            }
            catch (Exception ex)
            {
                this.Enabled = false;

                if (ExceptionManager.Handle(ex)) throw;
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        #region Populate Dropdownbox events  
        private void LoadUnit(string OrganisationUnitID)
        {
            ultraComboUnit.DataSource = _presenter.GetAllUnit(OrganisationUnitID);
            ultraComboUnit.DisplayMember = "OrganisationalUnitName";
            ultraComboUnit.ValueMember = "OrganisationalUnitID";
            ultraComboUnit.Value = 0;
        }

        private void LoadSubUnit(string OrganisationUnitID)
        {
            ultraComboSubUnit.DataSource = _presenter.GetAllSubUnit(OrganisationUnitID);
            ultraComboSubUnit.DisplayMember = "OrganisationalUnitName";
            ultraComboSubUnit.ValueMember = "OrganisationalUnitID";
            ultraComboSubUnit.Value = 0;
        }

        private void LoadBranch()
        {
            ultraComboBranch.DataSource = _presenter.GetAllBranch();
            ultraComboBranch.DisplayMember = "OrganisationalUnitName";
            ultraComboBranch.ValueMember = "OrganisationalUnitID";
            ultraComboBranch.Value = 0;
        }

        private void SetDefaultDate()
        {
            ultraDateTimeEditorStartDate.Value = Convert.ToDateTime("1753-01-01 00:00:00.000");
            ultraDateTimeEditorEndDate.Value = Convert.ToDateTime("9998-12-31 00:00:00.000");
        }

        private void LoadGrade()
        {
            CodeBindingOptions option = new CodeBindingOptions();
            option.DisplayTextFormatString = "{CODE}";
            option.ValueFormatString = "{ID}";
            option.EmptyItemValue = "0";
            CodeTableAdapter.BindComboByCodeTable(
                this.ultraComboGrade,
                CodeManager.GetCodes(HiiP.Infrastructure.Interface.Constants.CodeTableCategoryNames.Grade, CodeStatus.Effective), option);

        }

        private void LoadAct()
        {
            ultraComboAct.DataSource = _presenter.GetAllAct();
            ultraComboAct.DisplayMember = "CodeDesc";
            ultraComboAct.ValueMember = "Code";
            ultraComboAct.Value = 0;
        }

        private void LoadDelegations()
        {
            ddlDelegationFunction.DataSource = _presenter.GetAllDelegationFunctions();
            ddlDelegationFunction.DisplayMember = "Name";
            ddlDelegationFunction.ValueMember = "DelegationFunctionId";
            ddlDelegationFunction.Value = 0;

        }
        #endregion

        private void LoadDelegationDetails()
        {
            if (_presenter.parameter.EventFunction == HiiP.Infrastructure.Interface.Constants.EventTopicNames.EventFunctions.UpdateDelegation)
            {
                DelegationValueEntity objDelegationValueEntity = _presenter.SearchDelegationValueByDelValID(Convert.ToInt32(_presenter.parameter.Key));
                ddlDelegationFunction.Value = objDelegationValueEntity.DelegationFunctionId;
                txtReferenceNo.Text = objDelegationValueEntity.DelegationReference;
                lblDelegationValueID.Text = objDelegationValueEntity.DelegationValueId.ToString();
                txtValue.Text = objDelegationValueEntity.DelegationValue;                
                txtPolicyValue.Text = objDelegationValueEntity.PolicyValue;
                txtOperationConditions.Text = objDelegationValueEntity.OperationalCondition;
                ultraComboBranch.Value = objDelegationValueEntity.Branch;
                ultraComboUnit.Value = objDelegationValueEntity.Unit;
                ultraComboSubUnit.Value = objDelegationValueEntity.Subunit;
                ultraComboAct.Value = objDelegationValueEntity.Act;
                ultraComboGrade.Value = objDelegationValueEntity.Grade;
                _versionNo = objDelegationValueEntity.VersionNo;
                ultraDateTimeEditorStartDate.Value = objDelegationValueEntity.StartDate;
                ultraDateTimeEditorEndDate.Value = objDelegationValueEntity.EndDate;
               
            }
    
        }

        public void SetKey(string key)
        {
            this.Key = key;
        }

        public override void ProcessParameter(ViewParameter parameter)
        {
            _presenter.parameter = parameter;
            AppTitle = _presenter.GetAppTitle();            
            base.ProcessParameter(parameter);
        }


        private void btnSave_Click(object sender, EventArgs e)
        {
            try
            {               
                this.Cursor = Cursors.WaitCursor;

                if (ValidateRequiredFields())
                {
                    //UPDATE
                    DelegationValueEntity objDelValueEntity = new DelegationValueEntity();

                    objDelValueEntity.DelegationFunctionId = Convert.ToInt32(ddlDelegationFunction.Value);
                    objDelValueEntity.DelegationValue = txtValue.Text.Trim() == string.Empty ? null : txtValue.Text.Trim();
                    objDelValueEntity.PolicyValue = txtPolicyValue.Text.Trim() == string.Empty ? null : txtPolicyValue.Text.Trim();
                    objDelValueEntity.OperationalCondition = txtOperationConditions.Text;
                    objDelValueEntity.DelegationReference = txtReferenceNo.Text;
                    objDelValueEntity.Act = ultraComboAct.Value.ToString();
                    objDelValueEntity.Branch = ultraComboBranch.Value.ToString();
                    objDelValueEntity.Unit = ultraComboUnit.Value == null || ultraComboUnit.Value.ToString() == cbdDefaultValue || ultraComboUnit.Value.ToString() == string.Empty ? null : ultraComboUnit.Value.ToString();
                    objDelValueEntity.Subunit = ultraComboSubUnit.Value == null || ultraComboSubUnit.Value.ToString() == cbdDefaultValue || ultraComboSubUnit.Value.ToString() == string.Empty ? null : ultraComboSubUnit.Value.ToString();
                    objDelValueEntity.Grade = ultraComboGrade.Value.ToString();
                    objDelValueEntity.StartDate = ultraDateTimeEditorStartDate.DateTime;
                    objDelValueEntity.EndDate = ultraDateTimeEditorEndDate.DateTime;
                    objDelValueEntity.VersionNo = _versionNo;

                    var existingDelegations = _presenter.FindDelegationDetailEntity();

                    bool hasExistingDelegationSettings = false;
                    foreach (var delegationValueEntity in existingDelegations)
                    {
                        if (delegationValueEntity.DelegationFunctionId == Convert.ToInt32(ddlDelegationFunction.Value))
                        {
                            if (delegationValueEntity.Branch.Equals(ultraComboBranch.Text))
                            {
                                if (delegationValueEntity.Unit.Equals((ultraComboUnit.Value == null || ultraComboUnit.Value.ToString() == cbdDefaultValue)?string.Empty:ultraComboUnit.Text))
                                {
                                    if (delegationValueEntity.Subunit.Equals((ultraComboSubUnit.Value == null || ultraComboSubUnit.Value.ToString() == cbdDefaultValue) ? string.Empty : ultraComboSubUnit.Text))
                                    {
                                        if (delegationValueEntity.Grade.Equals(ultraComboGrade.Text))
                                        {
                                            if(delegationValueEntity.Act.Equals(ultraComboAct.Text))
                                            {
                                                if (Convert.ToInt32(string.IsNullOrEmpty(lblDelegationValueID.Text)?"0":lblDelegationValueID.Text) != delegationValueEntity.DelegationValueId)
                                                {
                                                    hasExistingDelegationSettings = true;
                                                    break;
                                                }
                                                
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }

                    if(hasExistingDelegationSettings)
                    {
                        MessageBox.Show("There was already one existing record with the same delegation setting.","Message");
                        return;
                    }
                    if (_presenter.parameter.EventFunction == HiiP.Infrastructure.Interface.Constants.EventTopicNames.EventFunctions.UpdateDelegation)
                    {
                        
                        objDelValueEntity.DelegationValueId = Convert.ToInt32(lblDelegationValueID.Text);
                        //objDelValueEntity.DelegationFunctionId = Convert.ToInt32(ddlDelegationFunction.Value);
                        //objDelValueEntity.DelegationValue = txtValue.Text.Trim() == string.Empty ? null : txtValue.Text.Trim();
                        //objDelValueEntity.PolicyValue = txtPolicyValue.Text.Trim() == string.Empty ? null : txtPolicyValue.Text.Trim();
                        //objDelValueEntity.OperationalCondition = txtOperationConditions.Text;
                        //objDelValueEntity.DelegationReference = txtReferenceNo.Text;
                        //objDelValueEntity.Act = ultraComboAct.Value.ToString();
                        //objDelValueEntity.Branch = ultraComboBranch.Value.ToString();
                        //objDelValueEntity.Unit = ultraComboUnit.Value == null || ultraComboUnit.Value.ToString() == cbdDefaultValue || ultraComboUnit.Value.ToString() == string.Empty ? null : ultraComboUnit.Value.ToString();
                        //objDelValueEntity.Subunit = ultraComboSubUnit.Value == null || ultraComboSubUnit.Value.ToString() == cbdDefaultValue || ultraComboSubUnit.Value.ToString() == string.Empty ? null : ultraComboSubUnit.Value.ToString();
                        //objDelValueEntity.Grade = ultraComboGrade.Value.ToString();
                        //objDelValueEntity.StartDate = ultraDateTimeEditorStartDate.DateTime;
                        //objDelValueEntity.EndDate = ultraDateTimeEditorEndDate.DateTime;
                        //objDelValueEntity.VersionNo = _versionNo;
                        _presenter.UpdateDelegationValue(objDelValueEntity);

                    }
                    else
                    {//INSERT

                       // DelegationValueEntity objDelValueEntity = new DelegationValueEntity();
                        //objDelValueEntity.DelegationFunctionId = Convert.ToInt32(ddlDelegationFunction.Value);
                        //objDelValueEntity.DelegationValue = txtValue.Text.Trim() == string.Empty ? null : txtValue.Text.Trim();
                        //objDelValueEntity.PolicyValue = txtPolicyValue.Text.Trim() == string.Empty ? null : txtPolicyValue.Text.Trim();
                        //objDelValueEntity.OperationalCondition = txtOperationConditions.Text;
                        //objDelValueEntity.DelegationReference = txtReferenceNo.Text;
                        //objDelValueEntity.Act = ultraComboAct.Value.ToString();
                        //objDelValueEntity.Branch = ultraComboBranch.Value.ToString();
                        //objDelValueEntity.Unit = ultraComboUnit.Value == null || ultraComboUnit.Value.ToString() == cbdDefaultValue || ultraComboUnit.Value.ToString() == string.Empty ? null : ultraComboUnit.Value.ToString();
                        //objDelValueEntity.Subunit = ultraComboSubUnit.Value == null || ultraComboSubUnit.Value.ToString() == cbdDefaultValue || ultraComboSubUnit.Value.ToString() == string.Empty ? null : ultraComboSubUnit.Value.ToString();
                        //objDelValueEntity.Grade = ultraComboGrade.Value.ToString();
                        //objDelValueEntity.StartDate = ultraDateTimeEditorStartDate.DateTime;
                        //objDelValueEntity.EndDate = ultraDateTimeEditorEndDate.DateTime;
                        //objDelValueEntity.VersionNo = _versionNo;
                        _presenter.InsertDelegationValue(objDelValueEntity);
                    }

                    this.SetDirtyStatus(false);
                    _presenter.OnCloseView();
                }

            }
            catch (Exception ex)
            {
                if (ExceptionManager.Handle(ex)) throw;
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }

        }

        private bool ValidateRequiredFields()
        {
            errorProvider.Clear();
            int ctr = 0;

            if (ddlDelegationFunction.Value.ToString() == cbdDefaultValue)
            {
                errorProvider.SetError(ddlDelegationFunction, "The Delegation function is mandatory.");
                ctr++;
            }

            if (ultraComboBranch.Value.ToString() == cbdDefaultValue)
            {
                errorProvider.SetError(ultraComboBranch, "The Branch is mandatory.");
                ctr++;
            }
              
            if (ultraComboGrade.Value.ToString() == cbdDefaultValue)
            {
                errorProvider.SetError(ultraComboGrade, "The Grade is mandatory.");
                ctr++;
            }


            if (ultraComboAct.Value.ToString() == cbdDefaultValue)
            {
                errorProvider.SetError(ultraComboAct, "The Act is mandatory.");
                ctr++;
            }

            if (ultraDateTimeEditorStartDate.DateTime > ultraDateTimeEditorEndDate.DateTime)
            {
                errorProvider.SetError(ultraDateTimeEditorStartDate, "The Effective starting date cannot be greater than the ending date.");
                ctr++;
            }

            if (txtPolicyValue.Value == null && txtValue.Value == null)
            {
                errorProvider.SetError(txtPolicyValue, "The Policy Value and Value cannot be both empty.");
                ctr++;
            }

            if (txtValue.Value == null && txtPolicyValue.Value != null)
            {
                errorProvider.SetError(txtValue, "The Value cannot be empty.");
                ctr++;
            }

            decimal result;

            if (txtValue.Value != null && (false == decimal.TryParse(txtValue.Value.ToString().Replace("%", ""),out result)))
            {
                errorProvider.SetError(txtValue, "Please put valid value in Value field.");
                ctr++;
            }

            if (txtPolicyValue.Value != null && (false == decimal.TryParse(txtPolicyValue.Value.ToString().Replace("%", ""), out result)))
            {
                errorProvider.SetError(txtPolicyValue, "Please put valid value in Policy Value field.");
                ctr++;
            }

            if(txtValue.Value != null && txtPolicyValue.Value != null && ((txtValue.Value.ToString().IndexOf("%") != txtPolicyValue.Value.ToString().IndexOf("%"))))
            {
                errorProvider.SetError(txtPolicyValue, "Please put same format for Value and Policy value fields.");
                ctr++;
            }


            if (Convert.ToDecimal((txtPolicyValue.Value == null || string.IsNullOrEmpty(txtPolicyValue.Value.ToString().Replace("%", ""))) ? "0" : txtPolicyValue.Value.ToString().Replace("%", "")) > Convert.ToDecimal((txtValue.Value == null || string.IsNullOrEmpty(txtValue.Value.ToString().Replace("%", "")) ? "0" : txtValue.Value.ToString().Replace("%", ""))))
            {
                errorProvider.SetError(txtPolicyValue, "The Policy value cannot be greater than the Value.");
                ctr++;
            }

            if (ctr > 0) return false;
         
            return true;
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                _presenter.OnCloseView();
            }
            catch (Exception ex)
            {
                if (ExceptionManager.Handle(ex)) throw;
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        private void ultraComboBranch_ValueChanged(object sender, EventArgs e)
        {
            if (ultraComboBranch.Value == null) return;

            LoadUnit(ultraComboBranch.Value.ToString());
        }

        private void ultraComboUnit_ValueChanged(object sender, EventArgs e)
        {
            if (ultraComboUnit.Value == null) return;

            LoadSubUnit(ultraComboUnit.Value.ToString());
        }


    }
}

