//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using HiiP.Infrastructure.Interface;
using HiiP.Infrastructure.Interface.BusinessEntities;
using HiiP.Framework.Security.UserManagement.BusinessEntity;
using HiiP.Framework.Security.UserManagement.Interface.Constants;
using HiiP.Framework.Security.UserManagement.ServiceProxies;
using HiiP.Framework.Messaging;
using HiiP.Framework.Logging.Library;
using HiiP.Framework.Common.Client;

namespace HiiP.Framework.Security.UserManagement
{
    public partial class MaintainOrganisationNamePresenter : Presenter<IMaintainOrganisationName>
    {
        public override AppTitleData GetAppTitle()
        {
            return new AppTitleData(
                 FunctionNames.MaintainOrganisationFunctionName,
                 FunctionNames.MaintainOrganisationFunctionScreenID
                 );
        }

        protected override void InitData()
        {
            base.InitData();
        }

        /// <summary>
        /// search role list by rolename and description
        /// </summary>
        /// <returns>RoleEntity[]</returns>
        internal LookupOrganisationalUnitDataSet.LookupOrganisationalUnitDataTable GetOrganisationLookup()
        {
            using (OrganisationMaintenanceServiceProxy proxy = new OrganisationMaintenanceServiceProxy())
            {
                Guid id = HiiP.Framework.Logging.Library.Utility.SetContextValues();
                using (new MonitoringTracer(id, FunctionNames.OrganisationModuleID , FunctionNames.ViewOrganisationFunctionID, ComponentType.Screen))
                {
                    return proxy.GetOrganisationLookup();
                }
            }
        }


        internal void ShowMaintainOrganisationNameDetail(OrganisationEntity OrganisationEntity)
        {
            ViewParameter parameter = new ViewParameter(
                    String.Format("{0},{1}", FunctionNames.UpdateOrganisationFunctionID, OrganisationEntity.OrganisationDescription));
            parameter.Data = OrganisationEntity;
            parameter.Key = OrganisationEntity.OrganisationDescription;
            parameter.CurrentViewStatus = ViewStatus.Update;
            ShowViewInWorkspace<MaintainOrganisationNameDetail>(parameter);
        }

    }
}

