//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using HiiP.Framework.Common;
using HiiP.Framework.Common.Client;
using HiiP.Infrastructure.Interface;
using HiiP.Infrastructure.Interface.BusinessEntities;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using HiiP.Framework.Security.UserManagement.BusinessEntity;
using NCS.IConnect.CodeTable;
using System.Data;
using HiiP.Modules.Common.Interface.Constants;

namespace HiiP.Framework.Security.UserManagement
{
    public partial class MaintainOrganisationNameDetail : BaseView, IMaintainOrganisationNameDetail
    {
        public MaintainOrganisationNameDetail()
        {
            InitializeComponent();
        }

        private string OrgenisationID = string.Empty;
        private int VersionNumber = 0; 
        
        protected override void OnLoad(EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                _presenter.OnViewReady();
                base.OnLoad(e);
                txt_OrganisationID.Text = OrgenisationID;

                LoadDropdown();

                LookupOrganisationalUnitDataSet.LookupOrganisationalUnitDataTable LookupOrganisationalUnitDataTable = new LookupOrganisationalUnitDataSet.LookupOrganisationalUnitDataTable();
                LookupOrganisationalUnitDataTable = _presenter.GetOrganisationLookupByOrgID(OrgenisationID);
                if (LookupOrganisationalUnitDataTable != null && LookupOrganisationalUnitDataTable.Rows.Count > 0)
                {
                    txt_OrganisationName.Text = LookupOrganisationalUnitDataTable[0].OrganisationalUnitName;

                    txt_UnitNumber.Text = LookupOrganisationalUnitDataTable[0].UnitNumber;
                    txt_StreetNumber.Text = LookupOrganisationalUnitDataTable[0].StreetNumber;
                    txt_Street.Text = LookupOrganisationalUnitDataTable[0].Street;
                    cmb_Type.Value = LookupOrganisationalUnitDataTable[0].Type.ToUpper();
                    cmb_Suffix.Value = LookupOrganisationalUnitDataTable[0].Suffix.ToUpper();
                    txt_Suburb.Text = LookupOrganisationalUnitDataTable[0].Suburb;
                    txt_PostCode.Text = LookupOrganisationalUnitDataTable[0].PostCode;
                    cmb_State.Value = LookupOrganisationalUnitDataTable[0].State;
                    txt_Phone.Text = LookupOrganisationalUnitDataTable[0].Phone;
                    txt_Fax.Text = LookupOrganisationalUnitDataTable[0].Fax;
                    txt_Mobile.Text = LookupOrganisationalUnitDataTable[0].Mobile;
                    txt_TollFreePhone.Text = LookupOrganisationalUnitDataTable[0].TollFreePhone;
                    txt_Email.Text = LookupOrganisationalUnitDataTable[0].Email;                    

                    VersionNumber = int.Parse(LookupOrganisationalUnitDataTable[0].VersionNo);
                }
                this.SetDirtyStatus(false);
 
            }
            catch (Exception ex)
            {
                this.Enabled = false;
                if (ExceptionManager.Handle(ex)) throw;
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        private void LoadDropdown()
        {
            CodeTableAdapter.BindComboByGenericDataTable(cmb_Type, _presenter.GetStreetTypeData(), "StreetTypeCode", "StreetType");
            CodeTableAdapter.BindComboByGenericDataTable(cmb_Suffix, _presenter.GetStreetSuffixData(), "StreetSuffixCode", "StreetSuffix");

            CodeDataSet.CodeDataTable codeTable = CodeManager.GetCodes(CodeTableCategoryNames.State, CodeStatus.Effective);
            DataSet ds = new DataSet();
            ds.Tables.Add(codeTable);
            ds.Tables[0].DefaultView.Sort = CodeTableCategoryNames.Code;

            //cmb_State.DataSource = ds.Tables[0];
            //cmb_State.ValueMember = CodeTableCategoryNames.Code;
            //cmb_State.DisplayMember = CodeTableCategoryNames.Code;
            //cmb_State.DataBind();
            CodeTableAdapter.BindComboByGenericDataTable(cmb_State, ds.Tables[0], "Code", "Code");

        }


        public override void ProcessParameter(ViewParameter parameter)
        {
            _presenter.Key = parameter.Key;
            OrganisationEntity OrganisationEntity = (OrganisationEntity) parameter.Data;
            AppTitle = _presenter.GetAppTitle();
            OrgenisationID = OrganisationEntity.OrganisationName;
            base.ProcessParameter(parameter);

        }

        private void ultraButtonCancel_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                _presenter.OnCloseView();
            }
            catch (Exception exception)
            {
                if (ExceptionManager.Handle(exception)) throw;
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        private void ultraButtonSave_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;


                if (!this.ValidateChildren())
                {
                    return;
                }

                this.errorProvider.Clear();

                bool passValidation = true;
               
                if (this.txt_OrganisationName.Value == null)
                {
                    errorProvider.SetError(txt_OrganisationName, "Organisation name can not be empty");
                    passValidation = false;

                }

                if (string.IsNullOrEmpty(cmb_State.Value == null ? null : cmb_State.Value.ToString()))
                {
                    

                    if (!string.IsNullOrEmpty(txt_UnitNumber.Text)
                        || !string.IsNullOrEmpty(txt_StreetNumber.Text)
                        || !string.IsNullOrEmpty(txt_Street.Text)
                        || !string.IsNullOrEmpty(cmb_Type.Value == null ? null : cmb_Type.Value.ToString())
                        || !string.IsNullOrEmpty(cmb_Suffix.Value == null ? null : cmb_Suffix.Value.ToString())
                        || !string.IsNullOrEmpty(txt_Suburb.Text)
                        || !string.IsNullOrEmpty(txt_PostCode.Text))
                    {
                        errorProvider.SetError(cmb_State, "State is mandatory when to input address.");
                        passValidation=false;
                    }
                }

                if(!passValidation)
                {
                    return;
                }

                LookupOrganisationalUnitDataSet.LookupOrganisationalUnitDataTable dtLookupOrganisationalUnitDataTable = new LookupOrganisationalUnitDataSet.LookupOrganisationalUnitDataTable();

                LookupOrganisationalUnitDataSet.LookupOrganisationalUnitRow rw = dtLookupOrganisationalUnitDataTable.NewLookupOrganisationalUnitRow();
                rw.OrganisationalUnitID = OrgenisationID;
                rw.OrganisationalUnitName= txt_OrganisationName.Text.Trim();                
                rw.UnitNumber = txt_UnitNumber.Text;
                rw.StreetNumber = txt_StreetNumber.Text;
                rw.Street = txt_Street.Text;
                rw.Type = cmb_Type.Value==null?string.Empty:cmb_Type.Value.ToString();
                rw.Suffix = cmb_Suffix.Value == null ? string.Empty : cmb_Suffix.Value.ToString();
                rw.Suburb = txt_Suburb.Text;
                rw.PostCode = txt_PostCode.Text;
                rw.State = cmb_State.Value == null ? string.Empty : cmb_State.Value.ToString();
                rw.Phone = txt_Phone.Text;
                rw.Fax = txt_Fax.Text;
                rw.Mobile = txt_Mobile.Text;
                rw.TollFreePhone = txt_TollFreePhone.Text;
                rw.Email = txt_Email.Text;

                rw.VersionNo = VersionNumber.ToString();
                dtLookupOrganisationalUnitDataTable.AddLookupOrganisationalUnitRow(rw);
                _presenter.SaveOrganisationLookup(dtLookupOrganisationalUnitDataTable);

                this.SetDirtyStatus(false);
                _presenter.OnCloseView();   
            }
            catch (Exception exception)
            {
                if (ExceptionManager.Handle(exception)) throw;
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        private void validationProvider_ValueConvert(object sender, Microsoft.Practices.EnterpriseLibrary.Validation.Integration.ValueConvertEventArgs e)
        {
            //if (e.SourcePropertyName!="State")
            //{
            //    return;
            //}
            //if (string.IsNullOrEmpty(cmb_State.Value == null ? null : cmb_State.Value.ToString()))
            //{
            //    e.ConvertedValue = string.Empty;

            //    if (!string.IsNullOrEmpty(txt_UnitNumber.Text)
            //        || !string.IsNullOrEmpty(txt_StreetNumber.Text)
            //        || !string.IsNullOrEmpty(txt_Street.Text)
            //        || !string.IsNullOrEmpty(cmb_Type.Value == null ? null : cmb_Type.Value.ToString())
            //        || !string.IsNullOrEmpty(cmb_Suffix.Value == null ? null : cmb_Suffix.Value.ToString())
            //        || !string.IsNullOrEmpty(txt_Suburb.Text)
            //        || !string.IsNullOrEmpty(txt_PostCode.Text))
            //    {
            //        e.ConversionErrorMessage = "State is mandatory when to input address.";
            //        return;
            //    }
            //}


        }


    }
}

