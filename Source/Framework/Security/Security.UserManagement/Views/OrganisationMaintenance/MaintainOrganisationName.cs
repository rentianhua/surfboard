//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using HiiP.Framework.Common;
using HiiP.Framework.Common.Client.Async;
using HiiP.Framework.Common.Client;
using HiiP.Infrastructure.Interface;
using HiiP.Infrastructure.Interface.BusinessEntities;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.EventBroker;
using System.Data;
using System.ComponentModel;

using HiiP.Framework.Security.UserManagement.BusinessEntity;
using Infragistics.Win.UltraWinGrid;

namespace HiiP.Framework.Security.UserManagement
{
    public partial class MaintainOrganisationName : BaseView, IMaintainOrganisationName
    {
        public MaintainOrganisationName()
        {
            InitializeComponent();
        }

        protected override void OnLoad(EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                _presenter.OnViewReady();
                base.OnLoad(e);

              
            }
            catch (Exception ex)
            {
                this.Enabled = false;

                if (ExceptionManager.Handle(ex)) throw;
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        /// <summary>
        /// Process Show View Event Parameters
        /// </summary>
        /// <param name="parameter">The parameters.</param>
        /// <remarks>
        /// This method mostly used to show a add view or deal with event call.
        /// </remarks>
        public override void ProcessParameter(ViewParameter parameter)
        {
            AppTitle = _presenter.GetAppTitle();

            base.ProcessParameter(parameter);

        }

        private void ultraBtnSearch_Click(object sender, EventArgs e)
        {
            this.LoadOrganisationList();
        }

        private void ultraBtnClose_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;

                _presenter.OnCloseView();
            }
            catch (Exception exception)
            {
                if (ExceptionManager.Handle(exception)) throw;
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        [EventSubscription(HiiP.Framework.Security.UserManagement.Constants.EventTopicNames.UpdateOrganisationName, ThreadOption.UserInterface)]
        public void GetOrganisationLookup(object sender, EventArgs<string> eventArgs)
        {
            try
            {
                this.LoadOrganisationList();
            }
            catch (Exception ex)
            {
                if (ExceptionManager.Handle(ex))
                {
                    throw;
                }
            }

        }

        private void LoadOrganisationList()
        {
            this.ultraGridOrganisational.Focus();

            var argus = txt_Orgenisation.Text ;
             using (AsyncWorker<IMaintainOrganisationName> worker = new AsyncWorker<IMaintainOrganisationName>(_presenter, this.ultraGridOrganisational, new Control[] { ultraBtnSearch, ultraBtnReset }))
             {
                 worker.DoWork += delegate(object oDoWork, DoWorkEventArgs eDoWork)
                 {
                     var lookup = _presenter.GetOrganisationLookup();

                     var tempArgu = eDoWork.Argument as string;
                     eDoWork.Result = RetriveOrgData(lookup,
                         tempArgu);
                 };
                 worker.RunWorkerCompleted += delegate(object oCompleted, RunWorkerCompletedEventArgs eCompleted)
                 {

                     this.ultraGridOrganisational.DataSource = eCompleted.Result;
                     ultraLabTotalNum.Text = HiiP.Framework.Messaging.Messages.General.GEI001.Format(this.ultraGridOrganisational.Rows.Count.ToString());

                 };
                 worker.Run(argus);

             }
        }

        private LookupOrganisationalUnitDataSet.LookupOrganisationalUnitDataTable RetriveOrgData(LookupOrganisationalUnitDataSet.LookupOrganisationalUnitDataTable LookUpOrg, string Orgenisation)
        {
            if (LookUpOrg.Rows.Count == 0) return LookUpOrg;

            foreach (LookupOrganisationalUnitDataSet.LookupOrganisationalUnitRow row in LookUpOrg.Select(string.Empty, "OrganisationalUnitName"))
            {
                if (!this.IsMatchOrgName(Orgenisation, row.OrganisationalUnitName))
                {
                    row.Delete();
                }
            }
            LookUpOrg.AcceptChanges();

            return LookUpOrg;
        }

        private bool IsMatchOrgName(string roleNameToMatch, string roleName)
        {
            return (string.IsNullOrEmpty(roleNameToMatch)
                   || SearchHelper.IsRegexMatch(roleName.ToLower(), roleNameToMatch.ToLower(), @"[\w|\W]*"));
        }

        private void ultraBtnReset_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                txt_Orgenisation.Clear();
                ultraGridOrganisational.DataSource = new LookupOrganisationalUnitDataSet();
                ultraLabTotalNum.Text = HiiP.Framework.Messaging.Messages.General.GEI001.Format(this.ultraGridOrganisational.Rows.Count.ToString());

            }
            catch (Exception ex)
            {
                if (ExceptionManager.Handle(ex)) throw;
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        private void ultraGridOrganisational_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyData != Keys.Enter)
            {
                return;
            }

            UltraGridRow row = this.ultraGridOrganisational.ActiveRow;
            if (row == null)
            {
                return;
            }
            ultraGridOrganisational_DoubleClickRow(sender, new DoubleClickRowEventArgs(row, RowArea.Cell));
        }

        private void ultraGridOrganisational_DoubleClickRow(object sender, Infragistics.Win.UltraWinGrid.DoubleClickRowEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                OrganisationEntity orgE = new OrganisationEntity();
                orgE.OrganisationName = ultraGridOrganisational.ActiveRow.Cells["OrganisationalUnitID"].Value.ToString();
                orgE.OrganisationDescription = ultraGridOrganisational.ActiveRow.Cells["OrganisationalUnitName"].Value.ToString();


                _presenter.ShowMaintainOrganisationNameDetail(orgE);

            }
            catch (Exception exception)
            {
                if (ExceptionManager.Handle(exception)) throw;
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }
    }
}

