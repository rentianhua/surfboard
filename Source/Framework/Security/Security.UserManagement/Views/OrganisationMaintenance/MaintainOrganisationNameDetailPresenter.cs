//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v90/MS.VSIPCC.v90/ms.practices.scsf.2008apr/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------


using System;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using HiiP.Infrastructure.Interface;
using HiiP.Infrastructure.Interface.BusinessEntities;
using HiiP.Framework.Security.UserManagement.BusinessEntity;
using HiiP.Framework.Security.UserManagement.Interface.Constants;
using HiiP.Framework.Security.UserManagement.ServiceProxies;
using HiiP.Framework.Messaging;
using HiiP.Framework.Logging.Library;
using HiiP.Framework.Common.Client;
using Microsoft.Practices.CompositeUI.EventBroker;
using HiiP.Modules.Common.Interface.Services;
using HiiP.Modules.Common.Interface.BusinessEntities;
using System.Data;

namespace HiiP.Framework.Security.UserManagement
{
    public partial class MaintainOrganisationNameDetailPresenter : Presenter<IMaintainOrganisationNameDetail>
    {
        /// <summary>
        /// This method is a placeholder that will be called by the view when it has been loaded.
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        public override AppTitleData GetAppTitle()
        {
            return new AppTitleData(FunctionNames.MaintainOrganisationFunctionName, FunctionNames.UpdateOrganisationFunctionScreenID
                ).Format(Key);
        }

        internal LookupOrganisationalUnitDataSet.LookupOrganisationalUnitDataTable GetOrganisationLookupByOrgID(string OrganisationalUnitID)
        {
            using (OrganisationMaintenanceServiceProxy proxy = new OrganisationMaintenanceServiceProxy())
            {
                Guid id = HiiP.Framework.Logging.Library.Utility.SetContextValues();
                using (new MonitoringTracer(id, FunctionNames.OrganisationModuleID, FunctionNames.ViewOrganisationFunctionID, ComponentType.Screen))
                {
                    return proxy.GetOrganisationLookupByOrgID(OrganisationalUnitID);
                }
            }
        }

        internal void SaveOrganisationLookup(LookupOrganisationalUnitDataSet.LookupOrganisationalUnitDataTable dtLookupOrganisationalUnitDataTable)
        {
            using (OrganisationMaintenanceServiceProxy proxy = new OrganisationMaintenanceServiceProxy())
            {
                Guid id = HiiP.Framework.Logging.Library.Utility.SetContextValues();
                using (new MonitoringTracer(id, FunctionNames.OrganisationModuleID, FunctionNames.UpdateOrganisationFunctionID, ComponentType.Screen))
                {
                    proxy.SaveOrganisationLookup(dtLookupOrganisationalUnitDataTable);
                }
            }

            this.GetOrganisationLookup(dtLookupOrganisationalUnitDataTable.OrganisationalUnitIDColumn.ToString());
        }


        [EventPublication(HiiP.Framework.Security.UserManagement.Constants.EventTopicNames.UpdateOrganisationName, PublicationScope.Global)]
        public event EventHandler<EventArgs<string>> OrganisationLookup;



        protected virtual void GetOrganisationLookup(string OrganisationID)
        {
            if (OrganisationLookup != null)
                OrganisationLookup(this, new EventArgs<string>(OrganisationID));
        }


        internal DataTable GetStreetTypeData()
        {  

            return (DataTable)AddressService.GetStreetTypeData().LookupStreetType;
        }

        internal DataTable GetStreetSuffixData()
        {
            return (DataTable)AddressService.GetStreetSuffixData().LookupStreetSuffix;
        }
        

        internal IAddressService AddressService
        {
            get
            {
                return WorkItem.Services.Get<IAddressService>();
            }
        }
    }
}

